; ModuleID = 'lchain.c'
source_filename = "lchain.c"
target datalayout = "e-m:e-p:64:64-i64:64-i128:128-n32:64-S128"
target triple = "riscv64-unknown-unknown"

%struct.mm128_t = type { i64, i64 }
%struct.rsbucket_128x_t = type { ptr, ptr }

@.str = private unnamed_addr constant [22 x i8] c"n_bits <= RS_MAX_BITS\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"lchain.c\00", align 1
@__PRETTY_FUNCTION__.rs_sort_128x = private unnamed_addr constant [50 x i8] c"void rs_sort_128x(mm128_t *, mm128_t *, int, int)\00", align 1
@.str.2 = private unnamed_addr constant [16 x i8] c"n_v < INT32_MAX\00", align 1
@__PRETTY_FUNCTION__.mg_chain_backtrack = private unnamed_addr constant [151 x i8] c"uint64_t *mg_chain_backtrack(void *, int64_t, const int32_t *, const int64_t *, int32_t *, int32_t *, int32_t, int32_t, int32_t, int32_t *, int32_t *)\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"max_dist_x: %d\0A\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"max_dist_y: %d\0A\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"bw: %d\0A\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"max_skip: %d\0A\00", align 1
@.str.7 = private unnamed_addr constant [14 x i8] c"max_iter: %d\0A\00", align 1
@.str.8 = private unnamed_addr constant [13 x i8] c"min_cnt: %d\0A\00", align 1
@.str.9 = private unnamed_addr constant [12 x i8] c"min_sc: %d\0A\00", align 1
@.str.10 = private unnamed_addr constant [19 x i8] c"chn_pen_gap: %.2f\0A\00", align 1
@.str.11 = private unnamed_addr constant [20 x i8] c"chn_pen_skip: %.2f\0A\00", align 1
@.str.12 = private unnamed_addr constant [13 x i8] c"is_cdna: %d\0A\00", align 1
@.str.13 = private unnamed_addr constant [11 x i8] c"n_seg: %d\0A\00", align 1
@.str.14 = private unnamed_addr constant [8 x i8] c"n: %ld\0A\00", align 1
@.str.15 = private unnamed_addr constant [7 x i8] c"a: %p\0A\00", align 1
@.str.16 = private unnamed_addr constant [10 x i8] c"n_u_: %p\0A\00", align 1
@.str.17 = private unnamed_addr constant [8 x i8] c"_u: %p\0A\00", align 1
@.str.18 = private unnamed_addr constant [8 x i8] c"km: %p\0A\00", align 1
@.str.19 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@.str.20 = private unnamed_addr constant [20 x i8] c"Failed to open file\00", align 1
@.str.21 = private unnamed_addr constant [26 x i8] c"Failed to allocate memory\00", align 1
@.str.22 = private unnamed_addr constant [24 x i8] c"%d: x = %llu, y = %llu\0A\00", align 1
@sta = dso_local global [1000 x %struct.mm128_t] [%struct.mm128_t { i64 23, i64 4462471020567 }, %struct.mm128_t { i64 23, i64 4462471817999 }, %struct.mm128_t { i64 31, i64 4462471020567 }, %struct.mm128_t { i64 31, i64 4462471817999 }, %struct.mm128_t { i64 39, i64 4462471020567 }, %struct.mm128_t { i64 39, i64 4462471817999 }, %struct.mm128_t { i64 47, i64 4462471020567 }, %struct.mm128_t { i64 47, i64 4462471817999 }, %struct.mm128_t { i64 55, i64 4462471020567 }, %struct.mm128_t { i64 55, i64 4462471817999 }, %struct.mm128_t { i64 63, i64 4462471020567 }, %struct.mm128_t { i64 63, i64 4462471817999 }, %struct.mm128_t { i64 71, i64 4462471020567 }, %struct.mm128_t { i64 71, i64 4462471817999 }, %struct.mm128_t { i64 79, i64 4462471020567 }, %struct.mm128_t { i64 79, i64 4462471817999 }, %struct.mm128_t { i64 87, i64 4462471020567 }, %struct.mm128_t { i64 87, i64 4462471817999 }, %struct.mm128_t { i64 95, i64 4462471020567 }, %struct.mm128_t { i64 95, i64 4462471817999 }, %struct.mm128_t { i64 103, i64 4462471020567 }, %struct.mm128_t { i64 103, i64 4462471817999 }, %struct.mm128_t { i64 111, i64 4462471020567 }, %struct.mm128_t { i64 111, i64 4462471817999 }, %struct.mm128_t { i64 119, i64 4462471020567 }, %struct.mm128_t { i64 119, i64 4462471817999 }, %struct.mm128_t { i64 127, i64 4462471020567 }, %struct.mm128_t { i64 127, i64 4462471817999 }, %struct.mm128_t { i64 135, i64 4462471020567 }, %struct.mm128_t { i64 135, i64 4462471817999 }, %struct.mm128_t { i64 143, i64 4462471020567 }, %struct.mm128_t { i64 143, i64 4462471817999 }, %struct.mm128_t { i64 151, i64 4462471020567 }, %struct.mm128_t { i64 151, i64 4462471817999 }, %struct.mm128_t { i64 159, i64 4462471020567 }, %struct.mm128_t { i64 159, i64 4462471817999 }, %struct.mm128_t { i64 167, i64 4462471020567 }, %struct.mm128_t { i64 167, i64 4462471817999 }, %struct.mm128_t { i64 175, i64 4462471020567 }, %struct.mm128_t { i64 175, i64 4462471817999 }, %struct.mm128_t { i64 183, i64 4462471020567 }, %struct.mm128_t { i64 183, i64 4462471817999 }, %struct.mm128_t { i64 191, i64 4462471020567 }, %struct.mm128_t { i64 191, i64 4462471817999 }, %struct.mm128_t { i64 199, i64 4462471020567 }, %struct.mm128_t { i64 199, i64 4462471817999 }, %struct.mm128_t { i64 207, i64 4462471020567 }, %struct.mm128_t { i64 207, i64 4462471817999 }, %struct.mm128_t { i64 215, i64 4462471020567 }, %struct.mm128_t { i64 215, i64 4462471817999 }, %struct.mm128_t { i64 223, i64 4462471020567 }, %struct.mm128_t { i64 223, i64 4462471817999 }, %struct.mm128_t { i64 231, i64 4462471020567 }, %struct.mm128_t { i64 231, i64 4462471817999 }, %struct.mm128_t { i64 239, i64 4462471020567 }, %struct.mm128_t { i64 239, i64 4462471817999 }, %struct.mm128_t { i64 247, i64 4462471020567 }, %struct.mm128_t { i64 247, i64 4462471817999 }, %struct.mm128_t { i64 255, i64 4462471020567 }, %struct.mm128_t { i64 255, i64 4462471817999 }, %struct.mm128_t { i64 263, i64 4462471020567 }, %struct.mm128_t { i64 263, i64 4462471817999 }, %struct.mm128_t { i64 271, i64 4462471020567 }, %struct.mm128_t { i64 271, i64 4462471817999 }, %struct.mm128_t { i64 279, i64 4462471020567 }, %struct.mm128_t { i64 279, i64 4462471817999 }, %struct.mm128_t { i64 287, i64 4462471020567 }, %struct.mm128_t { i64 287, i64 4462471817999 }, %struct.mm128_t { i64 295, i64 4462471020567 }, %struct.mm128_t { i64 295, i64 4462471817999 }, %struct.mm128_t { i64 303, i64 4462471020567 }, %struct.mm128_t { i64 303, i64 4462471817999 }, %struct.mm128_t { i64 311, i64 4462471020567 }, %struct.mm128_t { i64 311, i64 4462471817999 }, %struct.mm128_t { i64 319, i64 4462471020567 }, %struct.mm128_t { i64 319, i64 4462471817999 }, %struct.mm128_t { i64 327, i64 4462471020567 }, %struct.mm128_t { i64 327, i64 4462471817999 }, %struct.mm128_t { i64 335, i64 4462471020567 }, %struct.mm128_t { i64 335, i64 4462471817999 }, %struct.mm128_t { i64 343, i64 4462471020567 }, %struct.mm128_t { i64 343, i64 4462471817999 }, %struct.mm128_t { i64 351, i64 4462471020567 }, %struct.mm128_t { i64 351, i64 4462471817999 }, %struct.mm128_t { i64 355, i64 64424509795 }, %struct.mm128_t { i64 358, i64 64424509798 }, %struct.mm128_t { i64 367, i64 64424509807 }, %struct.mm128_t { i64 375, i64 64424509815 }, %struct.mm128_t { i64 380, i64 64424509820 }, %struct.mm128_t { i64 381, i64 64424509821 }, %struct.mm128_t { i64 386, i64 64424509826 }, %struct.mm128_t { i64 393, i64 64424509833 }, %struct.mm128_t { i64 398, i64 64424509838 }, %struct.mm128_t { i64 407, i64 64424509847 }, %struct.mm128_t { i64 417, i64 64424509857 }, %struct.mm128_t { i64 422, i64 64424509862 }, %struct.mm128_t { i64 424, i64 64424509864 }, %struct.mm128_t { i64 430, i64 64424509870 }, %struct.mm128_t { i64 439, i64 64424509879 }, %struct.mm128_t { i64 443, i64 64424509883 }, %struct.mm128_t { i64 447, i64 64424509887 }, %struct.mm128_t { i64 454, i64 64424509894 }, %struct.mm128_t { i64 464, i64 64424509904 }, %struct.mm128_t { i64 465, i64 64424509905 }, %struct.mm128_t { i64 475, i64 64424509915 }, %struct.mm128_t { i64 476, i64 64424509916 }, %struct.mm128_t { i64 479, i64 64424509919 }, %struct.mm128_t { i64 488, i64 64424509928 }, %struct.mm128_t { i64 489, i64 64424509929 }, %struct.mm128_t { i64 496, i64 64424509936 }, %struct.mm128_t { i64 498, i64 64424509938 }, %struct.mm128_t { i64 501, i64 64424509941 }, %struct.mm128_t { i64 503, i64 64424509943 }, %struct.mm128_t { i64 513, i64 64424509953 }, %struct.mm128_t { i64 514, i64 64424509954 }, %struct.mm128_t { i64 517, i64 64424509957 }, %struct.mm128_t { i64 519, i64 64424509959 }, %struct.mm128_t { i64 522, i64 64424509962 }, %struct.mm128_t { i64 530, i64 64424509970 }, %struct.mm128_t { i64 538, i64 64424509978 }, %struct.mm128_t { i64 539, i64 64424509979 }, %struct.mm128_t { i64 548, i64 64424509988 }, %struct.mm128_t { i64 557, i64 64424509997 }, %struct.mm128_t { i64 562, i64 64424510002 }, %struct.mm128_t { i64 571, i64 64424510011 }, %struct.mm128_t { i64 574, i64 64424510014 }, %struct.mm128_t { i64 583, i64 64424510023 }, %struct.mm128_t { i64 593, i64 64424510033 }, %struct.mm128_t { i64 594, i64 64424510034 }, %struct.mm128_t { i64 599, i64 64424510039 }, %struct.mm128_t { i64 606, i64 64424510046 }, %struct.mm128_t { i64 611, i64 64424510051 }, %struct.mm128_t { i64 617, i64 64424510057 }, %struct.mm128_t { i64 625, i64 64424510065 }, %struct.mm128_t { i64 627, i64 64424510067 }, %struct.mm128_t { i64 632, i64 64424510072 }, %struct.mm128_t { i64 641, i64 64424510081 }, %struct.mm128_t { i64 642, i64 64424510082 }, %struct.mm128_t { i64 648, i64 64424510088 }, %struct.mm128_t { i64 653, i64 64424510093 }, %struct.mm128_t { i64 659, i64 64424510099 }, %struct.mm128_t { i64 668, i64 64424510108 }, %struct.mm128_t { i64 672, i64 64424510112 }, %struct.mm128_t { i64 678, i64 64424510118 }, %struct.mm128_t { i64 687, i64 64424510127 }, %struct.mm128_t { i64 694, i64 64424510134 }, %struct.mm128_t { i64 699, i64 64424510139 }, %struct.mm128_t { i64 705, i64 64424510145 }, %struct.mm128_t { i64 713, i64 64424510153 }, %struct.mm128_t { i64 714, i64 64424510154 }, %struct.mm128_t { i64 718, i64 64424510158 }, %struct.mm128_t { i64 719, i64 64424510159 }, %struct.mm128_t { i64 729, i64 64424510169 }, %struct.mm128_t { i64 738, i64 64424510178 }, %struct.mm128_t { i64 745, i64 64424510185 }, %struct.mm128_t { i64 749, i64 64424510189 }, %struct.mm128_t { i64 757, i64 64424510197 }, %struct.mm128_t { i64 764, i64 64424510204 }, %struct.mm128_t { i64 772, i64 64424510212 }, %struct.mm128_t { i64 780, i64 64424510220 }, %struct.mm128_t { i64 784, i64 64424510224 }, %struct.mm128_t { i64 792, i64 64424510232 }, %struct.mm128_t { i64 794, i64 64424510234 }, %struct.mm128_t { i64 803, i64 64424510243 }, %struct.mm128_t { i64 807, i64 64424510247 }, %struct.mm128_t { i64 816, i64 64424510256 }, %struct.mm128_t { i64 817, i64 64424510257 }, %struct.mm128_t { i64 823, i64 64424510263 }, %struct.mm128_t { i64 825, i64 64424510265 }, %struct.mm128_t { i64 826, i64 64424510266 }, %struct.mm128_t { i64 836, i64 64424510276 }, %struct.mm128_t { i64 842, i64 64424510282 }, %struct.mm128_t { i64 843, i64 64424510283 }, %struct.mm128_t { i64 850, i64 64424676096 }, %struct.mm128_t { i64 850, i64 64424510290 }, %struct.mm128_t { i64 854, i64 64424510294 }, %struct.mm128_t { i64 856, i64 64424510296 }, %struct.mm128_t { i64 866, i64 64424510306 }, %struct.mm128_t { i64 869, i64 64424510309 }, %struct.mm128_t { i64 870, i64 64424510310 }, %struct.mm128_t { i64 871, i64 64424510311 }, %struct.mm128_t { i64 875, i64 64424510315 }, %struct.mm128_t { i64 884, i64 64424510324 }, %struct.mm128_t { i64 890, i64 64424510330 }, %struct.mm128_t { i64 898, i64 64424510338 }, %struct.mm128_t { i64 902, i64 64424510342 }, %struct.mm128_t { i64 911, i64 64424510351 }, %struct.mm128_t { i64 920, i64 64424510360 }, %struct.mm128_t { i64 923, i64 64424510363 }, %struct.mm128_t { i64 924, i64 64424510364 }, %struct.mm128_t { i64 930, i64 64424510370 }, %struct.mm128_t { i64 934, i64 64424510374 }, %struct.mm128_t { i64 941, i64 64424510381 }, %struct.mm128_t { i64 943, i64 64424510383 }, %struct.mm128_t { i64 947, i64 64424510387 }, %struct.mm128_t { i64 950, i64 64424510390 }, %struct.mm128_t { i64 953, i64 64424510393 }, %struct.mm128_t { i64 960, i64 64424510400 }, %struct.mm128_t { i64 964, i64 64424510404 }, %struct.mm128_t { i64 965, i64 64424510405 }, %struct.mm128_t { i64 967, i64 64424510407 }, %struct.mm128_t { i64 970, i64 64424510410 }, %struct.mm128_t { i64 980, i64 64424510420 }, %struct.mm128_t { i64 988, i64 64424510428 }, %struct.mm128_t { i64 997, i64 64424510437 }, %struct.mm128_t { i64 999, i64 64424510439 }, %struct.mm128_t { i64 1008, i64 64424510448 }, %struct.mm128_t { i64 1009, i64 64424510449 }, %struct.mm128_t { i64 1010, i64 64424510450 }, %struct.mm128_t { i64 1014, i64 64424510454 }, %struct.mm128_t { i64 1022, i64 64424510462 }, %struct.mm128_t { i64 1031, i64 64424510471 }, %struct.mm128_t { i64 1039, i64 64424510479 }, %struct.mm128_t { i64 1043, i64 64424510483 }, %struct.mm128_t { i64 1052, i64 64424510492 }, %struct.mm128_t { i64 1059, i64 64424510499 }, %struct.mm128_t { i64 1067, i64 64424510507 }, %struct.mm128_t { i64 1075, i64 64424510515 }, %struct.mm128_t { i64 1083, i64 64424510523 }, %struct.mm128_t { i64 1086, i64 64424510526 }, %struct.mm128_t { i64 1087, i64 64424510527 }, %struct.mm128_t { i64 1096, i64 64424510536 }, %struct.mm128_t { i64 1100, i64 64424510540 }, %struct.mm128_t { i64 1120, i64 64424823785 }, %struct.mm128_t { i64 1120, i64 64424510560 }, %struct.mm128_t { i64 1120, i64 64424823708 }, %struct.mm128_t { i64 1121, i64 64425049752 }, %struct.mm128_t { i64 1121, i64 64424823733 }, %struct.mm128_t { i64 1121, i64 64424823757 }, %struct.mm128_t { i64 1121, i64 64425362540 }, %struct.mm128_t { i64 1121, i64 64424649401 }, %struct.mm128_t { i64 1121, i64 64424510561 }, %struct.mm128_t { i64 1121, i64 64424823709 }, %struct.mm128_t { i64 1123, i64 64424510563 }, %struct.mm128_t { i64 1123, i64 64425049754 }, %struct.mm128_t { i64 1123, i64 64424823735 }, %struct.mm128_t { i64 1123, i64 64425362542 }, %struct.mm128_t { i64 1123, i64 64425036829 }, %struct.mm128_t { i64 1123, i64 64424823711 }, %struct.mm128_t { i64 1126, i64 64424823690 }, %struct.mm128_t { i64 1126, i64 64424510566 }, %struct.mm128_t { i64 1126, i64 64424823714 }, %struct.mm128_t { i64 1136, i64 64424510576 }, %struct.mm128_t { i64 1137, i64 64425300598 }, %struct.mm128_t { i64 1137, i64 64424510577 }, %struct.mm128_t { i64 1138, i64 64424510578 }, %struct.mm128_t { i64 1146, i64 64424510586 }, %struct.mm128_t { i64 1154, i64 64424510594 }, %struct.mm128_t { i64 1155, i64 64424510595 }, %struct.mm128_t { i64 1165, i64 64424510605 }, %struct.mm128_t { i64 1175, i64 64424510615 }, %struct.mm128_t { i64 1182, i64 64424510622 }, %struct.mm128_t { i64 1189, i64 64424510629 }, %struct.mm128_t { i64 1195, i64 64424510635 }, %struct.mm128_t { i64 1196, i64 64424510636 }, %struct.mm128_t { i64 1202, i64 64424510642 }, %struct.mm128_t { i64 1206, i64 64424510646 }, %struct.mm128_t { i64 1216, i64 64424510656 }, %struct.mm128_t { i64 1217, i64 64424510657 }, %struct.mm128_t { i64 1220, i64 64424510660 }, %struct.mm128_t { i64 1221, i64 64424510661 }, %struct.mm128_t { i64 1223, i64 64424510663 }, %struct.mm128_t { i64 1232, i64 64424510672 }, %struct.mm128_t { i64 1233, i64 64424510673 }, %struct.mm128_t { i64 1243, i64 64424510683 }, %struct.mm128_t { i64 1249, i64 64424510689 }, %struct.mm128_t { i64 1252, i64 64424510692 }, %struct.mm128_t { i64 1257, i64 64424510697 }, %struct.mm128_t { i64 1259, i64 64424510699 }, %struct.mm128_t { i64 1268, i64 64424510708 }, %struct.mm128_t { i64 1276, i64 64424510716 }, %struct.mm128_t { i64 1283, i64 64424510723 }, %struct.mm128_t { i64 1288, i64 64424510728 }, %struct.mm128_t { i64 1298, i64 64424510738 }, %struct.mm128_t { i64 1302, i64 64424510742 }, %struct.mm128_t { i64 1307, i64 64424510747 }, %struct.mm128_t { i64 1311, i64 64424510751 }, %struct.mm128_t { i64 1312, i64 64424510752 }, %struct.mm128_t { i64 1314, i64 64424510754 }, %struct.mm128_t { i64 1315, i64 64424510755 }, %struct.mm128_t { i64 1318, i64 64424510758 }, %struct.mm128_t { i64 1327, i64 64424510767 }, %struct.mm128_t { i64 1331, i64 64424510771 }, %struct.mm128_t { i64 1335, i64 64424510775 }, %struct.mm128_t { i64 1339, i64 64424510779 }, %struct.mm128_t { i64 1345, i64 64424510785 }, %struct.mm128_t { i64 1354, i64 64424510794 }, %struct.mm128_t { i64 1357, i64 64424510797 }, %struct.mm128_t { i64 1364, i64 64424510804 }, %struct.mm128_t { i64 1367, i64 64424510807 }, %struct.mm128_t { i64 1375, i64 64424510815 }, %struct.mm128_t { i64 1376, i64 64424510816 }, %struct.mm128_t { i64 1384, i64 64424510824 }, %struct.mm128_t { i64 1389, i64 64424510829 }, %struct.mm128_t { i64 1390, i64 64424510830 }, %struct.mm128_t { i64 1393, i64 64424510833 }, %struct.mm128_t { i64 1400, i64 64424510840 }, %struct.mm128_t { i64 1409, i64 64424510849 }, %struct.mm128_t { i64 1416, i64 64424510856 }, %struct.mm128_t { i64 1417, i64 64424510857 }, %struct.mm128_t { i64 1418, i64 64424510858 }, %struct.mm128_t { i64 1423, i64 64424510863 }, %struct.mm128_t { i64 1429, i64 64424510869 }, %struct.mm128_t { i64 1433, i64 64424510873 }, %struct.mm128_t { i64 1438, i64 64424510878 }, %struct.mm128_t { i64 1443, i64 64424510883 }, %struct.mm128_t { i64 1449, i64 64424510889 }, %struct.mm128_t { i64 1450, i64 64424510890 }, %struct.mm128_t { i64 1459, i64 64424510899 }, %struct.mm128_t { i64 1469, i64 64424510909 }, %struct.mm128_t { i64 1477, i64 64424510917 }, %struct.mm128_t { i64 1485, i64 64424510925 }, %struct.mm128_t { i64 1495, i64 64424510935 }, %struct.mm128_t { i64 1498, i64 64424510938 }, %struct.mm128_t { i64 1506, i64 64424510946 }, %struct.mm128_t { i64 1507, i64 64424510947 }, %struct.mm128_t { i64 1509, i64 64424510949 }, %struct.mm128_t { i64 1510, i64 64424510950 }, %struct.mm128_t { i64 1520, i64 64424510960 }, %struct.mm128_t { i64 1525, i64 64424510965 }, %struct.mm128_t { i64 1527, i64 64424510967 }, %struct.mm128_t { i64 1533, i64 64424510973 }, %struct.mm128_t { i64 1541, i64 64424510981 }, %struct.mm128_t { i64 1545, i64 64424510985 }, %struct.mm128_t { i64 1552, i64 64424510992 }, %struct.mm128_t { i64 1556, i64 64424510996 }, %struct.mm128_t { i64 1562, i64 64424511002 }, %struct.mm128_t { i64 1572, i64 64424511012 }, %struct.mm128_t { i64 1575, i64 64424511015 }, %struct.mm128_t { i64 1581, i64 64425589490 }, %struct.mm128_t { i64 1581, i64 64424511021 }, %struct.mm128_t { i64 1586, i64 64424511026 }, %struct.mm128_t { i64 1586, i64 64425589495 }, %struct.mm128_t { i64 1587, i64 64424511027 }, %struct.mm128_t { i64 1587, i64 64424944562 }, %struct.mm128_t { i64 1589, i64 64424511029 }, %struct.mm128_t { i64 1592, i64 64424511032 }, %struct.mm128_t { i64 1600, i64 64424763652 }, %struct.mm128_t { i64 1600, i64 64425023818 }, %struct.mm128_t { i64 1600, i64 64424551955 }, %struct.mm128_t { i64 1600, i64 64424883417 }, %struct.mm128_t { i64 1600, i64 64424511040 }, %struct.mm128_t { i64 1600, i64 64425008625 }, %struct.mm128_t { i64 1600, i64 64425508881 }, %struct.mm128_t { i64 1600, i64 64425472773 }, %struct.mm128_t { i64 1600, i64 64425759783 }, %struct.mm128_t { i64 1600, i64 64424690281 }, %struct.mm128_t { i64 1600, i64 64425325826 }, %struct.mm128_t { i64 1600, i64 64425352309 }, %struct.mm128_t { i64 1600, i64 64425106990 }, %struct.mm128_t { i64 1600, i64 64425449417 }, %struct.mm128_t { i64 1600, i64 64425447420 }, %struct.mm128_t { i64 1600, i64 64425126110 }, %struct.mm128_t { i64 1600, i64 64424563693 }, %struct.mm128_t { i64 1608, i64 64425759791 }, %struct.mm128_t { i64 1608, i64 64424609996 }, %struct.mm128_t { i64 1608, i64 64425352317 }, %struct.mm128_t { i64 1608, i64 64425008633 }, %struct.mm128_t { i64 1608, i64 64424511048 }, %struct.mm128_t { i64 1608, i64 64425232458 }, %struct.mm128_t { i64 1608, i64 64425490081 }, %struct.mm128_t { i64 1608, i64 64425508889 }, %struct.mm128_t { i64 1608, i64 64425325834 }, %struct.mm128_t { i64 1608, i64 64425472781 }, %struct.mm128_t { i64 1608, i64 64425106998 }, %struct.mm128_t { i64 1608, i64 64424551963 }, %struct.mm128_t { i64 1608, i64 64424690289 }, %struct.mm128_t { i64 1612, i64 64424511052 }, %struct.mm128_t { i64 1621, i64 64424511061 }, %struct.mm128_t { i64 1623, i64 64424883439 }, %struct.mm128_t { i64 1623, i64 64424563715 }, %struct.mm128_t { i64 1623, i64 64424511063 }, %struct.mm128_t { i64 1623, i64 64424598657 }, %struct.mm128_t { i64 1623, i64 64425307665 }, %struct.mm128_t { i64 1623, i64 64425494019 }, %struct.mm128_t { i64 1623, i64 64425352331 }, %struct.mm128_t { i64 1623, i64 64425589534 }, %struct.mm128_t { i64 1623, i64 64425107012 }, %struct.mm128_t { i64 1627, i64 64424511067 }, %struct.mm128_t { i64 1633, i64 64424511073 }, %struct.mm128_t { i64 1641, i64 64424511081 }, %struct.mm128_t { i64 1644, i64 64425611227 }, %struct.mm128_t { i64 1644, i64 64424511084 }, %struct.mm128_t { i64 1653, i64 64425704781 }, %struct.mm128_t { i64 1653, i64 64424511093 }, %struct.mm128_t { i64 1653, i64 64425447478 }, %struct.mm128_t { i64 1657, i64 64424511097 }, %struct.mm128_t { i64 1667, i64 64424511107 }, %struct.mm128_t { i64 1668, i64 64424511108 }, %struct.mm128_t { i64 1678, i64 64424511118 }, %struct.mm128_t { i64 1679, i64 64424511119 }, %struct.mm128_t { i64 1689, i64 64424511129 }, %struct.mm128_t { i64 1696, i64 64424511136 }, %struct.mm128_t { i64 1701, i64 64424511141 }, %struct.mm128_t { i64 1703, i64 64424511143 }, %struct.mm128_t { i64 1707, i64 64424511147 }, %struct.mm128_t { i64 1716, i64 64424511156 }, %struct.mm128_t { i64 1717, i64 64424511157 }, %struct.mm128_t { i64 1726, i64 64424511166 }, %struct.mm128_t { i64 1730, i64 64424511170 }, %struct.mm128_t { i64 1739, i64 64424511179 }, %struct.mm128_t { i64 1740, i64 64424511180 }, %struct.mm128_t { i64 1746, i64 64424511186 }, %struct.mm128_t { i64 1751, i64 64424511191 }, %struct.mm128_t { i64 1761, i64 64424511201 }, %struct.mm128_t { i64 1768, i64 64424511208 }, %struct.mm128_t { i64 1770, i64 64424511210 }, %struct.mm128_t { i64 1780, i64 64424511220 }, %struct.mm128_t { i64 1781, i64 64424511221 }, %struct.mm128_t { i64 1788, i64 64424511228 }, %struct.mm128_t { i64 1796, i64 64424511236 }, %struct.mm128_t { i64 1797, i64 64424511237 }, %struct.mm128_t { i64 1807, i64 64424511247 }, %struct.mm128_t { i64 1809, i64 64424511249 }, %struct.mm128_t { i64 1816, i64 64424511256 }, %struct.mm128_t { i64 1817, i64 64424511257 }, %struct.mm128_t { i64 1823, i64 64424511263 }, %struct.mm128_t { i64 1829, i64 64424511269 }, %struct.mm128_t { i64 1832, i64 64424511272 }, %struct.mm128_t { i64 1839, i64 64424511279 }, %struct.mm128_t { i64 1843, i64 64424511283 }, %struct.mm128_t { i64 1850, i64 64424511290 }, %struct.mm128_t { i64 1857, i64 64424511297 }, %struct.mm128_t { i64 1867, i64 64424511307 }, %struct.mm128_t { i64 1868, i64 64424511308 }, %struct.mm128_t { i64 1869, i64 64424511309 }, %struct.mm128_t { i64 1877, i64 64424511317 }, %struct.mm128_t { i64 1880, i64 64424511320 }, %struct.mm128_t { i64 1883, i64 64424511323 }, %struct.mm128_t { i64 1891, i64 64424511331 }, %struct.mm128_t { i64 1893, i64 64424511333 }, %struct.mm128_t { i64 1903, i64 64424511343 }, %struct.mm128_t { i64 1907, i64 64424511347 }, %struct.mm128_t { i64 1908, i64 64424511348 }, %struct.mm128_t { i64 1910, i64 64424511350 }, %struct.mm128_t { i64 1916, i64 64424511356 }, %struct.mm128_t { i64 1921, i64 64424511361 }, %struct.mm128_t { i64 1931, i64 64424511371 }, %struct.mm128_t { i64 1938, i64 64424511378 }, %struct.mm128_t { i64 1946, i64 64424511386 }, %struct.mm128_t { i64 1950, i64 64424511390 }, %struct.mm128_t { i64 1956, i64 64424511396 }, %struct.mm128_t { i64 1964, i64 64424511404 }, %struct.mm128_t { i64 1972, i64 64424511412 }, %struct.mm128_t { i64 1973, i64 64424511413 }, %struct.mm128_t { i64 1982, i64 64424511422 }, %struct.mm128_t { i64 1989, i64 64424511429 }, %struct.mm128_t { i64 1990, i64 64424511430 }, %struct.mm128_t { i64 1998, i64 64424511438 }, %struct.mm128_t { i64 2000, i64 64424511440 }, %struct.mm128_t { i64 2007, i64 64424511447 }, %struct.mm128_t { i64 2013, i64 64424511453 }, %struct.mm128_t { i64 2019, i64 64424511459 }, %struct.mm128_t { i64 2020, i64 64424511460 }, %struct.mm128_t { i64 2029, i64 64424511469 }, %struct.mm128_t { i64 2031, i64 64424511471 }, %struct.mm128_t { i64 2032, i64 64424511472 }, %struct.mm128_t { i64 2033, i64 64424511473 }, %struct.mm128_t { i64 2037, i64 64424511477 }, %struct.mm128_t { i64 2045, i64 64424511485 }, %struct.mm128_t { i64 2052, i64 64424511492 }, %struct.mm128_t { i64 2059, i64 64424511499 }, %struct.mm128_t { i64 2063, i64 64424511503 }, %struct.mm128_t { i64 2069, i64 64424511509 }, %struct.mm128_t { i64 2070, i64 64424511510 }, %struct.mm128_t { i64 2080, i64 64424511520 }, %struct.mm128_t { i64 2084, i64 64424511524 }, %struct.mm128_t { i64 2089, i64 64424511529 }, %struct.mm128_t { i64 2090, i64 64424511530 }, %struct.mm128_t { i64 2092, i64 64424511532 }, %struct.mm128_t { i64 2093, i64 64424511533 }, %struct.mm128_t { i64 2102, i64 64424511542 }, %struct.mm128_t { i64 2108, i64 64424511548 }, %struct.mm128_t { i64 2116, i64 64424511556 }, %struct.mm128_t { i64 2122, i64 64424511562 }, %struct.mm128_t { i64 2131, i64 64424511571 }, %struct.mm128_t { i64 2138, i64 64424511578 }, %struct.mm128_t { i64 2140, i64 64424511580 }, %struct.mm128_t { i64 2150, i64 64424511590 }, %struct.mm128_t { i64 2159, i64 64424511599 }, %struct.mm128_t { i64 2160, i64 64424511600 }, %struct.mm128_t { i64 2170, i64 64424511610 }, %struct.mm128_t { i64 2171, i64 64424511611 }, %struct.mm128_t { i64 2178, i64 64424511618 }, %struct.mm128_t { i64 2186, i64 64424511626 }, %struct.mm128_t { i64 2194, i64 64424511634 }, %struct.mm128_t { i64 2203, i64 64424511643 }, %struct.mm128_t { i64 2206, i64 64424511646 }, %struct.mm128_t { i64 2209, i64 64424511649 }, %struct.mm128_t { i64 2217, i64 64424511657 }, %struct.mm128_t { i64 2224, i64 64424511664 }, %struct.mm128_t { i64 2229, i64 64424511669 }, %struct.mm128_t { i64 2233, i64 64424511673 }, %struct.mm128_t { i64 2236, i64 64424511676 }, %struct.mm128_t { i64 2244, i64 64424511684 }, %struct.mm128_t { i64 2247, i64 64424511687 }, %struct.mm128_t { i64 2248, i64 64424511688 }, %struct.mm128_t { i64 2252, i64 64424511692 }, %struct.mm128_t { i64 2259, i64 64424511699 }, %struct.mm128_t { i64 2260, i64 64424511700 }, %struct.mm128_t { i64 2261, i64 64424511701 }, %struct.mm128_t { i64 2264, i64 64424511704 }, %struct.mm128_t { i64 2272, i64 64424511712 }, %struct.mm128_t { i64 2273, i64 64424511713 }, %struct.mm128_t { i64 2279, i64 64424511719 }, %struct.mm128_t { i64 2284, i64 64424511724 }, %struct.mm128_t { i64 2290, i64 64424511730 }, %struct.mm128_t { i64 2300, i64 64424511740 }, %struct.mm128_t { i64 2305, i64 64424511745 }, %struct.mm128_t { i64 2313, i64 64424511753 }, %struct.mm128_t { i64 2316, i64 64424511756 }, %struct.mm128_t { i64 2322, i64 64424511762 }, %struct.mm128_t { i64 2324, i64 64424511764 }, %struct.mm128_t { i64 2334, i64 64424511774 }, %struct.mm128_t { i64 2339, i64 64424511779 }, %struct.mm128_t { i64 2346, i64 64424511786 }, %struct.mm128_t { i64 2350, i64 64424511790 }, %struct.mm128_t { i64 2351, i64 64424511791 }, %struct.mm128_t { i64 2359, i64 64424511799 }, %struct.mm128_t { i64 2361, i64 64424511801 }, %struct.mm128_t { i64 2363, i64 64424511803 }, %struct.mm128_t { i64 2365, i64 64424511805 }, %struct.mm128_t { i64 2374, i64 64424511814 }, %struct.mm128_t { i64 2381, i64 64424511821 }, %struct.mm128_t { i64 2385, i64 64424511825 }, %struct.mm128_t { i64 2391, i64 64425729659 }, %struct.mm128_t { i64 2391, i64 64424511831 }, %struct.mm128_t { i64 2392, i64 64424511832 }, %struct.mm128_t { i64 2402, i64 64424511842 }, %struct.mm128_t { i64 2404, i64 64424511844 }, %struct.mm128_t { i64 2414, i64 64424511854 }, %struct.mm128_t { i64 2418, i64 64424511858 }, %struct.mm128_t { i64 2426, i64 64424511866 }, %struct.mm128_t { i64 2433, i64 64424511873 }, %struct.mm128_t { i64 2434, i64 64424511874 }, %struct.mm128_t { i64 2438, i64 64424511878 }, %struct.mm128_t { i64 2448, i64 64424511888 }, %struct.mm128_t { i64 2451, i64 64424511891 }, %struct.mm128_t { i64 2452, i64 64424511892 }, %struct.mm128_t { i64 2454, i64 64424511894 }, %struct.mm128_t { i64 2455, i64 64424511895 }, %struct.mm128_t { i64 2460, i64 64424511900 }, %struct.mm128_t { i64 2467, i64 64424511907 }, %struct.mm128_t { i64 2471, i64 64424511911 }, %struct.mm128_t { i64 2472, i64 64424511912 }, %struct.mm128_t { i64 2475, i64 64424511915 }, %struct.mm128_t { i64 2479, i64 64424511919 }, %struct.mm128_t { i64 2486, i64 64424511926 }, %struct.mm128_t { i64 2492, i64 64424511932 }, %struct.mm128_t { i64 2499, i64 64424511939 }, %struct.mm128_t { i64 2505, i64 64424511945 }, %struct.mm128_t { i64 2511, i64 64424511951 }, %struct.mm128_t { i64 2515, i64 64424511955 }, %struct.mm128_t { i64 2523, i64 64424511963 }, %struct.mm128_t { i64 2531, i64 64424511971 }, %struct.mm128_t { i64 2536, i64 64424511976 }, %struct.mm128_t { i64 2540, i64 64424511980 }, %struct.mm128_t { i64 2549, i64 64424511989 }, %struct.mm128_t { i64 2550, i64 64424511990 }, %struct.mm128_t { i64 2555, i64 64424511995 }, %struct.mm128_t { i64 2558, i64 64424511998 }, %struct.mm128_t { i64 2567, i64 64424512007 }, %struct.mm128_t { i64 2570, i64 64424512010 }, %struct.mm128_t { i64 2580, i64 64424512020 }, %struct.mm128_t { i64 2583, i64 64424512023 }, %struct.mm128_t { i64 2584, i64 64424512024 }, %struct.mm128_t { i64 2585, i64 64424512025 }, %struct.mm128_t { i64 2593, i64 64424512033 }, %struct.mm128_t { i64 2598, i64 64424512038 }, %struct.mm128_t { i64 2604, i64 64424512044 }, %struct.mm128_t { i64 2613, i64 64424512053 }, %struct.mm128_t { i64 2618, i64 64424512058 }, %struct.mm128_t { i64 2619, i64 64424512059 }, %struct.mm128_t { i64 2623, i64 64424512063 }, %struct.mm128_t { i64 2630, i64 64424512070 }, %struct.mm128_t { i64 2633, i64 64424512073 }, %struct.mm128_t { i64 2642, i64 64424512082 }, %struct.mm128_t { i64 2647, i64 64424512087 }, %struct.mm128_t { i64 2652, i64 64424512092 }, %struct.mm128_t { i64 2656, i64 64424512096 }, %struct.mm128_t { i64 2663, i64 64424512103 }, %struct.mm128_t { i64 2664, i64 64424512104 }, %struct.mm128_t { i64 2665, i64 64424512105 }, %struct.mm128_t { i64 2669, i64 64424512109 }, %struct.mm128_t { i64 2672, i64 64424512112 }, %struct.mm128_t { i64 2673, i64 64424512113 }, %struct.mm128_t { i64 2677, i64 64424512117 }, %struct.mm128_t { i64 2686, i64 64424512126 }, %struct.mm128_t { i64 2687, i64 64424512127 }, %struct.mm128_t { i64 2697, i64 64424512137 }, %struct.mm128_t { i64 2701, i64 64424512141 }, %struct.mm128_t { i64 2708, i64 64424512148 }, %struct.mm128_t { i64 2712, i64 64424512152 }, %struct.mm128_t { i64 2715, i64 64424512155 }, %struct.mm128_t { i64 2723, i64 64424512163 }, %struct.mm128_t { i64 2725, i64 64424512165 }, %struct.mm128_t { i64 2727, i64 64424512167 }, %struct.mm128_t { i64 2732, i64 64424512172 }, %struct.mm128_t { i64 2735, i64 64424512175 }, %struct.mm128_t { i64 2743, i64 64424512183 }, %struct.mm128_t { i64 2746, i64 64424512186 }, %struct.mm128_t { i64 2751, i64 64424512191 }, %struct.mm128_t { i64 2760, i64 64424512200 }, %struct.mm128_t { i64 2761, i64 64424512201 }, %struct.mm128_t { i64 2771, i64 64424512211 }, %struct.mm128_t { i64 2777, i64 64424512217 }, %struct.mm128_t { i64 2782, i64 64424512222 }, %struct.mm128_t { i64 2788, i64 64424512228 }, %struct.mm128_t { i64 2791, i64 64424512231 }, %struct.mm128_t { i64 2796, i64 64424512236 }, %struct.mm128_t { i64 2804, i64 64424512244 }, %struct.mm128_t { i64 2807, i64 64424512247 }, %struct.mm128_t { i64 2815, i64 64424512255 }, %struct.mm128_t { i64 2825, i64 64424512265 }, %struct.mm128_t { i64 2833, i64 64424512273 }, %struct.mm128_t { i64 2843, i64 64424512283 }, %struct.mm128_t { i64 2847, i64 64424512287 }, %struct.mm128_t { i64 2854, i64 64424512294 }, %struct.mm128_t { i64 2860, i64 64424512300 }, %struct.mm128_t { i64 2868, i64 64424512308 }, %struct.mm128_t { i64 2870, i64 64424512310 }, %struct.mm128_t { i64 2874, i64 64424512314 }, %struct.mm128_t { i64 2883, i64 64424512323 }, %struct.mm128_t { i64 2890, i64 64424512330 }, %struct.mm128_t { i64 2894, i64 64424512334 }, %struct.mm128_t { i64 2902, i64 64424512342 }, %struct.mm128_t { i64 2905, i64 64424512345 }, %struct.mm128_t { i64 2912, i64 64424512352 }, %struct.mm128_t { i64 2919, i64 64424512359 }, %struct.mm128_t { i64 2923, i64 64424512363 }, %struct.mm128_t { i64 2926, i64 64424512366 }, %struct.mm128_t { i64 2929, i64 64424512369 }, %struct.mm128_t { i64 2930, i64 64424512370 }, %struct.mm128_t { i64 2936, i64 64424512376 }, %struct.mm128_t { i64 2941, i64 64424512381 }, %struct.mm128_t { i64 2947, i64 64424512387 }, %struct.mm128_t { i64 2951, i64 64424512391 }, %struct.mm128_t { i64 2952, i64 64424512392 }, %struct.mm128_t { i64 2957, i64 64424512397 }, %struct.mm128_t { i64 2966, i64 64424512406 }, %struct.mm128_t { i64 2973, i64 64424512413 }, %struct.mm128_t { i64 2977, i64 64424512417 }, %struct.mm128_t { i64 2978, i64 64424512418 }, %struct.mm128_t { i64 2980, i64 64424512420 }, %struct.mm128_t { i64 2986, i64 64424512426 }, %struct.mm128_t { i64 2993, i64 64424512433 }, %struct.mm128_t { i64 3000, i64 64424512440 }, %struct.mm128_t { i64 3008, i64 64424512448 }, %struct.mm128_t { i64 3011, i64 64424512451 }, %struct.mm128_t { i64 3021, i64 64424512461 }, %struct.mm128_t { i64 3030, i64 64424512470 }, %struct.mm128_t { i64 3034, i64 64424512474 }, %struct.mm128_t { i64 3042, i64 64424512482 }, %struct.mm128_t { i64 3045, i64 64424512485 }, %struct.mm128_t { i64 3053, i64 64424512493 }, %struct.mm128_t { i64 3059, i64 64424512499 }, %struct.mm128_t { i64 3060, i64 64424512500 }, %struct.mm128_t { i64 3065, i64 64424512505 }, %struct.mm128_t { i64 3073, i64 64424512513 }, %struct.mm128_t { i64 3082, i64 64424512522 }, %struct.mm128_t { i64 3090, i64 64424512530 }, %struct.mm128_t { i64 3098, i64 64424512538 }, %struct.mm128_t { i64 3106, i64 64424512546 }, %struct.mm128_t { i64 3115, i64 64424512555 }, %struct.mm128_t { i64 3119, i64 64424512559 }, %struct.mm128_t { i64 3128, i64 64424512568 }, %struct.mm128_t { i64 3129, i64 64424512569 }, %struct.mm128_t { i64 3132, i64 64424512572 }, %struct.mm128_t { i64 3136, i64 64424512576 }, %struct.mm128_t { i64 3144, i64 64424512584 }, %struct.mm128_t { i64 3146, i64 64424512586 }, %struct.mm128_t { i64 3153, i64 64424512593 }, %struct.mm128_t { i64 3163, i64 64424512603 }, %struct.mm128_t { i64 3164, i64 64424512604 }, %struct.mm128_t { i64 3165, i64 64424512605 }, %struct.mm128_t { i64 3169, i64 64424512609 }, %struct.mm128_t { i64 3176, i64 64424512616 }, %struct.mm128_t { i64 3178, i64 64424512618 }, %struct.mm128_t { i64 3179, i64 64424512619 }, %struct.mm128_t { i64 3189, i64 64424512629 }, %struct.mm128_t { i64 3199, i64 64424512639 }, %struct.mm128_t { i64 3200, i64 64424512640 }, %struct.mm128_t { i64 3201, i64 64424512641 }, %struct.mm128_t { i64 3207, i64 64424512647 }, %struct.mm128_t { i64 3210, i64 64424512650 }, %struct.mm128_t { i64 3218, i64 64424512658 }, %struct.mm128_t { i64 3224, i64 64424512664 }, %struct.mm128_t { i64 3225, i64 64424512665 }, %struct.mm128_t { i64 3234, i64 64424512674 }, %struct.mm128_t { i64 3241, i64 64424512681 }, %struct.mm128_t { i64 3244, i64 64424512684 }, %struct.mm128_t { i64 3246, i64 64424512686 }, %struct.mm128_t { i64 3249, i64 64424512689 }, %struct.mm128_t { i64 3253, i64 64424512693 }, %struct.mm128_t { i64 3260, i64 64424512700 }, %struct.mm128_t { i64 3262, i64 64424512702 }, %struct.mm128_t { i64 3265, i64 64424512705 }, %struct.mm128_t { i64 3274, i64 64424512714 }, %struct.mm128_t { i64 3278, i64 64424512718 }, %struct.mm128_t { i64 3279, i64 64424512719 }, %struct.mm128_t { i64 3280, i64 64424512720 }, %struct.mm128_t { i64 3288, i64 64424512728 }, %struct.mm128_t { i64 3296, i64 64424512736 }, %struct.mm128_t { i64 3299, i64 64424512739 }, %struct.mm128_t { i64 3307, i64 64424512747 }, %struct.mm128_t { i64 3315, i64 64424512755 }, %struct.mm128_t { i64 3321, i64 64424512761 }, %struct.mm128_t { i64 3329, i64 64424512769 }, %struct.mm128_t { i64 3333, i64 64424512773 }, %struct.mm128_t { i64 3341, i64 64424512781 }, %struct.mm128_t { i64 3348, i64 64424512788 }, %struct.mm128_t { i64 3349, i64 64424512789 }, %struct.mm128_t { i64 3350, i64 64424512790 }, %struct.mm128_t { i64 3351, i64 64424512791 }, %struct.mm128_t { i64 3354, i64 64424512794 }, %struct.mm128_t { i64 3363, i64 64424512803 }, %struct.mm128_t { i64 3371, i64 64424512811 }, %struct.mm128_t { i64 3375, i64 64424512815 }, %struct.mm128_t { i64 3384, i64 64424512824 }, %struct.mm128_t { i64 3386, i64 64424512826 }, %struct.mm128_t { i64 3390, i64 64424512830 }, %struct.mm128_t { i64 3397, i64 64424512837 }, %struct.mm128_t { i64 3400, i64 64424512840 }, %struct.mm128_t { i64 3401, i64 64424512841 }, %struct.mm128_t { i64 3410, i64 64424512850 }, %struct.mm128_t { i64 3417, i64 64424512857 }, %struct.mm128_t { i64 3422, i64 64424512862 }, %struct.mm128_t { i64 3426, i64 64424512866 }, %struct.mm128_t { i64 3430, i64 64424512870 }, %struct.mm128_t { i64 3437, i64 64424512877 }, %struct.mm128_t { i64 3443, i64 64424512883 }, %struct.mm128_t { i64 3444, i64 64424512884 }, %struct.mm128_t { i64 3454, i64 64424512894 }, %struct.mm128_t { i64 3460, i64 64424512900 }, %struct.mm128_t { i64 3462, i64 64424512902 }, %struct.mm128_t { i64 3468, i64 64424512908 }, %struct.mm128_t { i64 3475, i64 64424512915 }, %struct.mm128_t { i64 3479, i64 64424512919 }, %struct.mm128_t { i64 3480, i64 64424512920 }, %struct.mm128_t { i64 3485, i64 64424512925 }, %struct.mm128_t { i64 3491, i64 64424512931 }, %struct.mm128_t { i64 3492, i64 64424512932 }, %struct.mm128_t { i64 3493, i64 64424512933 }, %struct.mm128_t { i64 3497, i64 64424512937 }, %struct.mm128_t { i64 3505, i64 64424512945 }, %struct.mm128_t { i64 3506, i64 64424512946 }, %struct.mm128_t { i64 3507, i64 64424512947 }, %struct.mm128_t { i64 3517, i64 64424512957 }, %struct.mm128_t { i64 3521, i64 64424512961 }, %struct.mm128_t { i64 3526, i64 64424512966 }, %struct.mm128_t { i64 3533, i64 64424512973 }, %struct.mm128_t { i64 3543, i64 64424512983 }, %struct.mm128_t { i64 3547, i64 64424512987 }, %struct.mm128_t { i64 3554, i64 64424512994 }, %struct.mm128_t { i64 3559, i64 64424512999 }, %struct.mm128_t { i64 3563, i64 64424513003 }, %struct.mm128_t { i64 3572, i64 64424513012 }, %struct.mm128_t { i64 3574, i64 64424513014 }, %struct.mm128_t { i64 3579, i64 64424513019 }, %struct.mm128_t { i64 3587, i64 64424513027 }, %struct.mm128_t { i64 3591, i64 64424513031 }, %struct.mm128_t { i64 3600, i64 64424513040 }, %struct.mm128_t { i64 3601, i64 64424513041 }, %struct.mm128_t { i64 3605, i64 64424513045 }, %struct.mm128_t { i64 3613, i64 64424513053 }, %struct.mm128_t { i64 3617, i64 64424513057 }, %struct.mm128_t { i64 3623, i64 64424513063 }, %struct.mm128_t { i64 3632, i64 64424513072 }, %struct.mm128_t { i64 3636, i64 64424513076 }, %struct.mm128_t { i64 3644, i64 64424513084 }, %struct.mm128_t { i64 3646, i64 64424513086 }, %struct.mm128_t { i64 3651, i64 64424513091 }, %struct.mm128_t { i64 3660, i64 64424513100 }, %struct.mm128_t { i64 3664, i64 64424513104 }, %struct.mm128_t { i64 3671, i64 64424513111 }, %struct.mm128_t { i64 3677, i64 64424513117 }, %struct.mm128_t { i64 3679, i64 64424513119 }, %struct.mm128_t { i64 3680, i64 64424513120 }, %struct.mm128_t { i64 3685, i64 64424513125 }, %struct.mm128_t { i64 3691, i64 64424513131 }, %struct.mm128_t { i64 3692, i64 64424513132 }, %struct.mm128_t { i64 3693, i64 64424513133 }, %struct.mm128_t { i64 3694, i64 64424513134 }, %struct.mm128_t { i64 3702, i64 64424513142 }, %struct.mm128_t { i64 3710, i64 64424513150 }, %struct.mm128_t { i64 3716, i64 64424513156 }, %struct.mm128_t { i64 3722, i64 64424513162 }, %struct.mm128_t { i64 3723, i64 64424513163 }, %struct.mm128_t { i64 3725, i64 64424513165 }, %struct.mm128_t { i64 3726, i64 64424513166 }, %struct.mm128_t { i64 3734, i64 64424513174 }, %struct.mm128_t { i64 3737, i64 64424513177 }, %struct.mm128_t { i64 3746, i64 64424513186 }, %struct.mm128_t { i64 3749, i64 64424513189 }, %struct.mm128_t { i64 3752, i64 64424513192 }, %struct.mm128_t { i64 3758, i64 64424513198 }, %struct.mm128_t { i64 3760, i64 64424513200 }, %struct.mm128_t { i64 3768, i64 64424513208 }, %struct.mm128_t { i64 3769, i64 64424513209 }, %struct.mm128_t { i64 3776, i64 64424513216 }, %struct.mm128_t { i64 3782, i64 64424513222 }, %struct.mm128_t { i64 3783, i64 64424513223 }, %struct.mm128_t { i64 3784, i64 64424513224 }, %struct.mm128_t { i64 3785, i64 64424513225 }, %struct.mm128_t { i64 3786, i64 64424513226 }, %struct.mm128_t { i64 3791, i64 64424513231 }, %struct.mm128_t { i64 3797, i64 64424513237 }, %struct.mm128_t { i64 3807, i64 64424513247 }, %struct.mm128_t { i64 3809, i64 64424513249 }, %struct.mm128_t { i64 3818, i64 64424513258 }, %struct.mm128_t { i64 3825, i64 64424513265 }, %struct.mm128_t { i64 3829, i64 64424513269 }, %struct.mm128_t { i64 3833, i64 64424513273 }, %struct.mm128_t { i64 3842, i64 64424513282 }, %struct.mm128_t { i64 3844, i64 64424513284 }, %struct.mm128_t { i64 3851, i64 64424513291 }, %struct.mm128_t { i64 3857, i64 64424513297 }, %struct.mm128_t { i64 3864, i64 64424513304 }, %struct.mm128_t { i64 3872, i64 64424513312 }, %struct.mm128_t { i64 3881, i64 64424513321 }, %struct.mm128_t { i64 3886, i64 64424513326 }, %struct.mm128_t { i64 3888, i64 64424513328 }, %struct.mm128_t { i64 3891, i64 64424513331 }, %struct.mm128_t { i64 3900, i64 64424513340 }, %struct.mm128_t { i64 3908, i64 64424513348 }, %struct.mm128_t { i64 3916, i64 64424513356 }, %struct.mm128_t { i64 3920, i64 64424513360 }, %struct.mm128_t { i64 3929, i64 64424513369 }, %struct.mm128_t { i64 3935, i64 64424513375 }, %struct.mm128_t { i64 3940, i64 64424513380 }, %struct.mm128_t { i64 3944, i64 64424513384 }, %struct.mm128_t { i64 3953, i64 64424513393 }, %struct.mm128_t { i64 3953, i64 64425504355 }, %struct.mm128_t { i64 3957, i64 64424513397 }, %struct.mm128_t { i64 3958, i64 64424513398 }, %struct.mm128_t { i64 3961, i64 64424513401 }, %struct.mm128_t { i64 3966, i64 64424513406 }, %struct.mm128_t { i64 3967, i64 64424513407 }, %struct.mm128_t { i64 3971, i64 64424513411 }, %struct.mm128_t { i64 3980, i64 64424513420 }, %struct.mm128_t { i64 3987, i64 64424513427 }, %struct.mm128_t { i64 3997, i64 64424513437 }, %struct.mm128_t { i64 3999, i64 64424513439 }, %struct.mm128_t { i64 4000, i64 64424513440 }, %struct.mm128_t { i64 4001, i64 64424513441 }, %struct.mm128_t { i64 4002, i64 64424513442 }, %struct.mm128_t { i64 4006, i64 64424513446 }, %struct.mm128_t { i64 4014, i64 64424513454 }, %struct.mm128_t { i64 4017, i64 64424513457 }, %struct.mm128_t { i64 4023, i64 64424513463 }, %struct.mm128_t { i64 4033, i64 64424513473 }, %struct.mm128_t { i64 4038, i64 64424513478 }, %struct.mm128_t { i64 4045, i64 64424513485 }, %struct.mm128_t { i64 4055, i64 64424513495 }, %struct.mm128_t { i64 4065, i64 64424513505 }, %struct.mm128_t { i64 4071, i64 64424513511 }, %struct.mm128_t { i64 4080, i64 64424513520 }, %struct.mm128_t { i64 4088, i64 64424513528 }, %struct.mm128_t { i64 4096, i64 64424513536 }, %struct.mm128_t { i64 4104, i64 64424513544 }, %struct.mm128_t { i64 4113, i64 64424513553 }, %struct.mm128_t { i64 4119, i64 64424513559 }, %struct.mm128_t { i64 4124, i64 64424513564 }, %struct.mm128_t { i64 4129, i64 64424513569 }, %struct.mm128_t { i64 4139, i64 64424513579 }, %struct.mm128_t { i64 4144, i64 64424513584 }, %struct.mm128_t { i64 4153, i64 64424513593 }, %struct.mm128_t { i64 4154, i64 64424513594 }, %struct.mm128_t { i64 4164, i64 64424513604 }, %struct.mm128_t { i64 4167, i64 64424513607 }, %struct.mm128_t { i64 4169, i64 64424513609 }, %struct.mm128_t { i64 4172, i64 64424513612 }, %struct.mm128_t { i64 4180, i64 64424513620 }, %struct.mm128_t { i64 4186, i64 64424513626 }, %struct.mm128_t { i64 4196, i64 64425620957 }, %struct.mm128_t { i64 4196, i64 64424513636 }, %struct.mm128_t { i64 4203, i64 64424513643 }, %struct.mm128_t { i64 4213, i64 64424513653 }, %struct.mm128_t { i64 4222, i64 64424513662 }, %struct.mm128_t { i64 4229, i64 64424513669 }, %struct.mm128_t { i64 4238, i64 64424513678 }, %struct.mm128_t { i64 4244, i64 64424513684 }, %struct.mm128_t { i64 4246, i64 64424513686 }, %struct.mm128_t { i64 4255, i64 64424513695 }, %struct.mm128_t { i64 4258, i64 64424513698 }, %struct.mm128_t { i64 4261, i64 64424513701 }, %struct.mm128_t { i64 4266, i64 64425309414 }, %struct.mm128_t { i64 4266, i64 64424513706 }, %struct.mm128_t { i64 4275, i64 64425295440 }, %struct.mm128_t { i64 4275, i64 64424513715 }, %struct.mm128_t { i64 4281, i64 64424513721 }, %struct.mm128_t { i64 4281, i64 64424783855 }, %struct.mm128_t { i64 4285, i64 64424513725 }, %struct.mm128_t { i64 4292, i64 64424513732 }, %struct.mm128_t { i64 4300, i64 64424513740 }, %struct.mm128_t { i64 4306, i64 64424513746 }, %struct.mm128_t { i64 4316, i64 64424513756 }, %struct.mm128_t { i64 4317, i64 64424513757 }, %struct.mm128_t { i64 4319, i64 64424513759 }, %struct.mm128_t { i64 4326, i64 64424513766 }, %struct.mm128_t { i64 4334, i64 64424513774 }, %struct.mm128_t { i64 4336, i64 64424513776 }, %struct.mm128_t { i64 4346, i64 64424513786 }, %struct.mm128_t { i64 4347, i64 64424513787 }, %struct.mm128_t { i64 4350, i64 64424513790 }, %struct.mm128_t { i64 4353, i64 64424513793 }, %struct.mm128_t { i64 4363, i64 64424513803 }, %struct.mm128_t { i64 4367, i64 64424513807 }, %struct.mm128_t { i64 4369, i64 64424513809 }, %struct.mm128_t { i64 4374, i64 64424513814 }, %struct.mm128_t { i64 4380, i64 64424513820 }, %struct.mm128_t { i64 4381, i64 64424513821 }, %struct.mm128_t { i64 4389, i64 64424513829 }, %struct.mm128_t { i64 4392, i64 64424513832 }, %struct.mm128_t { i64 4395, i64 64424513835 }, %struct.mm128_t { i64 4404, i64 64424513844 }, %struct.mm128_t { i64 4408, i64 64424513848 }, %struct.mm128_t { i64 4411, i64 64424513851 }, %struct.mm128_t { i64 4417, i64 64424513857 }, %struct.mm128_t { i64 4417, i64 64425139643 }, %struct.mm128_t { i64 4420, i64 64424513860 }, %struct.mm128_t { i64 4424, i64 64424513864 }, %struct.mm128_t { i64 4431, i64 64424513871 }, %struct.mm128_t { i64 4437, i64 64424513877 }, %struct.mm128_t { i64 4443, i64 64424513883 }, %struct.mm128_t { i64 4449, i64 64424513889 }, %struct.mm128_t { i64 4455, i64 64424513895 }, %struct.mm128_t { i64 4458, i64 64424513898 }, %struct.mm128_t { i64 4467, i64 64424513907 }, %struct.mm128_t { i64 4472, i64 64424513912 }, %struct.mm128_t { i64 4480, i64 64424513920 }, %struct.mm128_t { i64 4483, i64 64424513923 }, %struct.mm128_t { i64 4493, i64 64424513933 }, %struct.mm128_t { i64 4495, i64 64424513935 }, %struct.mm128_t { i64 4505, i64 64424513945 }, %struct.mm128_t { i64 4511, i64 64424513951 }, %struct.mm128_t { i64 4516, i64 64424513956 }, %struct.mm128_t { i64 4525, i64 64424513965 }, %struct.mm128_t { i64 4526, i64 64424513966 }, %struct.mm128_t { i64 4536, i64 64424513976 }, %struct.mm128_t { i64 4546, i64 64424513986 }, %struct.mm128_t { i64 4556, i64 64424513996 }, %struct.mm128_t { i64 4557, i64 64424513997 }, %struct.mm128_t { i64 4562, i64 64424514002 }, %struct.mm128_t { i64 4566, i64 64424514006 }, %struct.mm128_t { i64 4570, i64 64424514010 }, %struct.mm128_t { i64 4578, i64 64424514018 }, %struct.mm128_t { i64 4580, i64 64424514020 }, %struct.mm128_t { i64 4590, i64 64424514030 }, %struct.mm128_t { i64 4593, i64 64424514033 }, %struct.mm128_t { i64 4603, i64 64424514043 }, %struct.mm128_t { i64 4609, i64 64424514049 }, %struct.mm128_t { i64 4614, i64 64424514054 }, %struct.mm128_t { i64 4621, i64 64424514061 }, %struct.mm128_t { i64 4628, i64 64424514068 }, %struct.mm128_t { i64 4635, i64 64424514075 }, %struct.mm128_t { i64 4644, i64 64424514084 }, %struct.mm128_t { i64 4653, i64 64424514093 }, %struct.mm128_t { i64 4656, i64 64424514096 }, %struct.mm128_t { i64 4658, i64 64424514098 }, %struct.mm128_t { i64 4664, i64 64424514104 }, %struct.mm128_t { i64 4669, i64 64424514109 }, %struct.mm128_t { i64 4675, i64 64424514115 }, %struct.mm128_t { i64 4683, i64 64424514123 }, %struct.mm128_t { i64 4685, i64 64424514125 }, %struct.mm128_t { i64 4693, i64 64424514133 }, %struct.mm128_t { i64 4703, i64 64424514143 }, %struct.mm128_t { i64 4708, i64 64424514148 }, %struct.mm128_t { i64 4716, i64 64424514156 }, %struct.mm128_t { i64 4725, i64 64424514165 }, %struct.mm128_t { i64 4729, i64 64424514169 }, %struct.mm128_t { i64 4730, i64 64424514170 }, %struct.mm128_t { i64 4735, i64 64424514175 }, %struct.mm128_t { i64 4741, i64 64424514181 }, %struct.mm128_t { i64 4742, i64 64424514182 }, %struct.mm128_t { i64 4752, i64 64424514192 }, %struct.mm128_t { i64 4753, i64 64424514193 }, %struct.mm128_t { i64 4763, i64 64424514203 }, %struct.mm128_t { i64 4772, i64 64424514212 }, %struct.mm128_t { i64 4779, i64 64424514219 }, %struct.mm128_t { i64 4789, i64 64424514229 }, %struct.mm128_t { i64 4790, i64 64424514230 }, %struct.mm128_t { i64 4798, i64 64424514238 }, %struct.mm128_t { i64 4805, i64 64424514245 }, %struct.mm128_t { i64 4814, i64 64424514254 }, %struct.mm128_t { i64 4816, i64 64424514256 }, %struct.mm128_t { i64 4826, i64 64424514266 }, %struct.mm128_t { i64 4828, i64 64424514268 }, %struct.mm128_t { i64 4834, i64 64424514274 }, %struct.mm128_t { i64 4839, i64 64424514279 }, %struct.mm128_t { i64 4845, i64 64424514285 }, %struct.mm128_t { i64 4850, i64 64424514290 }, %struct.mm128_t { i64 4855, i64 64424514295 }, %struct.mm128_t { i64 4858, i64 64424514298 }, %struct.mm128_t { i64 4865, i64 64424514305 }, %struct.mm128_t { i64 4870, i64 64424514310 }, %struct.mm128_t { i64 4871, i64 64424514311 }, %struct.mm128_t { i64 4878, i64 64424514318 }, %struct.mm128_t { i64 4886, i64 64424514326 }, %struct.mm128_t { i64 4890, i64 64424514330 }], align 8
@.str.24 = private unnamed_addr constant [46 x i8] c"cycles: %lu | regsw hits:%d regsw misses:%d \0A\00", align 1
@str = private unnamed_addr constant [15 x i8] c"chaining done\0A\00", align 1

; Function Attrs: nofree norecurse nosync nounwind memory(readwrite, inaccessiblemem: none)
define dso_local void @rs_insertsort_128x(ptr noundef %0, ptr noundef readnone %1) local_unnamed_addr #0 {
  %3 = getelementptr inbounds i8, ptr %0, i64 16
  %4 = icmp ult ptr %3, %1
  br i1 %4, label %5, label %28

5:                                                ; preds = %2, %25
  %6 = phi ptr [ %26, %25 ], [ %3, %2 ]
  %7 = phi ptr [ %6, %25 ], [ %0, %2 ]
  %8 = load i64, ptr %6, align 8, !tbaa !6
  %9 = load i64, ptr %7, align 8, !tbaa !10
  %10 = icmp ult i64 %8, %9
  br i1 %10, label %11, label %25

11:                                               ; preds = %5
  %12 = getelementptr inbounds i8, ptr %7, i64 24
  %13 = load i64, ptr %12, align 8, !tbaa !6
  %14 = icmp ugt ptr %6, %0
  br i1 %14, label %15, label %22

15:                                               ; preds = %11, %20
  %16 = phi ptr [ %17, %20 ], [ %6, %11 ]
  %17 = getelementptr inbounds i8, ptr %16, i64 -16
  %18 = load i64, ptr %17, align 8, !tbaa !10
  %19 = icmp ult i64 %8, %18
  br i1 %19, label %20, label %22

20:                                               ; preds = %15
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %16, ptr noundef nonnull align 8 dereferenceable(16) %17, i64 16, i1 false), !tbaa.struct !12
  %21 = icmp ugt ptr %17, %0
  br i1 %21, label %15, label %22, !llvm.loop !13

22:                                               ; preds = %15, %20, %11
  %23 = phi ptr [ %6, %11 ], [ %17, %20 ], [ %16, %15 ]
  store i64 %8, ptr %23, align 8, !tbaa !6
  %24 = getelementptr inbounds i8, ptr %23, i64 8
  store i64 %13, ptr %24, align 8, !tbaa !6
  br label %25

25:                                               ; preds = %5, %22
  %26 = getelementptr inbounds i8, ptr %6, i64 16
  %27 = icmp ult ptr %26, %1
  br i1 %27, label %5, label %28, !llvm.loop !15

28:                                               ; preds = %25, %2
  ret void
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: nounwind
define dso_local void @rs_sort_128x(ptr noundef %0, ptr noundef readnone %1, i32 noundef signext %2, i32 noundef signext %3) local_unnamed_addr #3 {
  %5 = alloca [256 x %struct.rsbucket_128x_t], align 8
  %6 = shl nuw i32 1, %2
  %7 = add nsw i32 %6, -1
  call void @llvm.lifetime.start.p0(i64 4096, ptr nonnull %5) #13
  %8 = sext i32 %6 to i64
  %9 = shl nsw i64 %8, 4
  %10 = getelementptr inbounds i8, ptr %5, i64 %9
  %11 = icmp slt i32 %2, 9
  br i1 %11, label %18, label %12

12:                                               ; preds = %4
  tail call void @__assert_fail(ptr noundef nonnull @.str, ptr noundef nonnull @.str.1, i32 noundef signext 15, ptr noundef nonnull @__PRETTY_FUNCTION__.rs_sort_128x) #14
  unreachable

13:                                               ; preds = %18
  %14 = icmp eq ptr %0, %1
  br i1 %14, label %33, label %15

15:                                               ; preds = %13
  %16 = zext nneg i32 %3 to i64
  %17 = sext i32 %7 to i64
  br label %23

18:                                               ; preds = %4, %18
  %19 = phi ptr [ %21, %18 ], [ %5, %4 ]
  %20 = getelementptr inbounds i8, ptr %19, i64 8
  store ptr %0, ptr %20, align 8, !tbaa !16
  store ptr %0, ptr %19, align 8, !tbaa !19
  %21 = getelementptr inbounds i8, ptr %19, i64 16
  %22 = icmp eq ptr %21, %10
  br i1 %22, label %13, label %18, !llvm.loop !20

23:                                               ; preds = %15, %23
  %24 = phi ptr [ %0, %15 ], [ %31, %23 ]
  %25 = load i64, ptr %24, align 8, !tbaa !10
  %26 = lshr i64 %25, %16
  %27 = and i64 %26, %17
  %28 = getelementptr inbounds [256 x %struct.rsbucket_128x_t], ptr %5, i64 0, i64 %27, i32 1
  %29 = load ptr, ptr %28, align 8, !tbaa !16
  %30 = getelementptr inbounds i8, ptr %29, i64 16
  store ptr %30, ptr %28, align 8, !tbaa !16
  %31 = getelementptr inbounds i8, ptr %24, i64 16
  %32 = icmp eq ptr %31, %1
  br i1 %32, label %33, label %23, !llvm.loop !21

33:                                               ; preds = %23, %13
  %34 = getelementptr inbounds i8, ptr %5, i64 16
  %35 = icmp eq i32 %2, 0
  br i1 %35, label %38, label %36

36:                                               ; preds = %33
  %37 = ptrtoint ptr %0 to i64
  br label %41

38:                                               ; preds = %41, %33
  %39 = zext i32 %3 to i64
  %40 = sext i32 %7 to i64
  br label %52

41:                                               ; preds = %36, %41
  %42 = phi ptr [ %34, %36 ], [ %50, %41 ]
  %43 = getelementptr inbounds i8, ptr %42, i64 -8
  %44 = load ptr, ptr %43, align 8, !tbaa !16
  %45 = ptrtoint ptr %44 to i64
  %46 = sub i64 %45, %37
  %47 = getelementptr inbounds i8, ptr %42, i64 8
  %48 = load ptr, ptr %47, align 8, !tbaa !16
  %49 = getelementptr inbounds i8, ptr %48, i64 %46
  store ptr %49, ptr %47, align 8, !tbaa !16
  store ptr %44, ptr %42, align 8, !tbaa !19
  %50 = getelementptr inbounds i8, ptr %42, i64 16
  %51 = icmp eq ptr %50, %10
  br i1 %51, label %38, label %41, !llvm.loop !22

52:                                               ; preds = %38, %88
  %53 = phi ptr [ %5, %38 ], [ %89, %88 ]
  %54 = load ptr, ptr %53, align 8, !tbaa !19
  %55 = getelementptr inbounds i8, ptr %53, i64 8
  %56 = load ptr, ptr %55, align 8, !tbaa !16
  %57 = icmp eq ptr %54, %56
  br i1 %57, label %86, label %58

58:                                               ; preds = %52
  %59 = load i64, ptr %54, align 8, !tbaa !6
  %60 = lshr i64 %59, %39
  %61 = and i64 %60, %40
  %62 = getelementptr inbounds %struct.rsbucket_128x_t, ptr %5, i64 %61
  %63 = icmp eq ptr %62, %53
  br i1 %63, label %84, label %64

64:                                               ; preds = %58
  %65 = getelementptr inbounds i8, ptr %54, i64 8
  %66 = load i64, ptr %65, align 8, !tbaa !6
  br label %67

67:                                               ; preds = %67, %64
  %68 = phi ptr [ %62, %64 ], [ %78, %67 ]
  %69 = phi i64 [ %66, %64 ], [ %74, %67 ]
  %70 = phi i64 [ %59, %64 ], [ %72, %67 ]
  %71 = load ptr, ptr %68, align 8, !tbaa !19
  %72 = load i64, ptr %71, align 8, !tbaa !6
  %73 = getelementptr inbounds i8, ptr %71, i64 8
  %74 = load i64, ptr %73, align 8, !tbaa !6
  %75 = getelementptr inbounds i8, ptr %71, i64 16
  store ptr %75, ptr %68, align 8, !tbaa !19
  store i64 %70, ptr %71, align 8, !tbaa !6
  store i64 %69, ptr %73, align 8, !tbaa !6
  %76 = lshr i64 %72, %39
  %77 = and i64 %76, %40
  %78 = getelementptr inbounds %struct.rsbucket_128x_t, ptr %5, i64 %77
  %79 = icmp eq ptr %78, %53
  br i1 %79, label %80, label %67, !llvm.loop !23

80:                                               ; preds = %67
  %81 = load ptr, ptr %53, align 8, !tbaa !19
  %82 = getelementptr inbounds i8, ptr %81, i64 16
  store ptr %82, ptr %53, align 8, !tbaa !19
  store i64 %72, ptr %81, align 8, !tbaa !6
  %83 = getelementptr inbounds i8, ptr %81, i64 8
  store i64 %74, ptr %83, align 8, !tbaa !6
  br label %88

84:                                               ; preds = %58
  %85 = getelementptr inbounds i8, ptr %54, i64 16
  store ptr %85, ptr %53, align 8, !tbaa !19
  br label %88

86:                                               ; preds = %52
  %87 = getelementptr inbounds i8, ptr %53, i64 16
  br label %88

88:                                               ; preds = %80, %84, %86
  %89 = phi ptr [ %87, %86 ], [ %53, %84 ], [ %53, %80 ]
  %90 = icmp eq ptr %89, %10
  br i1 %90, label %91, label %52, !llvm.loop !24

91:                                               ; preds = %88
  store ptr %0, ptr %5, align 8, !tbaa !19
  br i1 %35, label %98, label %92

92:                                               ; preds = %91, %92
  %93 = phi ptr [ %96, %92 ], [ %34, %91 ]
  %94 = getelementptr inbounds i8, ptr %93, i64 -8
  %95 = load ptr, ptr %94, align 8, !tbaa !16
  store ptr %95, ptr %93, align 8, !tbaa !19
  %96 = getelementptr inbounds i8, ptr %93, i64 16
  %97 = icmp eq ptr %96, %10
  br i1 %97, label %98, label %92, !llvm.loop !25

98:                                               ; preds = %92, %91
  %99 = icmp eq i32 %3, 0
  br i1 %99, label %146, label %100

100:                                              ; preds = %98
  %101 = icmp sgt i32 %3, %2
  %102 = sub nsw i32 %3, %2
  %103 = select i1 %101, i32 %102, i32 0
  br label %104

104:                                              ; preds = %100, %143
  %105 = phi ptr [ %144, %143 ], [ %5, %100 ]
  %106 = getelementptr inbounds i8, ptr %105, i64 8
  %107 = load ptr, ptr %106, align 8, !tbaa !16
  %108 = load ptr, ptr %105, align 8, !tbaa !19
  %109 = ptrtoint ptr %107 to i64
  %110 = ptrtoint ptr %108 to i64
  %111 = sub i64 %109, %110
  %112 = ashr exact i64 %111, 4
  %113 = icmp sgt i64 %112, 64
  br i1 %113, label %114, label %115

114:                                              ; preds = %104
  call void @rs_sort_128x(ptr noundef %108, ptr noundef %107, i32 noundef signext %2, i32 noundef signext %103)
  br label %143

115:                                              ; preds = %104
  %116 = icmp sgt i64 %112, 1
  %117 = getelementptr inbounds i8, ptr %108, i64 16
  %118 = icmp ult ptr %117, %107
  %119 = select i1 %116, i1 %118, i1 false
  br i1 %119, label %120, label %143

120:                                              ; preds = %115, %140
  %121 = phi ptr [ %141, %140 ], [ %117, %115 ]
  %122 = phi ptr [ %121, %140 ], [ %108, %115 ]
  %123 = load i64, ptr %121, align 8, !tbaa !6
  %124 = load i64, ptr %122, align 8, !tbaa !10
  %125 = icmp ult i64 %123, %124
  br i1 %125, label %126, label %140

126:                                              ; preds = %120
  %127 = getelementptr inbounds i8, ptr %122, i64 24
  %128 = load i64, ptr %127, align 8, !tbaa !6
  %129 = icmp ugt ptr %121, %108
  br i1 %129, label %130, label %137

130:                                              ; preds = %126, %135
  %131 = phi ptr [ %132, %135 ], [ %121, %126 ]
  %132 = getelementptr inbounds i8, ptr %131, i64 -16
  %133 = load i64, ptr %132, align 8, !tbaa !10
  %134 = icmp ult i64 %123, %133
  br i1 %134, label %135, label %137

135:                                              ; preds = %130
  call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %131, ptr noundef nonnull align 8 dereferenceable(16) %132, i64 16, i1 false), !tbaa.struct !12
  %136 = icmp ugt ptr %132, %108
  br i1 %136, label %130, label %137, !llvm.loop !13

137:                                              ; preds = %135, %130, %126
  %138 = phi ptr [ %121, %126 ], [ %131, %130 ], [ %132, %135 ]
  store i64 %123, ptr %138, align 8, !tbaa !6
  %139 = getelementptr inbounds i8, ptr %138, i64 8
  store i64 %128, ptr %139, align 8, !tbaa !6
  br label %140

140:                                              ; preds = %137, %120
  %141 = getelementptr inbounds i8, ptr %121, i64 16
  %142 = icmp ult ptr %141, %107
  br i1 %142, label %120, label %143, !llvm.loop !15

143:                                              ; preds = %140, %114, %115
  %144 = getelementptr inbounds i8, ptr %105, i64 16
  %145 = icmp eq ptr %144, %10
  br i1 %145, label %146, label %104, !llvm.loop !26

146:                                              ; preds = %143, %98
  call void @llvm.lifetime.end.p0(i64 4096, ptr nonnull %5) #13
  ret void
}

; Function Attrs: noreturn nounwind
declare dso_local void @__assert_fail(ptr noundef, ptr noundef, i32 noundef signext, ptr noundef) local_unnamed_addr #4

; Function Attrs: nounwind
define dso_local void @radix_sort_128x(ptr noundef %0, ptr noundef %1) local_unnamed_addr #3 {
  %3 = ptrtoint ptr %1 to i64
  %4 = ptrtoint ptr %0 to i64
  %5 = sub i64 %3, %4
  %6 = icmp slt i64 %5, 1025
  br i1 %6, label %7, label %33

7:                                                ; preds = %2
  %8 = getelementptr inbounds i8, ptr %0, i64 16
  %9 = icmp ult ptr %8, %1
  br i1 %9, label %10, label %34

10:                                               ; preds = %7, %30
  %11 = phi ptr [ %31, %30 ], [ %8, %7 ]
  %12 = phi ptr [ %11, %30 ], [ %0, %7 ]
  %13 = load i64, ptr %11, align 8, !tbaa !6
  %14 = load i64, ptr %12, align 8, !tbaa !10
  %15 = icmp ult i64 %13, %14
  br i1 %15, label %16, label %30

16:                                               ; preds = %10
  %17 = getelementptr inbounds i8, ptr %12, i64 24
  %18 = load i64, ptr %17, align 8, !tbaa !6
  %19 = icmp ugt ptr %11, %0
  br i1 %19, label %20, label %27

20:                                               ; preds = %16, %25
  %21 = phi ptr [ %22, %25 ], [ %11, %16 ]
  %22 = getelementptr inbounds i8, ptr %21, i64 -16
  %23 = load i64, ptr %22, align 8, !tbaa !10
  %24 = icmp ult i64 %13, %23
  br i1 %24, label %25, label %27

25:                                               ; preds = %20
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %21, ptr noundef nonnull align 8 dereferenceable(16) %22, i64 16, i1 false), !tbaa.struct !12
  %26 = icmp ugt ptr %22, %0
  br i1 %26, label %20, label %27, !llvm.loop !13

27:                                               ; preds = %25, %20, %16
  %28 = phi ptr [ %11, %16 ], [ %21, %20 ], [ %22, %25 ]
  store i64 %13, ptr %28, align 8, !tbaa !6
  %29 = getelementptr inbounds i8, ptr %28, i64 8
  store i64 %18, ptr %29, align 8, !tbaa !6
  br label %30

30:                                               ; preds = %27, %10
  %31 = getelementptr inbounds i8, ptr %11, i64 16
  %32 = icmp ult ptr %31, %1
  br i1 %32, label %10, label %34, !llvm.loop !15

33:                                               ; preds = %2
  tail call void @rs_sort_128x(ptr noundef %0, ptr noundef %1, i32 noundef signext 8, i32 noundef signext 56)
  br label %34

34:                                               ; preds = %30, %7, %33
  ret void
}

; Function Attrs: nounwind
define dso_local noalias ptr @mg_chain_backtrack(ptr nocapture readnone %0, i64 noundef %1, ptr nocapture noundef readonly %2, ptr nocapture noundef readonly %3, ptr nocapture noundef writeonly %4, ptr nocapture noundef %5, i32 noundef signext %6, i32 noundef signext %7, i32 noundef signext %8, ptr nocapture noundef writeonly %9, ptr nocapture noundef writeonly %10) local_unnamed_addr #3 {
  store i32 0, ptr %10, align 4, !tbaa !27
  store i32 0, ptr %9, align 4, !tbaa !27
  %12 = icmp sgt i64 %1, 0
  br i1 %12, label %13, label %279

13:                                               ; preds = %11, %13
  %14 = phi i64 [ %21, %13 ], [ 0, %11 ]
  %15 = phi i64 [ %20, %13 ], [ 0, %11 ]
  %16 = getelementptr inbounds i32, ptr %2, i64 %14
  %17 = load i32, ptr %16, align 4, !tbaa !27
  %18 = icmp sge i32 %17, %7
  %19 = zext i1 %18 to i64
  %20 = add nuw nsw i64 %15, %19
  %21 = add nuw nsw i64 %14, 1
  %22 = icmp eq i64 %21, %1
  br i1 %22, label %23, label %13, !llvm.loop !29

23:                                               ; preds = %13
  %24 = icmp eq i64 %20, 0
  br i1 %24, label %279, label %25

25:                                               ; preds = %23
  %26 = shl i64 %20, 4
  %27 = tail call noalias ptr @malloc(i64 noundef %26) #15
  br i1 %12, label %28, label %43

28:                                               ; preds = %25, %39
  %29 = phi i64 [ %41, %39 ], [ 0, %25 ]
  %30 = phi i64 [ %40, %39 ], [ 0, %25 ]
  %31 = getelementptr inbounds i32, ptr %2, i64 %29
  %32 = load i32, ptr %31, align 4, !tbaa !27
  %33 = icmp slt i32 %32, %7
  br i1 %33, label %39, label %34

34:                                               ; preds = %28
  %35 = sext i32 %32 to i64
  %36 = getelementptr inbounds %struct.mm128_t, ptr %27, i64 %30
  store i64 %35, ptr %36, align 8, !tbaa !10
  %37 = add nsw i64 %30, 1
  %38 = getelementptr inbounds i8, ptr %36, i64 8
  store i64 %29, ptr %38, align 8, !tbaa !30
  br label %39

39:                                               ; preds = %28, %34
  %40 = phi i64 [ %37, %34 ], [ %30, %28 ]
  %41 = add nuw nsw i64 %29, 1
  %42 = icmp eq i64 %41, %1
  br i1 %42, label %43, label %28, !llvm.loop !31

43:                                               ; preds = %39, %25
  %44 = getelementptr inbounds i8, ptr %27, i64 %26
  %45 = icmp ult i64 %20, 65
  br i1 %45, label %46, label %73

46:                                               ; preds = %43
  %47 = icmp eq i64 %20, 1
  br i1 %47, label %74, label %48

48:                                               ; preds = %46
  %49 = getelementptr inbounds i8, ptr %27, i64 16
  br label %50

50:                                               ; preds = %48, %70
  %51 = phi ptr [ %71, %70 ], [ %49, %48 ]
  %52 = phi ptr [ %51, %70 ], [ %27, %48 ]
  %53 = load i64, ptr %51, align 8, !tbaa !6
  %54 = load i64, ptr %52, align 8, !tbaa !10
  %55 = icmp ult i64 %53, %54
  br i1 %55, label %56, label %70

56:                                               ; preds = %50
  %57 = getelementptr inbounds i8, ptr %52, i64 24
  %58 = load i64, ptr %57, align 8, !tbaa !6
  %59 = icmp ugt ptr %51, %27
  br i1 %59, label %60, label %67

60:                                               ; preds = %56, %65
  %61 = phi ptr [ %62, %65 ], [ %51, %56 ]
  %62 = getelementptr inbounds i8, ptr %61, i64 -16
  %63 = load i64, ptr %62, align 8, !tbaa !10
  %64 = icmp ult i64 %53, %63
  br i1 %64, label %65, label %67

65:                                               ; preds = %60
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %61, ptr noundef nonnull align 8 dereferenceable(16) %62, i64 16, i1 false), !tbaa.struct !12
  %66 = icmp ugt ptr %62, %27
  br i1 %66, label %60, label %67, !llvm.loop !13

67:                                               ; preds = %65, %60, %56
  %68 = phi ptr [ %51, %56 ], [ %62, %65 ], [ %61, %60 ]
  store i64 %53, ptr %68, align 8, !tbaa !6
  %69 = getelementptr inbounds i8, ptr %68, i64 8
  store i64 %58, ptr %69, align 8, !tbaa !6
  br label %70

70:                                               ; preds = %67, %50
  %71 = getelementptr inbounds i8, ptr %51, i64 16
  %72 = icmp ult ptr %71, %44
  br i1 %72, label %50, label %74, !llvm.loop !15

73:                                               ; preds = %43
  tail call void @rs_sort_128x(ptr noundef %27, ptr noundef nonnull %44, i32 noundef signext 8, i32 noundef signext 56)
  br label %74

74:                                               ; preds = %46, %70, %73
  %75 = shl nsw i64 %1, 2
  tail call void @llvm.memset.p0.i64(ptr align 4 %5, i8 0, i64 %75, i1 false)
  %76 = add nsw i64 %20, -1
  %77 = sext i32 %6 to i64
  br label %78

78:                                               ; preds = %74, %166
  %79 = phi i64 [ %76, %74 ], [ %169, %166 ]
  %80 = phi i64 [ 0, %74 ], [ %168, %166 ]
  %81 = phi i32 [ 0, %74 ], [ %167, %166 ]
  %82 = getelementptr inbounds %struct.mm128_t, ptr %27, i64 %79
  %83 = getelementptr inbounds i8, ptr %82, i64 8
  %84 = load i64, ptr %83, align 8, !tbaa !6
  %85 = getelementptr inbounds i32, ptr %5, i64 %84
  %86 = load i32, ptr %85, align 4, !tbaa !27
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %166

88:                                               ; preds = %78
  %89 = icmp slt i64 %84, 0
  br i1 %89, label %143, label %90

90:                                               ; preds = %88
  %91 = load i64, ptr %82, align 8, !tbaa !10
  %92 = trunc i64 %91 to i32
  br label %93

93:                                               ; preds = %90, %114
  %94 = phi i64 [ %99, %114 ], [ %84, %90 ]
  %95 = phi i64 [ %110, %114 ], [ %84, %90 ]
  %96 = phi i32 [ %115, %114 ], [ 0, %90 ]
  %97 = getelementptr inbounds i32, ptr %5, i64 %94
  store i32 2, ptr %97, align 4, !tbaa !27
  %98 = getelementptr inbounds i64, ptr %3, i64 %94
  %99 = load i64, ptr %98, align 8, !tbaa !6
  %100 = icmp slt i64 %99, 0
  br i1 %100, label %105, label %101

101:                                              ; preds = %93
  %102 = getelementptr inbounds i32, ptr %2, i64 %99
  %103 = load i32, ptr %102, align 4, !tbaa !27
  %104 = sub nsw i32 %92, %103
  br label %105

105:                                              ; preds = %101, %93
  %106 = phi i32 [ %104, %101 ], [ %92, %93 ]
  %107 = icmp slt i32 %96, %106
  %108 = sub nsw i32 %96, %106
  %109 = icmp sle i32 %108, %8
  %110 = select i1 %107, i64 %99, i64 %95
  %111 = select i1 %107, i1 true, i1 %109
  %112 = icmp sgt i64 %99, -1
  %113 = and i1 %112, %111
  br i1 %113, label %114, label %119

114:                                              ; preds = %105
  %115 = tail call i32 @llvm.smax.i32(i32 %96, i32 %106)
  %116 = getelementptr inbounds i32, ptr %5, i64 %99
  %117 = load i32, ptr %116, align 4, !tbaa !27
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %93, label %119, !llvm.loop !32

119:                                              ; preds = %114, %105
  %120 = icmp eq i64 %84, %99
  br i1 %120, label %129, label %121

121:                                              ; preds = %119, %121
  %122 = phi i64 [ %125, %121 ], [ %84, %119 ]
  %123 = getelementptr inbounds i32, ptr %5, i64 %122
  store i32 0, ptr %123, align 4, !tbaa !27
  %124 = getelementptr inbounds i64, ptr %3, i64 %122
  %125 = load i64, ptr %124, align 8, !tbaa !6
  %126 = icmp sgt i64 %125, -1
  %127 = icmp ne i64 %125, %99
  %128 = and i1 %126, %127
  br i1 %128, label %121, label %129, !llvm.loop !33

129:                                              ; preds = %121, %119
  %130 = icmp eq i64 %84, %110
  br i1 %130, label %139, label %131

131:                                              ; preds = %129, %131
  %132 = phi i64 [ %137, %131 ], [ %84, %129 ]
  %133 = phi i64 [ %134, %131 ], [ %80, %129 ]
  %134 = add nsw i64 %133, 1
  %135 = getelementptr inbounds i32, ptr %5, i64 %132
  store i32 1, ptr %135, align 4, !tbaa !27
  %136 = getelementptr inbounds i64, ptr %3, i64 %132
  %137 = load i64, ptr %136, align 8, !tbaa !6
  %138 = icmp eq i64 %137, %110
  br i1 %138, label %139, label %131, !llvm.loop !34

139:                                              ; preds = %131, %129
  %140 = phi i64 [ %80, %129 ], [ %134, %131 ]
  %141 = phi i64 [ %84, %129 ], [ %110, %131 ]
  %142 = icmp slt i64 %141, 0
  br i1 %142, label %143, label %146

143:                                              ; preds = %88, %139
  %144 = phi i64 [ %140, %139 ], [ %80, %88 ]
  %145 = load i64, ptr %82, align 8, !tbaa !10
  br label %153

146:                                              ; preds = %139
  %147 = load i64, ptr %82, align 8, !tbaa !10
  %148 = trunc i64 %147 to i32
  %149 = getelementptr inbounds i32, ptr %2, i64 %141
  %150 = load i32, ptr %149, align 4, !tbaa !27
  %151 = sub nsw i32 %148, %150
  %152 = zext i32 %151 to i64
  br label %153

153:                                              ; preds = %146, %143
  %154 = phi i64 [ %144, %143 ], [ %140, %146 ]
  %155 = phi i64 [ %145, %143 ], [ %152, %146 ]
  %156 = trunc i64 %155 to i32
  %157 = icmp sge i32 %156, %7
  %158 = icmp sgt i64 %154, %80
  %159 = select i1 %157, i1 %158, i1 false
  br i1 %159, label %160, label %166

160:                                              ; preds = %153
  %161 = sub nsw i64 %154, %80
  %162 = icmp sge i64 %161, %77
  %163 = zext i1 %162 to i32
  %164 = add nsw i32 %81, %163
  %165 = select i1 %162, i64 %154, i64 %80
  br label %166

166:                                              ; preds = %160, %153, %78
  %167 = phi i32 [ %81, %78 ], [ %81, %153 ], [ %164, %160 ]
  %168 = phi i64 [ %80, %78 ], [ %80, %153 ], [ %165, %160 ]
  %169 = add nsw i64 %79, -1
  %170 = icmp sgt i64 %79, 0
  br i1 %170, label %78, label %171, !llvm.loop !35

171:                                              ; preds = %166
  %172 = sext i32 %167 to i64
  %173 = shl nsw i64 %172, 3
  %174 = tail call noalias ptr @malloc(i64 noundef %173) #15
  tail call void @llvm.memset.p0.i64(ptr nonnull align 4 %5, i8 0, i64 %75, i1 false)
  %175 = sext i32 %6 to i64
  br label %176

176:                                              ; preds = %171, %269
  %177 = phi i64 [ %76, %171 ], [ %272, %269 ]
  %178 = phi i64 [ 0, %171 ], [ %271, %269 ]
  %179 = phi i32 [ 0, %171 ], [ %270, %269 ]
  %180 = getelementptr inbounds %struct.mm128_t, ptr %27, i64 %177
  %181 = getelementptr inbounds i8, ptr %180, i64 8
  %182 = load i64, ptr %181, align 8, !tbaa !6
  %183 = getelementptr inbounds i32, ptr %5, i64 %182
  %184 = load i32, ptr %183, align 4, !tbaa !27
  %185 = icmp eq i32 %184, 0
  br i1 %185, label %186, label %269

186:                                              ; preds = %176
  %187 = icmp slt i64 %182, 0
  br i1 %187, label %243, label %188

188:                                              ; preds = %186
  %189 = load i64, ptr %180, align 8, !tbaa !10
  %190 = trunc i64 %189 to i32
  br label %191

191:                                              ; preds = %188, %212
  %192 = phi i64 [ %197, %212 ], [ %182, %188 ]
  %193 = phi i64 [ %208, %212 ], [ %182, %188 ]
  %194 = phi i32 [ %213, %212 ], [ 0, %188 ]
  %195 = getelementptr inbounds i32, ptr %5, i64 %192
  store i32 2, ptr %195, align 4, !tbaa !27
  %196 = getelementptr inbounds i64, ptr %3, i64 %192
  %197 = load i64, ptr %196, align 8, !tbaa !6
  %198 = icmp slt i64 %197, 0
  br i1 %198, label %203, label %199

199:                                              ; preds = %191
  %200 = getelementptr inbounds i32, ptr %2, i64 %197
  %201 = load i32, ptr %200, align 4, !tbaa !27
  %202 = sub nsw i32 %190, %201
  br label %203

203:                                              ; preds = %199, %191
  %204 = phi i32 [ %202, %199 ], [ %190, %191 ]
  %205 = icmp slt i32 %194, %204
  %206 = sub nsw i32 %194, %204
  %207 = icmp sle i32 %206, %8
  %208 = select i1 %205, i64 %197, i64 %193
  %209 = select i1 %205, i1 true, i1 %207
  %210 = icmp sgt i64 %197, -1
  %211 = and i1 %210, %209
  br i1 %211, label %212, label %217

212:                                              ; preds = %203
  %213 = tail call i32 @llvm.smax.i32(i32 %194, i32 %204)
  %214 = getelementptr inbounds i32, ptr %5, i64 %197
  %215 = load i32, ptr %214, align 4, !tbaa !27
  %216 = icmp eq i32 %215, 0
  br i1 %216, label %191, label %217, !llvm.loop !32

217:                                              ; preds = %212, %203
  %218 = icmp eq i64 %182, %197
  br i1 %218, label %227, label %219

219:                                              ; preds = %217, %219
  %220 = phi i64 [ %223, %219 ], [ %182, %217 ]
  %221 = getelementptr inbounds i32, ptr %5, i64 %220
  store i32 0, ptr %221, align 4, !tbaa !27
  %222 = getelementptr inbounds i64, ptr %3, i64 %220
  %223 = load i64, ptr %222, align 8, !tbaa !6
  %224 = icmp sgt i64 %223, -1
  %225 = icmp ne i64 %223, %197
  %226 = and i1 %224, %225
  br i1 %226, label %219, label %227, !llvm.loop !33

227:                                              ; preds = %219, %217
  %228 = icmp eq i64 %182, %208
  br i1 %228, label %239, label %229

229:                                              ; preds = %227, %229
  %230 = phi i64 [ %237, %229 ], [ %182, %227 ]
  %231 = phi i64 [ %233, %229 ], [ %178, %227 ]
  %232 = trunc i64 %230 to i32
  %233 = add nsw i64 %231, 1
  %234 = getelementptr inbounds i32, ptr %4, i64 %231
  store i32 %232, ptr %234, align 4, !tbaa !27
  %235 = getelementptr inbounds i32, ptr %5, i64 %230
  store i32 1, ptr %235, align 4, !tbaa !27
  %236 = getelementptr inbounds i64, ptr %3, i64 %230
  %237 = load i64, ptr %236, align 8, !tbaa !6
  %238 = icmp eq i64 %237, %208
  br i1 %238, label %239, label %229, !llvm.loop !36

239:                                              ; preds = %229, %227
  %240 = phi i64 [ %178, %227 ], [ %233, %229 ]
  %241 = phi i64 [ %182, %227 ], [ %208, %229 ]
  %242 = icmp slt i64 %241, 0
  br i1 %242, label %243, label %246

243:                                              ; preds = %186, %239
  %244 = phi i64 [ %240, %239 ], [ %178, %186 ]
  %245 = load i64, ptr %180, align 8, !tbaa !10
  br label %253

246:                                              ; preds = %239
  %247 = load i64, ptr %180, align 8, !tbaa !10
  %248 = trunc i64 %247 to i32
  %249 = getelementptr inbounds i32, ptr %2, i64 %241
  %250 = load i32, ptr %249, align 4, !tbaa !27
  %251 = sub nsw i32 %248, %250
  %252 = zext i32 %251 to i64
  br label %253

253:                                              ; preds = %246, %243
  %254 = phi i64 [ %244, %243 ], [ %240, %246 ]
  %255 = phi i64 [ %245, %243 ], [ %252, %246 ]
  %256 = trunc i64 %255 to i32
  %257 = icmp sge i32 %256, %7
  %258 = icmp sgt i64 %254, %178
  %259 = select i1 %257, i1 %258, i1 false
  br i1 %259, label %260, label %269

260:                                              ; preds = %253
  %261 = sub nsw i64 %254, %178
  %262 = icmp slt i64 %261, %175
  br i1 %262, label %269, label %263

263:                                              ; preds = %260
  %264 = shl i64 %255, 32
  %265 = or i64 %264, %261
  %266 = add nsw i32 %179, 1
  %267 = sext i32 %179 to i64
  %268 = getelementptr inbounds i64, ptr %174, i64 %267
  store i64 %265, ptr %268, align 8, !tbaa !6
  br label %269

269:                                              ; preds = %263, %260, %253, %176
  %270 = phi i32 [ %179, %176 ], [ %266, %263 ], [ %179, %260 ], [ %179, %253 ]
  %271 = phi i64 [ %178, %176 ], [ %254, %263 ], [ %178, %260 ], [ %178, %253 ]
  %272 = add nsw i64 %177, -1
  %273 = icmp sgt i64 %177, 0
  br i1 %273, label %176, label %274, !llvm.loop !37

274:                                              ; preds = %269
  tail call void @free(ptr noundef nonnull %27) #13
  %275 = icmp slt i64 %271, 2147483647
  br i1 %275, label %277, label %276

276:                                              ; preds = %274
  tail call void @__assert_fail(ptr noundef nonnull @.str.2, ptr noundef nonnull @.str.1, i32 noundef signext 126, ptr noundef nonnull @__PRETTY_FUNCTION__.mg_chain_backtrack) #14
  unreachable

277:                                              ; preds = %274
  store i32 %270, ptr %9, align 4, !tbaa !27
  %278 = trunc nuw nsw i64 %271 to i32
  store i32 %278, ptr %10, align 4, !tbaa !27
  br label %279

279:                                              ; preds = %11, %23, %277
  %280 = phi ptr [ %174, %277 ], [ null, %23 ], [ null, %11 ]
  ret ptr %280
}

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare dso_local noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #5

; Function Attrs: mustprogress nocallback nofree nounwind willreturn memory(argmem: write)
declare void @llvm.memset.p0.i64(ptr nocapture writeonly, i8, i64, i1 immarg) #6

; Function Attrs: mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare dso_local void @free(ptr allocptr nocapture noundef) local_unnamed_addr #7

; Function Attrs: nounwind
define dso_local noalias noundef ptr @mg_lchain_dp(i32 noundef signext %0, i32 noundef signext %1, i32 noundef signext %2, i32 noundef signext %3, i32 noundef signext %4, i32 noundef signext %5, i32 noundef signext %6, float noundef %7, float noundef %8, i32 noundef signext %9, i32 noundef signext %10, i64 noundef %11, ptr noundef %12, ptr noundef %13, ptr nocapture noundef %14, ptr noundef %15) local_unnamed_addr #3 {
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = tail call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.3, i32 noundef signext %0)
  %20 = tail call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.4, i32 noundef signext %1)
  %21 = tail call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.5, i32 noundef signext %2)
  %22 = tail call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.6, i32 noundef signext %3)
  %23 = tail call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.7, i32 noundef signext %4)
  %24 = tail call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.8, i32 noundef signext %5)
  %25 = tail call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.9, i32 noundef signext %6)
  %26 = fpext float %7 to double
  %27 = tail call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.10, double noundef %26)
  %28 = fpext float %8 to double
  %29 = tail call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.11, double noundef %28)
  %30 = tail call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.12, i32 noundef signext %9)
  %31 = tail call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.13, i32 noundef signext %10)
  %32 = tail call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.14, i64 noundef %11)
  %33 = tail call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.15, ptr noundef %12)
  %34 = tail call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.16, ptr noundef %13)
  %35 = load ptr, ptr %14, align 8, !tbaa !38
  %36 = tail call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.17, ptr noundef %35)
  %37 = tail call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.18, ptr noundef %15)
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %17) #13
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %18) #13
  store ptr null, ptr %14, align 8, !tbaa !38
  store i32 0, ptr %13, align 4, !tbaa !27
  %38 = icmp eq i64 %11, 0
  %39 = icmp eq ptr %12, null
  %40 = or i1 %38, %39
  br i1 %40, label %41, label %42

41:                                               ; preds = %16
  tail call void @free(ptr noundef %12) #13
  br label %1856

42:                                               ; preds = %16
  %43 = tail call i32 @llvm.smax.i32(i32 %0, i32 %2)
  %44 = icmp eq i32 %9, 0
  %45 = tail call i32 @llvm.smax.i32(i32 %1, i32 %2)
  %46 = select i1 %44, i32 %45, i32 %1
  %47 = select i1 %44, i32 %2, i32 2147483647
  %48 = shl i64 %11, 2
  %49 = tail call noalias ptr @malloc(i64 noundef %48) #15
  %50 = tail call noalias ptr @malloc(i64 noundef %48) #15
  %51 = tail call noalias ptr @malloc(i64 noundef %48) #15
  %52 = tail call noalias ptr @calloc(i64 noundef %11, i64 noundef 4) #16
  %53 = icmp sgt i64 %11, 0
  br i1 %53, label %54, label %1727

54:                                               ; preds = %42
  %55 = sext i32 %43 to i64
  %56 = sext i32 %4 to i64
  %57 = icmp sgt i32 %10, 1
  %58 = and i64 %11, 3
  %59 = icmp ult i64 %11, 4
  br i1 %59, label %1393, label %60

60:                                               ; preds = %54
  %61 = and i64 %11, 9223372036854775804
  br label %62

62:                                               ; preds = %1388, %60
  %63 = phi i64 [ 0, %60 ], [ %1083, %1388 ]
  %64 = phi i64 [ -1, %60 ], [ %1389, %1388 ]
  %65 = phi i64 [ 0, %60 ], [ %1390, %1388 ]
  %66 = phi i64 [ 0, %60 ], [ %1391, %1388 ]
  %67 = getelementptr inbounds %struct.mm128_t, ptr %12, i64 %65
  %68 = getelementptr inbounds i8, ptr %67, i64 8
  %69 = load i64, ptr %68, align 8, !tbaa !30
  %70 = lshr i64 %69, 32
  %71 = trunc nuw i64 %70 to i32
  %72 = and i32 %71, 255
  %73 = icmp slt i64 %63, %65
  br i1 %73, label %74, label %88

74:                                               ; preds = %62
  %75 = load i64, ptr %67, align 8, !tbaa !10
  br label %76

76:                                               ; preds = %74, %85
  %77 = phi i64 [ %63, %74 ], [ %86, %85 ]
  %78 = getelementptr inbounds %struct.mm128_t, ptr %12, i64 %77
  %79 = load i64, ptr %78, align 8, !tbaa !10
  %80 = xor i64 %79, %75
  %81 = icmp ugt i64 %80, 4294967295
  %82 = add i64 %79, %55
  %83 = icmp ugt i64 %75, %82
  %84 = or i1 %81, %83
  br i1 %84, label %85, label %88

85:                                               ; preds = %76
  %86 = add i64 %77, 1
  %87 = icmp eq i64 %86, %65
  br i1 %87, label %88, label %76, !llvm.loop !39

88:                                               ; preds = %76, %85, %62
  %89 = phi i64 [ %63, %62 ], [ %65, %85 ], [ %77, %76 ]
  %90 = sub nsw i64 %65, %89
  %91 = icmp sgt i64 %90, %56
  %92 = sub nsw i64 %65, %56
  %93 = select i1 %91, i64 %92, i64 %89
  %94 = add nsw i64 %65, -1
  %95 = icmp sgt i64 %65, %93
  br i1 %95, label %96, label %227

96:                                               ; preds = %88
  %97 = trunc i64 %69 to i32
  %98 = lshr i64 %69, 48
  %99 = trunc nuw nsw i64 %98 to i32
  %100 = and i32 %99, 255
  %101 = trunc i64 %65 to i32
  br label %102

102:                                              ; preds = %96, %221
  %103 = phi i32 [ 0, %96 ], [ %224, %221 ]
  %104 = phi i32 [ %72, %96 ], [ %223, %221 ]
  %105 = phi i64 [ -1, %96 ], [ %222, %221 ]
  %106 = phi i64 [ %94, %96 ], [ %225, %221 ]
  %107 = getelementptr inbounds %struct.mm128_t, ptr %12, i64 %106
  %108 = getelementptr inbounds i8, ptr %107, i64 8
  %109 = load i64, ptr %108, align 8, !tbaa !30
  %110 = trunc i64 %109 to i32
  %111 = sub nsw i32 %97, %110
  %112 = lshr i64 %109, 48
  %113 = trunc nuw nsw i64 %112 to i32
  %114 = and i32 %113, 255
  %115 = icmp slt i32 %111, 1
  %116 = icmp sgt i32 %111, %43
  %117 = or i1 %115, %116
  br i1 %117, label %221, label %118

118:                                              ; preds = %102
  %119 = load i64, ptr %67, align 8, !tbaa !10
  %120 = load i64, ptr %107, align 8, !tbaa !10
  %121 = sub i64 %119, %120
  %122 = trunc i64 %121 to i32
  %123 = icmp eq i32 %100, %114
  br i1 %123, label %127, label %124

124:                                              ; preds = %118
  %125 = sub nsw i32 %111, %122
  %126 = tail call i32 @llvm.abs.i32(i32 %125, i1 true)
  br label %140

127:                                              ; preds = %118
  %128 = icmp eq i32 %122, 0
  %129 = icmp sgt i32 %111, %46
  %130 = or i1 %129, %128
  br i1 %130, label %221, label %131

131:                                              ; preds = %127
  %132 = sub nsw i32 %111, %122
  %133 = tail call i32 @llvm.abs.i32(i32 %132, i1 true)
  %134 = icmp sgt i32 %133, %2
  br i1 %134, label %221, label %135

135:                                              ; preds = %131
  %136 = and i1 %57, %123
  %137 = and i1 %44, %136
  %138 = icmp slt i32 %46, %122
  %139 = select i1 %137, i1 %138, i1 false
  br i1 %139, label %221, label %140

140:                                              ; preds = %124, %135
  %141 = phi i32 [ %126, %124 ], [ %133, %135 ]
  %142 = icmp slt i32 %111, %122
  %143 = tail call i32 @llvm.smin.i32(i32 %111, i32 %122)
  %144 = lshr i64 %109, 32
  %145 = trunc nuw i64 %144 to i32
  %146 = and i32 %145, 255
  %147 = tail call i32 @llvm.smin.i32(i32 %146, i32 %143)
  %148 = icmp ne i32 %141, 0
  %149 = icmp slt i32 %146, %143
  %150 = select i1 %148, i1 true, i1 %149
  br i1 %150, label %151, label %192

151:                                              ; preds = %140
  %152 = uitofp nneg i32 %141 to float
  %153 = sitofp i32 %143 to float
  %154 = fmul float %153, %8
  %155 = tail call float @llvm.fmuladd.f32(float %7, float %152, float %154)
  %156 = icmp eq i32 %141, 0
  br i1 %156, label %170, label %157

157:                                              ; preds = %151
  %158 = add nuw nsw i32 %141, 1
  %159 = uitofp nneg i32 %158 to float
  %160 = bitcast float %159 to i32
  %161 = lshr i32 %160, 23
  %162 = add nsw i32 %161, -128
  %163 = uitofp i32 %162 to float
  %164 = and i32 %160, 8388607
  %165 = or disjoint i32 %164, 1065353216
  %166 = bitcast i32 %165 to float
  %167 = tail call float @llvm.fmuladd.f32(float %166, float 0xBFD611FF20000000, float 0x4000328400000000)
  %168 = tail call float @llvm.fmuladd.f32(float %167, float %166, float 0xBFE59898E0000000)
  %169 = fadd float %168, %163
  br label %170

170:                                              ; preds = %157, %151
  %171 = phi float [ %169, %157 ], [ 0.000000e+00, %151 ]
  %172 = and i1 %44, %123
  br i1 %172, label %188, label %173

173:                                              ; preds = %170
  %174 = icmp ne i32 %100, %114
  %175 = icmp eq i32 %122, 0
  %176 = select i1 %174, i1 %175, i1 false
  br i1 %176, label %195, label %177

177:                                              ; preds = %173
  %178 = or i1 %174, %142
  br i1 %178, label %179, label %184

179:                                              ; preds = %177
  %180 = fcmp olt float %155, %171
  %181 = select i1 %180, float %155, float %171
  %182 = fptosi float %181 to i32
  %183 = sub nsw i32 %147, %182
  br label %192

184:                                              ; preds = %177
  %185 = tail call float @llvm.fmuladd.f32(float %171, float 5.000000e-01, float %155)
  %186 = fptosi float %185 to i32
  %187 = sub nsw i32 %147, %186
  br label %192

188:                                              ; preds = %170
  %189 = tail call float @llvm.fmuladd.f32(float %171, float 5.000000e-01, float %155)
  %190 = fptosi float %189 to i32
  %191 = sub nsw i32 %147, %190
  br label %192

192:                                              ; preds = %140, %179, %184, %188
  %193 = phi i32 [ %147, %140 ], [ %183, %179 ], [ %187, %184 ], [ %191, %188 ]
  %194 = icmp eq i32 %193, -2147483648
  br i1 %194, label %221, label %195

195:                                              ; preds = %173, %192
  %196 = phi i32 [ %193, %192 ], [ 1, %173 ]
  %197 = getelementptr inbounds i32, ptr %50, i64 %106
  %198 = load i32, ptr %197, align 4, !tbaa !27
  %199 = add nsw i32 %198, %196
  %200 = icmp sgt i32 %199, %104
  br i1 %200, label %201, label %205

201:                                              ; preds = %195
  %202 = icmp sgt i32 %103, 0
  %203 = sext i1 %202 to i32
  %204 = add nsw i32 %103, %203
  br label %212

205:                                              ; preds = %195
  %206 = getelementptr inbounds i32, ptr %52, i64 %106
  %207 = load i32, ptr %206, align 4, !tbaa !27
  %208 = icmp eq i32 %207, %101
  br i1 %208, label %209, label %212

209:                                              ; preds = %205
  %210 = add nsw i32 %103, 1
  %211 = icmp slt i32 %103, %3
  br i1 %211, label %212, label %227

212:                                              ; preds = %201, %205, %209
  %213 = phi i64 [ %105, %209 ], [ %105, %205 ], [ %106, %201 ]
  %214 = phi i32 [ %104, %209 ], [ %104, %205 ], [ %199, %201 ]
  %215 = phi i32 [ %210, %209 ], [ %103, %205 ], [ %204, %201 ]
  %216 = getelementptr inbounds i64, ptr %49, i64 %106
  %217 = load i64, ptr %216, align 8, !tbaa !6
  %218 = icmp sgt i64 %217, -1
  br i1 %218, label %219, label %221

219:                                              ; preds = %212
  %220 = getelementptr inbounds i32, ptr %52, i64 %217
  store i32 %101, ptr %220, align 4, !tbaa !27
  br label %221

221:                                              ; preds = %135, %131, %127, %102, %192, %219, %212
  %222 = phi i64 [ %213, %212 ], [ %213, %219 ], [ %105, %192 ], [ %105, %102 ], [ %105, %127 ], [ %105, %131 ], [ %105, %135 ]
  %223 = phi i32 [ %214, %212 ], [ %214, %219 ], [ %104, %192 ], [ %104, %102 ], [ %104, %127 ], [ %104, %131 ], [ %104, %135 ]
  %224 = phi i32 [ %215, %212 ], [ %215, %219 ], [ %103, %192 ], [ %103, %102 ], [ %103, %127 ], [ %103, %131 ], [ %103, %135 ]
  %225 = add nsw i64 %106, -1
  %226 = icmp sgt i64 %106, %93
  br i1 %226, label %102, label %227, !llvm.loop !40

227:                                              ; preds = %221, %209, %88
  %228 = phi i64 [ %94, %88 ], [ %106, %209 ], [ %225, %221 ]
  %229 = phi i64 [ -1, %88 ], [ %105, %209 ], [ %222, %221 ]
  %230 = phi i32 [ %72, %88 ], [ %104, %209 ], [ %223, %221 ]
  %231 = icmp slt i64 %64, 0
  br i1 %231, label %238, label %232

232:                                              ; preds = %227
  %233 = load i64, ptr %67, align 8, !tbaa !10
  %234 = getelementptr inbounds %struct.mm128_t, ptr %12, i64 %64
  %235 = load i64, ptr %234, align 8, !tbaa !10
  %236 = sub i64 %233, %235
  %237 = icmp ugt i64 %236, %55
  br i1 %237, label %238, label %250

238:                                              ; preds = %232, %227
  br i1 %95, label %239, label %357

239:                                              ; preds = %238, %239
  %240 = phi i32 [ %247, %239 ], [ -2147483648, %238 ]
  %241 = phi i64 [ %246, %239 ], [ -1, %238 ]
  %242 = phi i64 [ %248, %239 ], [ %94, %238 ]
  %243 = getelementptr inbounds i32, ptr %50, i64 %242
  %244 = load i32, ptr %243, align 4, !tbaa !27
  %245 = icmp slt i32 %240, %244
  %246 = select i1 %245, i64 %242, i64 %241
  %247 = tail call i32 @llvm.smax.i32(i32 %240, i32 %244)
  %248 = add nsw i64 %242, -1
  %249 = icmp sgt i64 %242, %93
  br i1 %249, label %239, label %250, !llvm.loop !41

250:                                              ; preds = %239, %232
  %251 = phi i64 [ %64, %232 ], [ %246, %239 ]
  %252 = icmp sgt i64 %251, -1
  %253 = icmp slt i64 %251, %228
  %254 = and i1 %252, %253
  br i1 %254, label %255, label %357

255:                                              ; preds = %250
  %256 = getelementptr inbounds %struct.mm128_t, ptr %12, i64 %251
  %257 = trunc i64 %69 to i32
  %258 = getelementptr inbounds i8, ptr %256, i64 8
  %259 = load i64, ptr %258, align 8, !tbaa !30
  %260 = trunc i64 %259 to i32
  %261 = sub nsw i32 %257, %260
  %262 = lshr i64 %69, 48
  %263 = trunc nuw nsw i64 %262 to i32
  %264 = and i32 %263, 255
  %265 = lshr i64 %259, 48
  %266 = trunc nuw nsw i64 %265 to i32
  %267 = and i32 %266, 255
  %268 = icmp slt i32 %261, 1
  %269 = icmp sgt i32 %261, %43
  %270 = or i1 %268, %269
  br i1 %270, label %357, label %271

271:                                              ; preds = %255
  %272 = load i64, ptr %67, align 8, !tbaa !10
  %273 = load i64, ptr %256, align 8, !tbaa !10
  %274 = sub i64 %272, %273
  %275 = trunc i64 %274 to i32
  %276 = icmp eq i32 %264, %267
  br i1 %276, label %280, label %277

277:                                              ; preds = %271
  %278 = sub nsw i32 %261, %275
  %279 = tail call i32 @llvm.abs.i32(i32 %278, i1 true)
  br label %293

280:                                              ; preds = %271
  %281 = icmp eq i32 %275, 0
  %282 = icmp sgt i32 %261, %46
  %283 = or i1 %282, %281
  br i1 %283, label %357, label %284

284:                                              ; preds = %280
  %285 = sub nsw i32 %261, %275
  %286 = tail call i32 @llvm.abs.i32(i32 %285, i1 true)
  %287 = icmp sgt i32 %286, %2
  br i1 %287, label %357, label %288

288:                                              ; preds = %284
  %289 = and i1 %57, %276
  %290 = and i1 %44, %289
  %291 = icmp slt i32 %46, %275
  %292 = select i1 %290, i1 %291, i1 false
  br i1 %292, label %357, label %293

293:                                              ; preds = %277, %288
  %294 = phi i32 [ %279, %277 ], [ %286, %288 ]
  %295 = icmp slt i32 %261, %275
  %296 = tail call i32 @llvm.smin.i32(i32 %261, i32 %275)
  %297 = lshr i64 %259, 32
  %298 = trunc nuw i64 %297 to i32
  %299 = and i32 %298, 255
  %300 = tail call i32 @llvm.smin.i32(i32 %299, i32 %296)
  %301 = icmp ne i32 %294, 0
  %302 = icmp slt i32 %299, %296
  %303 = select i1 %301, i1 true, i1 %302
  br i1 %303, label %304, label %345

304:                                              ; preds = %293
  %305 = uitofp nneg i32 %294 to float
  %306 = sitofp i32 %296 to float
  %307 = fmul float %306, %8
  %308 = tail call float @llvm.fmuladd.f32(float %7, float %305, float %307)
  %309 = icmp eq i32 %294, 0
  br i1 %309, label %323, label %310

310:                                              ; preds = %304
  %311 = add nuw nsw i32 %294, 1
  %312 = uitofp nneg i32 %311 to float
  %313 = bitcast float %312 to i32
  %314 = lshr i32 %313, 23
  %315 = add nsw i32 %314, -128
  %316 = uitofp i32 %315 to float
  %317 = and i32 %313, 8388607
  %318 = or disjoint i32 %317, 1065353216
  %319 = bitcast i32 %318 to float
  %320 = tail call float @llvm.fmuladd.f32(float %319, float 0xBFD611FF20000000, float 0x4000328400000000)
  %321 = tail call float @llvm.fmuladd.f32(float %320, float %319, float 0xBFE59898E0000000)
  %322 = fadd float %321, %316
  br label %323

323:                                              ; preds = %310, %304
  %324 = phi float [ %322, %310 ], [ 0.000000e+00, %304 ]
  %325 = and i1 %44, %276
  br i1 %325, label %341, label %326

326:                                              ; preds = %323
  %327 = icmp ne i32 %264, %267
  %328 = icmp eq i32 %275, 0
  %329 = select i1 %327, i1 %328, i1 false
  br i1 %329, label %348, label %330

330:                                              ; preds = %326
  %331 = or i1 %327, %295
  br i1 %331, label %332, label %337

332:                                              ; preds = %330
  %333 = fcmp olt float %308, %324
  %334 = select i1 %333, float %308, float %324
  %335 = fptosi float %334 to i32
  %336 = sub nsw i32 %300, %335
  br label %345

337:                                              ; preds = %330
  %338 = tail call float @llvm.fmuladd.f32(float %324, float 5.000000e-01, float %308)
  %339 = fptosi float %338 to i32
  %340 = sub nsw i32 %300, %339
  br label %345

341:                                              ; preds = %323
  %342 = tail call float @llvm.fmuladd.f32(float %324, float 5.000000e-01, float %308)
  %343 = fptosi float %342 to i32
  %344 = sub nsw i32 %300, %343
  br label %345

345:                                              ; preds = %293, %332, %337, %341
  %346 = phi i32 [ %300, %293 ], [ %336, %332 ], [ %340, %337 ], [ %344, %341 ]
  %347 = icmp eq i32 %346, -2147483648
  br i1 %347, label %357, label %348

348:                                              ; preds = %326, %345
  %349 = phi i32 [ %346, %345 ], [ 1, %326 ]
  %350 = getelementptr inbounds i32, ptr %50, i64 %251
  %351 = load i32, ptr %350, align 4, !tbaa !27
  %352 = add nsw i32 %351, %349
  %353 = icmp slt i32 %230, %352
  br i1 %353, label %354, label %357

354:                                              ; preds = %348
  %355 = getelementptr inbounds i32, ptr %50, i64 %65
  store i32 %352, ptr %355, align 4, !tbaa !27
  %356 = getelementptr inbounds i64, ptr %49, i64 %65
  store i64 %251, ptr %356, align 8, !tbaa !6
  br label %362

357:                                              ; preds = %238, %288, %284, %280, %255, %348, %345, %250
  %358 = phi i64 [ %251, %288 ], [ %251, %284 ], [ %251, %280 ], [ %251, %255 ], [ %251, %348 ], [ %251, %345 ], [ %251, %250 ], [ -1, %238 ]
  %359 = getelementptr inbounds i32, ptr %50, i64 %65
  store i32 %230, ptr %359, align 4, !tbaa !27
  %360 = getelementptr inbounds i64, ptr %49, i64 %65
  store i64 %229, ptr %360, align 8, !tbaa !6
  %361 = icmp sgt i64 %229, -1
  br i1 %361, label %362, label %369

362:                                              ; preds = %354, %357
  %363 = phi i64 [ %251, %354 ], [ %358, %357 ]
  %364 = phi i32 [ %352, %354 ], [ %230, %357 ]
  %365 = phi i64 [ %251, %354 ], [ %229, %357 ]
  %366 = getelementptr inbounds i32, ptr %51, i64 %365
  %367 = load i32, ptr %366, align 4, !tbaa !27
  %368 = tail call i32 @llvm.smax.i32(i32 %367, i32 %364)
  br label %369

369:                                              ; preds = %362, %357
  %370 = phi i64 [ %358, %357 ], [ %363, %362 ]
  %371 = phi i32 [ %230, %357 ], [ %364, %362 ]
  %372 = phi i32 [ %230, %357 ], [ %368, %362 ]
  %373 = getelementptr inbounds i32, ptr %51, i64 %65
  store i32 %372, ptr %373, align 4, !tbaa !27
  %374 = icmp slt i64 %370, 0
  br i1 %374, label %385, label %375

375:                                              ; preds = %369
  %376 = load i64, ptr %67, align 8, !tbaa !10
  %377 = getelementptr inbounds %struct.mm128_t, ptr %12, i64 %370
  %378 = load i64, ptr %377, align 8, !tbaa !10
  %379 = sub i64 %376, %378
  %380 = icmp ugt i64 %379, %55
  br i1 %380, label %386, label %381

381:                                              ; preds = %375
  %382 = getelementptr inbounds i32, ptr %50, i64 %370
  %383 = load i32, ptr %382, align 4, !tbaa !27
  %384 = icmp slt i32 %383, %371
  br i1 %384, label %385, label %386

385:                                              ; preds = %381, %369
  br label %386

386:                                              ; preds = %385, %381, %375
  %387 = phi i64 [ %65, %385 ], [ %370, %381 ], [ %370, %375 ]
  %388 = or disjoint i64 %65, 1
  %389 = getelementptr inbounds %struct.mm128_t, ptr %12, i64 %388
  %390 = getelementptr inbounds i8, ptr %389, i64 8
  %391 = load i64, ptr %390, align 8, !tbaa !30
  %392 = lshr i64 %391, 32
  %393 = trunc nuw i64 %392 to i32
  %394 = and i32 %393, 255
  %395 = icmp sgt i64 %93, %65
  br i1 %395, label %410, label %396

396:                                              ; preds = %386
  %397 = load i64, ptr %389, align 8, !tbaa !10
  br label %398

398:                                              ; preds = %407, %396
  %399 = phi i64 [ %93, %396 ], [ %408, %407 ]
  %400 = getelementptr inbounds %struct.mm128_t, ptr %12, i64 %399
  %401 = load i64, ptr %400, align 8, !tbaa !10
  %402 = xor i64 %401, %397
  %403 = icmp ugt i64 %402, 4294967295
  %404 = add i64 %401, %55
  %405 = icmp ugt i64 %397, %404
  %406 = or i1 %403, %405
  br i1 %406, label %407, label %410

407:                                              ; preds = %398
  %408 = add i64 %399, 1
  %409 = icmp eq i64 %399, %65
  br i1 %409, label %410, label %398, !llvm.loop !39

410:                                              ; preds = %398, %407, %386
  %411 = phi i64 [ %93, %386 ], [ %388, %407 ], [ %399, %398 ]
  %412 = sub nsw i64 %388, %411
  %413 = icmp sgt i64 %412, %56
  %414 = sub nsw i64 %388, %56
  %415 = select i1 %413, i64 %414, i64 %411
  %416 = icmp slt i64 %65, %415
  br i1 %416, label %557, label %417

417:                                              ; preds = %410
  %418 = trunc i64 %391 to i32
  %419 = lshr i64 %391, 48
  %420 = trunc nuw nsw i64 %419 to i32
  %421 = and i32 %420, 255
  %422 = trunc i64 %388 to i32
  br label %423

423:                                              ; preds = %542, %417
  %424 = phi i32 [ 0, %417 ], [ %545, %542 ]
  %425 = phi i32 [ %394, %417 ], [ %544, %542 ]
  %426 = phi i64 [ -1, %417 ], [ %543, %542 ]
  %427 = phi i64 [ %65, %417 ], [ %546, %542 ]
  %428 = getelementptr inbounds %struct.mm128_t, ptr %12, i64 %427
  %429 = getelementptr inbounds i8, ptr %428, i64 8
  %430 = load i64, ptr %429, align 8, !tbaa !30
  %431 = trunc i64 %430 to i32
  %432 = sub nsw i32 %418, %431
  %433 = lshr i64 %430, 48
  %434 = trunc nuw nsw i64 %433 to i32
  %435 = and i32 %434, 255
  %436 = icmp slt i32 %432, 1
  %437 = icmp sgt i32 %432, %43
  %438 = or i1 %436, %437
  br i1 %438, label %542, label %439

439:                                              ; preds = %423
  %440 = load i64, ptr %389, align 8, !tbaa !10
  %441 = load i64, ptr %428, align 8, !tbaa !10
  %442 = sub i64 %440, %441
  %443 = trunc i64 %442 to i32
  %444 = icmp eq i32 %421, %435
  br i1 %444, label %448, label %445

445:                                              ; preds = %439
  %446 = sub nsw i32 %432, %443
  %447 = tail call i32 @llvm.abs.i32(i32 %446, i1 true)
  br label %461

448:                                              ; preds = %439
  %449 = icmp eq i32 %443, 0
  %450 = icmp sgt i32 %432, %46
  %451 = or i1 %450, %449
  br i1 %451, label %542, label %452

452:                                              ; preds = %448
  %453 = sub nsw i32 %432, %443
  %454 = tail call i32 @llvm.abs.i32(i32 %453, i1 true)
  %455 = icmp sgt i32 %454, %2
  br i1 %455, label %542, label %456

456:                                              ; preds = %452
  %457 = and i1 %57, %444
  %458 = and i1 %44, %457
  %459 = icmp slt i32 %46, %443
  %460 = select i1 %458, i1 %459, i1 false
  br i1 %460, label %542, label %461

461:                                              ; preds = %445, %456
  %462 = phi i32 [ %447, %445 ], [ %454, %456 ]
  %463 = icmp slt i32 %432, %443
  %464 = tail call i32 @llvm.smin.i32(i32 %432, i32 %443)
  %465 = lshr i64 %430, 32
  %466 = trunc nuw i64 %465 to i32
  %467 = and i32 %466, 255
  %468 = tail call i32 @llvm.smin.i32(i32 %467, i32 %464)
  %469 = icmp ne i32 %462, 0
  %470 = icmp slt i32 %467, %464
  %471 = select i1 %469, i1 true, i1 %470
  br i1 %471, label %472, label %513

472:                                              ; preds = %461
  %473 = uitofp nneg i32 %462 to float
  %474 = sitofp i32 %464 to float
  %475 = fmul float %474, %8
  %476 = tail call float @llvm.fmuladd.f32(float %7, float %473, float %475)
  %477 = icmp eq i32 %462, 0
  br i1 %477, label %491, label %478

478:                                              ; preds = %472
  %479 = add nuw nsw i32 %462, 1
  %480 = uitofp nneg i32 %479 to float
  %481 = bitcast float %480 to i32
  %482 = lshr i32 %481, 23
  %483 = add nsw i32 %482, -128
  %484 = uitofp i32 %483 to float
  %485 = and i32 %481, 8388607
  %486 = or disjoint i32 %485, 1065353216
  %487 = bitcast i32 %486 to float
  %488 = tail call float @llvm.fmuladd.f32(float %487, float 0xBFD611FF20000000, float 0x4000328400000000)
  %489 = tail call float @llvm.fmuladd.f32(float %488, float %487, float 0xBFE59898E0000000)
  %490 = fadd float %489, %484
  br label %491

491:                                              ; preds = %478, %472
  %492 = phi float [ %490, %478 ], [ 0.000000e+00, %472 ]
  %493 = and i1 %44, %444
  br i1 %493, label %509, label %494

494:                                              ; preds = %491
  %495 = icmp ne i32 %421, %435
  %496 = icmp eq i32 %443, 0
  %497 = select i1 %495, i1 %496, i1 false
  br i1 %497, label %516, label %498

498:                                              ; preds = %494
  %499 = or i1 %495, %463
  br i1 %499, label %504, label %500

500:                                              ; preds = %498
  %501 = tail call float @llvm.fmuladd.f32(float %492, float 5.000000e-01, float %476)
  %502 = fptosi float %501 to i32
  %503 = sub nsw i32 %468, %502
  br label %513

504:                                              ; preds = %498
  %505 = fcmp olt float %476, %492
  %506 = select i1 %505, float %476, float %492
  %507 = fptosi float %506 to i32
  %508 = sub nsw i32 %468, %507
  br label %513

509:                                              ; preds = %491
  %510 = tail call float @llvm.fmuladd.f32(float %492, float 5.000000e-01, float %476)
  %511 = fptosi float %510 to i32
  %512 = sub nsw i32 %468, %511
  br label %513

513:                                              ; preds = %509, %504, %500, %461
  %514 = phi i32 [ %468, %461 ], [ %508, %504 ], [ %503, %500 ], [ %512, %509 ]
  %515 = icmp eq i32 %514, -2147483648
  br i1 %515, label %542, label %516

516:                                              ; preds = %513, %494
  %517 = phi i32 [ %514, %513 ], [ 1, %494 ]
  %518 = getelementptr inbounds i32, ptr %50, i64 %427
  %519 = load i32, ptr %518, align 4, !tbaa !27
  %520 = add nsw i32 %519, %517
  %521 = icmp sgt i32 %520, %425
  br i1 %521, label %529, label %522

522:                                              ; preds = %516
  %523 = getelementptr inbounds i32, ptr %52, i64 %427
  %524 = load i32, ptr %523, align 4, !tbaa !27
  %525 = icmp eq i32 %524, %422
  br i1 %525, label %526, label %533

526:                                              ; preds = %522
  %527 = add nsw i32 %424, 1
  %528 = icmp slt i32 %424, %3
  br i1 %528, label %533, label %548

529:                                              ; preds = %516
  %530 = icmp sgt i32 %424, 0
  %531 = sext i1 %530 to i32
  %532 = add nsw i32 %424, %531
  br label %533

533:                                              ; preds = %529, %526, %522
  %534 = phi i64 [ %426, %526 ], [ %426, %522 ], [ %427, %529 ]
  %535 = phi i32 [ %425, %526 ], [ %425, %522 ], [ %520, %529 ]
  %536 = phi i32 [ %527, %526 ], [ %424, %522 ], [ %532, %529 ]
  %537 = getelementptr inbounds i64, ptr %49, i64 %427
  %538 = load i64, ptr %537, align 8, !tbaa !6
  %539 = icmp sgt i64 %538, -1
  br i1 %539, label %540, label %542

540:                                              ; preds = %533
  %541 = getelementptr inbounds i32, ptr %52, i64 %538
  store i32 %422, ptr %541, align 4, !tbaa !27
  br label %542

542:                                              ; preds = %540, %533, %513, %456, %452, %448, %423
  %543 = phi i64 [ %534, %533 ], [ %534, %540 ], [ %426, %513 ], [ %426, %423 ], [ %426, %448 ], [ %426, %452 ], [ %426, %456 ]
  %544 = phi i32 [ %535, %533 ], [ %535, %540 ], [ %425, %513 ], [ %425, %423 ], [ %425, %448 ], [ %425, %452 ], [ %425, %456 ]
  %545 = phi i32 [ %536, %533 ], [ %536, %540 ], [ %424, %513 ], [ %424, %423 ], [ %424, %448 ], [ %424, %452 ], [ %424, %456 ]
  %546 = add nsw i64 %427, -1
  %547 = icmp sgt i64 %427, %415
  br i1 %547, label %423, label %548, !llvm.loop !40

548:                                              ; preds = %542, %526
  %549 = phi i64 [ %546, %542 ], [ %427, %526 ]
  %550 = phi i64 [ %543, %542 ], [ %426, %526 ]
  %551 = phi i32 [ %544, %542 ], [ %425, %526 ]
  %552 = load i64, ptr %389, align 8, !tbaa !10
  %553 = getelementptr inbounds %struct.mm128_t, ptr %12, i64 %387
  %554 = load i64, ptr %553, align 8, !tbaa !10
  %555 = sub i64 %552, %554
  %556 = icmp ugt i64 %555, %55
  br i1 %556, label %567, label %579

557:                                              ; preds = %410
  %558 = load i64, ptr %389, align 8, !tbaa !10
  %559 = getelementptr inbounds %struct.mm128_t, ptr %12, i64 %387
  %560 = load i64, ptr %559, align 8, !tbaa !10
  %561 = sub i64 %558, %560
  %562 = icmp ugt i64 %561, %55
  br i1 %562, label %563, label %579

563:                                              ; preds = %557
  %564 = getelementptr inbounds i32, ptr %50, i64 %388
  store i32 %394, ptr %564, align 4, !tbaa !27
  %565 = getelementptr inbounds i64, ptr %49, i64 %388
  store i64 -1, ptr %565, align 8, !tbaa !6
  %566 = getelementptr inbounds i32, ptr %51, i64 %388
  store i32 %394, ptr %566, align 4, !tbaa !27
  br label %719

567:                                              ; preds = %548
  br i1 %416, label %689, label %568

568:                                              ; preds = %567, %568
  %569 = phi i32 [ %576, %568 ], [ -2147483648, %567 ]
  %570 = phi i64 [ %575, %568 ], [ -1, %567 ]
  %571 = phi i64 [ %577, %568 ], [ %65, %567 ]
  %572 = getelementptr inbounds i32, ptr %50, i64 %571
  %573 = load i32, ptr %572, align 4, !tbaa !27
  %574 = icmp slt i32 %569, %573
  %575 = select i1 %574, i64 %571, i64 %570
  %576 = tail call i32 @llvm.smax.i32(i32 %569, i32 %573)
  %577 = add nsw i64 %571, -1
  %578 = icmp sgt i64 %571, %415
  br i1 %578, label %568, label %579, !llvm.loop !41

579:                                              ; preds = %568, %557, %548
  %580 = phi i32 [ %551, %548 ], [ %394, %557 ], [ %551, %568 ]
  %581 = phi i64 [ %550, %548 ], [ -1, %557 ], [ %550, %568 ]
  %582 = phi i64 [ %549, %548 ], [ %65, %557 ], [ %549, %568 ]
  %583 = phi i64 [ %387, %548 ], [ %387, %557 ], [ %575, %568 ]
  %584 = icmp sgt i64 %583, -1
  %585 = icmp slt i64 %583, %582
  %586 = and i1 %584, %585
  br i1 %586, label %587, label %689

587:                                              ; preds = %579
  %588 = getelementptr inbounds %struct.mm128_t, ptr %12, i64 %583
  %589 = trunc i64 %391 to i32
  %590 = getelementptr inbounds i8, ptr %588, i64 8
  %591 = load i64, ptr %590, align 8, !tbaa !30
  %592 = trunc i64 %591 to i32
  %593 = sub nsw i32 %589, %592
  %594 = lshr i64 %391, 48
  %595 = trunc nuw nsw i64 %594 to i32
  %596 = and i32 %595, 255
  %597 = lshr i64 %591, 48
  %598 = trunc nuw nsw i64 %597 to i32
  %599 = and i32 %598, 255
  %600 = icmp slt i32 %593, 1
  %601 = icmp sgt i32 %593, %43
  %602 = or i1 %600, %601
  br i1 %602, label %689, label %603

603:                                              ; preds = %587
  %604 = load i64, ptr %389, align 8, !tbaa !10
  %605 = load i64, ptr %588, align 8, !tbaa !10
  %606 = sub i64 %604, %605
  %607 = trunc i64 %606 to i32
  %608 = icmp eq i32 %596, %599
  br i1 %608, label %612, label %609

609:                                              ; preds = %603
  %610 = sub nsw i32 %593, %607
  %611 = tail call i32 @llvm.abs.i32(i32 %610, i1 true)
  br label %625

612:                                              ; preds = %603
  %613 = icmp eq i32 %607, 0
  %614 = icmp sgt i32 %593, %46
  %615 = or i1 %614, %613
  br i1 %615, label %689, label %616

616:                                              ; preds = %612
  %617 = sub nsw i32 %593, %607
  %618 = tail call i32 @llvm.abs.i32(i32 %617, i1 true)
  %619 = icmp sgt i32 %618, %2
  br i1 %619, label %689, label %620

620:                                              ; preds = %616
  %621 = and i1 %57, %608
  %622 = and i1 %44, %621
  %623 = icmp slt i32 %46, %607
  %624 = select i1 %622, i1 %623, i1 false
  br i1 %624, label %689, label %625

625:                                              ; preds = %609, %620
  %626 = phi i32 [ %611, %609 ], [ %618, %620 ]
  %627 = icmp slt i32 %593, %607
  %628 = tail call i32 @llvm.smin.i32(i32 %593, i32 %607)
  %629 = lshr i64 %591, 32
  %630 = trunc nuw i64 %629 to i32
  %631 = and i32 %630, 255
  %632 = tail call i32 @llvm.smin.i32(i32 %631, i32 %628)
  %633 = icmp ne i32 %626, 0
  %634 = icmp slt i32 %631, %628
  %635 = select i1 %633, i1 true, i1 %634
  br i1 %635, label %636, label %677

636:                                              ; preds = %625
  %637 = uitofp nneg i32 %626 to float
  %638 = sitofp i32 %628 to float
  %639 = fmul float %638, %8
  %640 = tail call float @llvm.fmuladd.f32(float %7, float %637, float %639)
  %641 = icmp eq i32 %626, 0
  br i1 %641, label %655, label %642

642:                                              ; preds = %636
  %643 = add nuw nsw i32 %626, 1
  %644 = uitofp nneg i32 %643 to float
  %645 = bitcast float %644 to i32
  %646 = lshr i32 %645, 23
  %647 = add nsw i32 %646, -128
  %648 = uitofp i32 %647 to float
  %649 = and i32 %645, 8388607
  %650 = or disjoint i32 %649, 1065353216
  %651 = bitcast i32 %650 to float
  %652 = tail call float @llvm.fmuladd.f32(float %651, float 0xBFD611FF20000000, float 0x4000328400000000)
  %653 = tail call float @llvm.fmuladd.f32(float %652, float %651, float 0xBFE59898E0000000)
  %654 = fadd float %653, %648
  br label %655

655:                                              ; preds = %642, %636
  %656 = phi float [ %654, %642 ], [ 0.000000e+00, %636 ]
  %657 = and i1 %44, %608
  br i1 %657, label %673, label %658

658:                                              ; preds = %655
  %659 = icmp ne i32 %596, %599
  %660 = icmp eq i32 %607, 0
  %661 = select i1 %659, i1 %660, i1 false
  br i1 %661, label %680, label %662

662:                                              ; preds = %658
  %663 = or i1 %659, %627
  br i1 %663, label %668, label %664

664:                                              ; preds = %662
  %665 = tail call float @llvm.fmuladd.f32(float %656, float 5.000000e-01, float %640)
  %666 = fptosi float %665 to i32
  %667 = sub nsw i32 %632, %666
  br label %677

668:                                              ; preds = %662
  %669 = fcmp olt float %640, %656
  %670 = select i1 %669, float %640, float %656
  %671 = fptosi float %670 to i32
  %672 = sub nsw i32 %632, %671
  br label %677

673:                                              ; preds = %655
  %674 = tail call float @llvm.fmuladd.f32(float %656, float 5.000000e-01, float %640)
  %675 = fptosi float %674 to i32
  %676 = sub nsw i32 %632, %675
  br label %677

677:                                              ; preds = %673, %668, %664, %625
  %678 = phi i32 [ %632, %625 ], [ %672, %668 ], [ %667, %664 ], [ %676, %673 ]
  %679 = icmp eq i32 %678, -2147483648
  br i1 %679, label %689, label %680

680:                                              ; preds = %677, %658
  %681 = phi i32 [ %678, %677 ], [ 1, %658 ]
  %682 = getelementptr inbounds i32, ptr %50, i64 %583
  %683 = load i32, ptr %682, align 4, !tbaa !27
  %684 = add nsw i32 %683, %681
  %685 = icmp slt i32 %580, %684
  br i1 %685, label %686, label %689

686:                                              ; preds = %680
  %687 = getelementptr inbounds i32, ptr %50, i64 %388
  store i32 %684, ptr %687, align 4, !tbaa !27
  %688 = getelementptr inbounds i64, ptr %49, i64 %388
  store i64 %583, ptr %688, align 8, !tbaa !6
  br label %696

689:                                              ; preds = %567, %680, %677, %620, %616, %612, %587, %579
  %690 = phi i64 [ %583, %680 ], [ %583, %677 ], [ %583, %620 ], [ %583, %616 ], [ %583, %612 ], [ %583, %587 ], [ %583, %579 ], [ -1, %567 ]
  %691 = phi i64 [ %581, %680 ], [ %581, %677 ], [ %581, %620 ], [ %581, %616 ], [ %581, %612 ], [ %581, %587 ], [ %581, %579 ], [ %550, %567 ]
  %692 = phi i32 [ %580, %680 ], [ %580, %677 ], [ %580, %620 ], [ %580, %616 ], [ %580, %612 ], [ %580, %587 ], [ %580, %579 ], [ %551, %567 ]
  %693 = getelementptr inbounds i32, ptr %50, i64 %388
  store i32 %692, ptr %693, align 4, !tbaa !27
  %694 = getelementptr inbounds i64, ptr %49, i64 %388
  store i64 %691, ptr %694, align 8, !tbaa !6
  %695 = icmp sgt i64 %691, -1
  br i1 %695, label %696, label %703

696:                                              ; preds = %689, %686
  %697 = phi i64 [ %583, %686 ], [ %690, %689 ]
  %698 = phi i32 [ %684, %686 ], [ %692, %689 ]
  %699 = phi i64 [ %583, %686 ], [ %691, %689 ]
  %700 = getelementptr inbounds i32, ptr %51, i64 %699
  %701 = load i32, ptr %700, align 4, !tbaa !27
  %702 = tail call i32 @llvm.smax.i32(i32 %701, i32 %698)
  br label %703

703:                                              ; preds = %696, %689
  %704 = phi i64 [ %690, %689 ], [ %697, %696 ]
  %705 = phi i32 [ %692, %689 ], [ %698, %696 ]
  %706 = phi i32 [ %692, %689 ], [ %702, %696 ]
  %707 = getelementptr inbounds i32, ptr %51, i64 %388
  store i32 %706, ptr %707, align 4, !tbaa !27
  %708 = icmp slt i64 %704, 0
  br i1 %708, label %719, label %709

709:                                              ; preds = %703
  %710 = load i64, ptr %389, align 8, !tbaa !10
  %711 = getelementptr inbounds %struct.mm128_t, ptr %12, i64 %704
  %712 = load i64, ptr %711, align 8, !tbaa !10
  %713 = sub i64 %710, %712
  %714 = icmp ugt i64 %713, %55
  br i1 %714, label %720, label %715

715:                                              ; preds = %709
  %716 = getelementptr inbounds i32, ptr %50, i64 %704
  %717 = load i32, ptr %716, align 4, !tbaa !27
  %718 = icmp slt i32 %717, %705
  br i1 %718, label %719, label %720

719:                                              ; preds = %563, %715, %703
  br label %720

720:                                              ; preds = %719, %715, %709
  %721 = phi i64 [ %388, %719 ], [ %704, %715 ], [ %704, %709 ]
  %722 = or disjoint i64 %65, 2
  %723 = getelementptr inbounds %struct.mm128_t, ptr %12, i64 %722
  %724 = getelementptr inbounds i8, ptr %723, i64 8
  %725 = load i64, ptr %724, align 8, !tbaa !30
  %726 = lshr i64 %725, 32
  %727 = trunc nuw i64 %726 to i32
  %728 = and i32 %727, 255
  %729 = icmp slt i64 %415, %722
  br i1 %729, label %730, label %744

730:                                              ; preds = %720
  %731 = load i64, ptr %723, align 8, !tbaa !10
  br label %732

732:                                              ; preds = %741, %730
  %733 = phi i64 [ %415, %730 ], [ %742, %741 ]
  %734 = getelementptr inbounds %struct.mm128_t, ptr %12, i64 %733
  %735 = load i64, ptr %734, align 8, !tbaa !10
  %736 = xor i64 %735, %731
  %737 = icmp ugt i64 %736, 4294967295
  %738 = add i64 %735, %55
  %739 = icmp ugt i64 %731, %738
  %740 = or i1 %737, %739
  br i1 %740, label %741, label %744

741:                                              ; preds = %732
  %742 = add i64 %733, 1
  %743 = icmp eq i64 %742, %722
  br i1 %743, label %744, label %732, !llvm.loop !39

744:                                              ; preds = %732, %741, %720
  %745 = phi i64 [ %415, %720 ], [ %722, %741 ], [ %733, %732 ]
  %746 = sub nsw i64 %722, %745
  %747 = icmp sgt i64 %746, %56
  %748 = sub nsw i64 %722, %56
  %749 = select i1 %747, i64 %748, i64 %745
  %750 = icmp sgt i64 %722, %749
  br i1 %750, label %751, label %891

751:                                              ; preds = %744
  %752 = trunc i64 %725 to i32
  %753 = lshr i64 %725, 48
  %754 = trunc nuw nsw i64 %753 to i32
  %755 = and i32 %754, 255
  %756 = trunc i64 %722 to i32
  br label %757

757:                                              ; preds = %876, %751
  %758 = phi i32 [ 0, %751 ], [ %879, %876 ]
  %759 = phi i32 [ %728, %751 ], [ %878, %876 ]
  %760 = phi i64 [ -1, %751 ], [ %877, %876 ]
  %761 = phi i64 [ %388, %751 ], [ %880, %876 ]
  %762 = getelementptr inbounds %struct.mm128_t, ptr %12, i64 %761
  %763 = getelementptr inbounds i8, ptr %762, i64 8
  %764 = load i64, ptr %763, align 8, !tbaa !30
  %765 = trunc i64 %764 to i32
  %766 = sub nsw i32 %752, %765
  %767 = lshr i64 %764, 48
  %768 = trunc nuw nsw i64 %767 to i32
  %769 = and i32 %768, 255
  %770 = icmp slt i32 %766, 1
  %771 = icmp sgt i32 %766, %43
  %772 = or i1 %770, %771
  br i1 %772, label %876, label %773

773:                                              ; preds = %757
  %774 = load i64, ptr %723, align 8, !tbaa !10
  %775 = load i64, ptr %762, align 8, !tbaa !10
  %776 = sub i64 %774, %775
  %777 = trunc i64 %776 to i32
  %778 = icmp eq i32 %755, %769
  br i1 %778, label %782, label %779

779:                                              ; preds = %773
  %780 = sub nsw i32 %766, %777
  %781 = tail call i32 @llvm.abs.i32(i32 %780, i1 true)
  br label %795

782:                                              ; preds = %773
  %783 = icmp eq i32 %777, 0
  %784 = icmp sgt i32 %766, %46
  %785 = or i1 %784, %783
  br i1 %785, label %876, label %786

786:                                              ; preds = %782
  %787 = sub nsw i32 %766, %777
  %788 = tail call i32 @llvm.abs.i32(i32 %787, i1 true)
  %789 = icmp sgt i32 %788, %2
  br i1 %789, label %876, label %790

790:                                              ; preds = %786
  %791 = and i1 %57, %778
  %792 = and i1 %44, %791
  %793 = icmp slt i32 %46, %777
  %794 = select i1 %792, i1 %793, i1 false
  br i1 %794, label %876, label %795

795:                                              ; preds = %779, %790
  %796 = phi i32 [ %781, %779 ], [ %788, %790 ]
  %797 = icmp slt i32 %766, %777
  %798 = tail call i32 @llvm.smin.i32(i32 %766, i32 %777)
  %799 = lshr i64 %764, 32
  %800 = trunc nuw i64 %799 to i32
  %801 = and i32 %800, 255
  %802 = tail call i32 @llvm.smin.i32(i32 %801, i32 %798)
  %803 = icmp ne i32 %796, 0
  %804 = icmp slt i32 %801, %798
  %805 = select i1 %803, i1 true, i1 %804
  br i1 %805, label %806, label %847

806:                                              ; preds = %795
  %807 = uitofp nneg i32 %796 to float
  %808 = sitofp i32 %798 to float
  %809 = fmul float %808, %8
  %810 = tail call float @llvm.fmuladd.f32(float %7, float %807, float %809)
  %811 = icmp eq i32 %796, 0
  br i1 %811, label %825, label %812

812:                                              ; preds = %806
  %813 = add nuw nsw i32 %796, 1
  %814 = uitofp nneg i32 %813 to float
  %815 = bitcast float %814 to i32
  %816 = lshr i32 %815, 23
  %817 = add nsw i32 %816, -128
  %818 = uitofp i32 %817 to float
  %819 = and i32 %815, 8388607
  %820 = or disjoint i32 %819, 1065353216
  %821 = bitcast i32 %820 to float
  %822 = tail call float @llvm.fmuladd.f32(float %821, float 0xBFD611FF20000000, float 0x4000328400000000)
  %823 = tail call float @llvm.fmuladd.f32(float %822, float %821, float 0xBFE59898E0000000)
  %824 = fadd float %823, %818
  br label %825

825:                                              ; preds = %812, %806
  %826 = phi float [ %824, %812 ], [ 0.000000e+00, %806 ]
  %827 = and i1 %44, %778
  br i1 %827, label %843, label %828

828:                                              ; preds = %825
  %829 = icmp ne i32 %755, %769
  %830 = icmp eq i32 %777, 0
  %831 = select i1 %829, i1 %830, i1 false
  br i1 %831, label %850, label %832

832:                                              ; preds = %828
  %833 = or i1 %829, %797
  br i1 %833, label %838, label %834

834:                                              ; preds = %832
  %835 = tail call float @llvm.fmuladd.f32(float %826, float 5.000000e-01, float %810)
  %836 = fptosi float %835 to i32
  %837 = sub nsw i32 %802, %836
  br label %847

838:                                              ; preds = %832
  %839 = fcmp olt float %810, %826
  %840 = select i1 %839, float %810, float %826
  %841 = fptosi float %840 to i32
  %842 = sub nsw i32 %802, %841
  br label %847

843:                                              ; preds = %825
  %844 = tail call float @llvm.fmuladd.f32(float %826, float 5.000000e-01, float %810)
  %845 = fptosi float %844 to i32
  %846 = sub nsw i32 %802, %845
  br label %847

847:                                              ; preds = %843, %838, %834, %795
  %848 = phi i32 [ %802, %795 ], [ %842, %838 ], [ %837, %834 ], [ %846, %843 ]
  %849 = icmp eq i32 %848, -2147483648
  br i1 %849, label %876, label %850

850:                                              ; preds = %847, %828
  %851 = phi i32 [ %848, %847 ], [ 1, %828 ]
  %852 = getelementptr inbounds i32, ptr %50, i64 %761
  %853 = load i32, ptr %852, align 4, !tbaa !27
  %854 = add nsw i32 %853, %851
  %855 = icmp sgt i32 %854, %759
  br i1 %855, label %863, label %856

856:                                              ; preds = %850
  %857 = getelementptr inbounds i32, ptr %52, i64 %761
  %858 = load i32, ptr %857, align 4, !tbaa !27
  %859 = icmp eq i32 %858, %756
  br i1 %859, label %860, label %867

860:                                              ; preds = %856
  %861 = add nsw i32 %758, 1
  %862 = icmp slt i32 %758, %3
  br i1 %862, label %867, label %882

863:                                              ; preds = %850
  %864 = icmp sgt i32 %758, 0
  %865 = sext i1 %864 to i32
  %866 = add nsw i32 %758, %865
  br label %867

867:                                              ; preds = %863, %860, %856
  %868 = phi i64 [ %760, %860 ], [ %760, %856 ], [ %761, %863 ]
  %869 = phi i32 [ %759, %860 ], [ %759, %856 ], [ %854, %863 ]
  %870 = phi i32 [ %861, %860 ], [ %758, %856 ], [ %866, %863 ]
  %871 = getelementptr inbounds i64, ptr %49, i64 %761
  %872 = load i64, ptr %871, align 8, !tbaa !6
  %873 = icmp sgt i64 %872, -1
  br i1 %873, label %874, label %876

874:                                              ; preds = %867
  %875 = getelementptr inbounds i32, ptr %52, i64 %872
  store i32 %756, ptr %875, align 4, !tbaa !27
  br label %876

876:                                              ; preds = %874, %867, %847, %790, %786, %782, %757
  %877 = phi i64 [ %868, %867 ], [ %868, %874 ], [ %760, %847 ], [ %760, %757 ], [ %760, %782 ], [ %760, %786 ], [ %760, %790 ]
  %878 = phi i32 [ %869, %867 ], [ %869, %874 ], [ %759, %847 ], [ %759, %757 ], [ %759, %782 ], [ %759, %786 ], [ %759, %790 ]
  %879 = phi i32 [ %870, %867 ], [ %870, %874 ], [ %758, %847 ], [ %758, %757 ], [ %758, %782 ], [ %758, %786 ], [ %758, %790 ]
  %880 = add nsw i64 %761, -1
  %881 = icmp sgt i64 %761, %749
  br i1 %881, label %757, label %882, !llvm.loop !40

882:                                              ; preds = %876, %860
  %883 = phi i64 [ %880, %876 ], [ %761, %860 ]
  %884 = phi i64 [ %877, %876 ], [ %760, %860 ]
  %885 = phi i32 [ %878, %876 ], [ %759, %860 ]
  %886 = load i64, ptr %723, align 8, !tbaa !10
  %887 = getelementptr inbounds %struct.mm128_t, ptr %12, i64 %721
  %888 = load i64, ptr %887, align 8, !tbaa !10
  %889 = sub i64 %886, %888
  %890 = icmp ugt i64 %889, %55
  br i1 %890, label %901, label %913

891:                                              ; preds = %744
  %892 = load i64, ptr %723, align 8, !tbaa !10
  %893 = getelementptr inbounds %struct.mm128_t, ptr %12, i64 %721
  %894 = load i64, ptr %893, align 8, !tbaa !10
  %895 = sub i64 %892, %894
  %896 = icmp ugt i64 %895, %55
  br i1 %896, label %897, label %913

897:                                              ; preds = %891
  %898 = getelementptr inbounds i32, ptr %50, i64 %722
  store i32 %728, ptr %898, align 4, !tbaa !27
  %899 = getelementptr inbounds i64, ptr %49, i64 %722
  store i64 -1, ptr %899, align 8, !tbaa !6
  %900 = getelementptr inbounds i32, ptr %51, i64 %722
  store i32 %728, ptr %900, align 4, !tbaa !27
  br label %1053

901:                                              ; preds = %882
  br i1 %750, label %902, label %1023

902:                                              ; preds = %901, %902
  %903 = phi i32 [ %910, %902 ], [ -2147483648, %901 ]
  %904 = phi i64 [ %909, %902 ], [ -1, %901 ]
  %905 = phi i64 [ %911, %902 ], [ %388, %901 ]
  %906 = getelementptr inbounds i32, ptr %50, i64 %905
  %907 = load i32, ptr %906, align 4, !tbaa !27
  %908 = icmp slt i32 %903, %907
  %909 = select i1 %908, i64 %905, i64 %904
  %910 = tail call i32 @llvm.smax.i32(i32 %903, i32 %907)
  %911 = add nsw i64 %905, -1
  %912 = icmp sgt i64 %905, %749
  br i1 %912, label %902, label %913, !llvm.loop !41

913:                                              ; preds = %902, %891, %882
  %914 = phi i32 [ %885, %882 ], [ %728, %891 ], [ %885, %902 ]
  %915 = phi i64 [ %884, %882 ], [ -1, %891 ], [ %884, %902 ]
  %916 = phi i64 [ %883, %882 ], [ %388, %891 ], [ %883, %902 ]
  %917 = phi i64 [ %721, %882 ], [ %721, %891 ], [ %909, %902 ]
  %918 = icmp sgt i64 %917, -1
  %919 = icmp slt i64 %917, %916
  %920 = and i1 %918, %919
  br i1 %920, label %921, label %1023

921:                                              ; preds = %913
  %922 = getelementptr inbounds %struct.mm128_t, ptr %12, i64 %917
  %923 = trunc i64 %725 to i32
  %924 = getelementptr inbounds i8, ptr %922, i64 8
  %925 = load i64, ptr %924, align 8, !tbaa !30
  %926 = trunc i64 %925 to i32
  %927 = sub nsw i32 %923, %926
  %928 = lshr i64 %725, 48
  %929 = trunc nuw nsw i64 %928 to i32
  %930 = and i32 %929, 255
  %931 = lshr i64 %925, 48
  %932 = trunc nuw nsw i64 %931 to i32
  %933 = and i32 %932, 255
  %934 = icmp slt i32 %927, 1
  %935 = icmp sgt i32 %927, %43
  %936 = or i1 %934, %935
  br i1 %936, label %1023, label %937

937:                                              ; preds = %921
  %938 = load i64, ptr %723, align 8, !tbaa !10
  %939 = load i64, ptr %922, align 8, !tbaa !10
  %940 = sub i64 %938, %939
  %941 = trunc i64 %940 to i32
  %942 = icmp eq i32 %930, %933
  br i1 %942, label %946, label %943

943:                                              ; preds = %937
  %944 = sub nsw i32 %927, %941
  %945 = tail call i32 @llvm.abs.i32(i32 %944, i1 true)
  br label %959

946:                                              ; preds = %937
  %947 = icmp eq i32 %941, 0
  %948 = icmp sgt i32 %927, %46
  %949 = or i1 %948, %947
  br i1 %949, label %1023, label %950

950:                                              ; preds = %946
  %951 = sub nsw i32 %927, %941
  %952 = tail call i32 @llvm.abs.i32(i32 %951, i1 true)
  %953 = icmp sgt i32 %952, %2
  br i1 %953, label %1023, label %954

954:                                              ; preds = %950
  %955 = and i1 %57, %942
  %956 = and i1 %44, %955
  %957 = icmp slt i32 %46, %941
  %958 = select i1 %956, i1 %957, i1 false
  br i1 %958, label %1023, label %959

959:                                              ; preds = %943, %954
  %960 = phi i32 [ %945, %943 ], [ %952, %954 ]
  %961 = icmp slt i32 %927, %941
  %962 = tail call i32 @llvm.smin.i32(i32 %927, i32 %941)
  %963 = lshr i64 %925, 32
  %964 = trunc nuw i64 %963 to i32
  %965 = and i32 %964, 255
  %966 = tail call i32 @llvm.smin.i32(i32 %965, i32 %962)
  %967 = icmp ne i32 %960, 0
  %968 = icmp slt i32 %965, %962
  %969 = select i1 %967, i1 true, i1 %968
  br i1 %969, label %970, label %1011

970:                                              ; preds = %959
  %971 = uitofp nneg i32 %960 to float
  %972 = sitofp i32 %962 to float
  %973 = fmul float %972, %8
  %974 = tail call float @llvm.fmuladd.f32(float %7, float %971, float %973)
  %975 = icmp eq i32 %960, 0
  br i1 %975, label %989, label %976

976:                                              ; preds = %970
  %977 = add nuw nsw i32 %960, 1
  %978 = uitofp nneg i32 %977 to float
  %979 = bitcast float %978 to i32
  %980 = lshr i32 %979, 23
  %981 = add nsw i32 %980, -128
  %982 = uitofp i32 %981 to float
  %983 = and i32 %979, 8388607
  %984 = or disjoint i32 %983, 1065353216
  %985 = bitcast i32 %984 to float
  %986 = tail call float @llvm.fmuladd.f32(float %985, float 0xBFD611FF20000000, float 0x4000328400000000)
  %987 = tail call float @llvm.fmuladd.f32(float %986, float %985, float 0xBFE59898E0000000)
  %988 = fadd float %987, %982
  br label %989

989:                                              ; preds = %976, %970
  %990 = phi float [ %988, %976 ], [ 0.000000e+00, %970 ]
  %991 = and i1 %44, %942
  br i1 %991, label %1007, label %992

992:                                              ; preds = %989
  %993 = icmp ne i32 %930, %933
  %994 = icmp eq i32 %941, 0
  %995 = select i1 %993, i1 %994, i1 false
  br i1 %995, label %1014, label %996

996:                                              ; preds = %992
  %997 = or i1 %993, %961
  br i1 %997, label %1002, label %998

998:                                              ; preds = %996
  %999 = tail call float @llvm.fmuladd.f32(float %990, float 5.000000e-01, float %974)
  %1000 = fptosi float %999 to i32
  %1001 = sub nsw i32 %966, %1000
  br label %1011

1002:                                             ; preds = %996
  %1003 = fcmp olt float %974, %990
  %1004 = select i1 %1003, float %974, float %990
  %1005 = fptosi float %1004 to i32
  %1006 = sub nsw i32 %966, %1005
  br label %1011

1007:                                             ; preds = %989
  %1008 = tail call float @llvm.fmuladd.f32(float %990, float 5.000000e-01, float %974)
  %1009 = fptosi float %1008 to i32
  %1010 = sub nsw i32 %966, %1009
  br label %1011

1011:                                             ; preds = %1007, %1002, %998, %959
  %1012 = phi i32 [ %966, %959 ], [ %1006, %1002 ], [ %1001, %998 ], [ %1010, %1007 ]
  %1013 = icmp eq i32 %1012, -2147483648
  br i1 %1013, label %1023, label %1014

1014:                                             ; preds = %1011, %992
  %1015 = phi i32 [ %1012, %1011 ], [ 1, %992 ]
  %1016 = getelementptr inbounds i32, ptr %50, i64 %917
  %1017 = load i32, ptr %1016, align 4, !tbaa !27
  %1018 = add nsw i32 %1017, %1015
  %1019 = icmp slt i32 %914, %1018
  br i1 %1019, label %1020, label %1023

1020:                                             ; preds = %1014
  %1021 = getelementptr inbounds i32, ptr %50, i64 %722
  store i32 %1018, ptr %1021, align 4, !tbaa !27
  %1022 = getelementptr inbounds i64, ptr %49, i64 %722
  store i64 %917, ptr %1022, align 8, !tbaa !6
  br label %1030

1023:                                             ; preds = %901, %1014, %1011, %954, %950, %946, %921, %913
  %1024 = phi i64 [ %917, %1014 ], [ %917, %1011 ], [ %917, %954 ], [ %917, %950 ], [ %917, %946 ], [ %917, %921 ], [ %917, %913 ], [ -1, %901 ]
  %1025 = phi i64 [ %915, %1014 ], [ %915, %1011 ], [ %915, %954 ], [ %915, %950 ], [ %915, %946 ], [ %915, %921 ], [ %915, %913 ], [ %884, %901 ]
  %1026 = phi i32 [ %914, %1014 ], [ %914, %1011 ], [ %914, %954 ], [ %914, %950 ], [ %914, %946 ], [ %914, %921 ], [ %914, %913 ], [ %885, %901 ]
  %1027 = getelementptr inbounds i32, ptr %50, i64 %722
  store i32 %1026, ptr %1027, align 4, !tbaa !27
  %1028 = getelementptr inbounds i64, ptr %49, i64 %722
  store i64 %1025, ptr %1028, align 8, !tbaa !6
  %1029 = icmp sgt i64 %1025, -1
  br i1 %1029, label %1030, label %1037

1030:                                             ; preds = %1023, %1020
  %1031 = phi i64 [ %917, %1020 ], [ %1024, %1023 ]
  %1032 = phi i32 [ %1018, %1020 ], [ %1026, %1023 ]
  %1033 = phi i64 [ %917, %1020 ], [ %1025, %1023 ]
  %1034 = getelementptr inbounds i32, ptr %51, i64 %1033
  %1035 = load i32, ptr %1034, align 4, !tbaa !27
  %1036 = tail call i32 @llvm.smax.i32(i32 %1035, i32 %1032)
  br label %1037

1037:                                             ; preds = %1030, %1023
  %1038 = phi i64 [ %1024, %1023 ], [ %1031, %1030 ]
  %1039 = phi i32 [ %1026, %1023 ], [ %1032, %1030 ]
  %1040 = phi i32 [ %1026, %1023 ], [ %1036, %1030 ]
  %1041 = getelementptr inbounds i32, ptr %51, i64 %722
  store i32 %1040, ptr %1041, align 4, !tbaa !27
  %1042 = icmp slt i64 %1038, 0
  br i1 %1042, label %1053, label %1043

1043:                                             ; preds = %1037
  %1044 = load i64, ptr %723, align 8, !tbaa !10
  %1045 = getelementptr inbounds %struct.mm128_t, ptr %12, i64 %1038
  %1046 = load i64, ptr %1045, align 8, !tbaa !10
  %1047 = sub i64 %1044, %1046
  %1048 = icmp ugt i64 %1047, %55
  br i1 %1048, label %1054, label %1049

1049:                                             ; preds = %1043
  %1050 = getelementptr inbounds i32, ptr %50, i64 %1038
  %1051 = load i32, ptr %1050, align 4, !tbaa !27
  %1052 = icmp slt i32 %1051, %1039
  br i1 %1052, label %1053, label %1054

1053:                                             ; preds = %897, %1049, %1037
  br label %1054

1054:                                             ; preds = %1053, %1049, %1043
  %1055 = phi i64 [ %722, %1053 ], [ %1038, %1049 ], [ %1038, %1043 ]
  %1056 = or disjoint i64 %65, 3
  %1057 = getelementptr inbounds %struct.mm128_t, ptr %12, i64 %1056
  %1058 = getelementptr inbounds i8, ptr %1057, i64 8
  %1059 = load i64, ptr %1058, align 8, !tbaa !30
  %1060 = lshr i64 %1059, 32
  %1061 = trunc nuw i64 %1060 to i32
  %1062 = and i32 %1061, 255
  %1063 = icmp slt i64 %749, %1056
  br i1 %1063, label %1064, label %1078

1064:                                             ; preds = %1054
  %1065 = load i64, ptr %1057, align 8, !tbaa !10
  br label %1066

1066:                                             ; preds = %1075, %1064
  %1067 = phi i64 [ %749, %1064 ], [ %1076, %1075 ]
  %1068 = getelementptr inbounds %struct.mm128_t, ptr %12, i64 %1067
  %1069 = load i64, ptr %1068, align 8, !tbaa !10
  %1070 = xor i64 %1069, %1065
  %1071 = icmp ugt i64 %1070, 4294967295
  %1072 = add i64 %1069, %55
  %1073 = icmp ugt i64 %1065, %1072
  %1074 = or i1 %1071, %1073
  br i1 %1074, label %1075, label %1078

1075:                                             ; preds = %1066
  %1076 = add i64 %1067, 1
  %1077 = icmp eq i64 %1076, %1056
  br i1 %1077, label %1078, label %1066, !llvm.loop !39

1078:                                             ; preds = %1066, %1075, %1054
  %1079 = phi i64 [ %749, %1054 ], [ %1056, %1075 ], [ %1067, %1066 ]
  %1080 = sub nsw i64 %1056, %1079
  %1081 = icmp sgt i64 %1080, %56
  %1082 = sub nsw i64 %1056, %56
  %1083 = select i1 %1081, i64 %1082, i64 %1079
  %1084 = icmp sgt i64 %1056, %1083
  br i1 %1084, label %1085, label %1225

1085:                                             ; preds = %1078
  %1086 = trunc i64 %1059 to i32
  %1087 = lshr i64 %1059, 48
  %1088 = trunc nuw nsw i64 %1087 to i32
  %1089 = and i32 %1088, 255
  %1090 = trunc i64 %1056 to i32
  br label %1091

1091:                                             ; preds = %1210, %1085
  %1092 = phi i32 [ 0, %1085 ], [ %1213, %1210 ]
  %1093 = phi i32 [ %1062, %1085 ], [ %1212, %1210 ]
  %1094 = phi i64 [ -1, %1085 ], [ %1211, %1210 ]
  %1095 = phi i64 [ %722, %1085 ], [ %1214, %1210 ]
  %1096 = getelementptr inbounds %struct.mm128_t, ptr %12, i64 %1095
  %1097 = getelementptr inbounds i8, ptr %1096, i64 8
  %1098 = load i64, ptr %1097, align 8, !tbaa !30
  %1099 = trunc i64 %1098 to i32
  %1100 = sub nsw i32 %1086, %1099
  %1101 = lshr i64 %1098, 48
  %1102 = trunc nuw nsw i64 %1101 to i32
  %1103 = and i32 %1102, 255
  %1104 = icmp slt i32 %1100, 1
  %1105 = icmp sgt i32 %1100, %43
  %1106 = or i1 %1104, %1105
  br i1 %1106, label %1210, label %1107

1107:                                             ; preds = %1091
  %1108 = load i64, ptr %1057, align 8, !tbaa !10
  %1109 = load i64, ptr %1096, align 8, !tbaa !10
  %1110 = sub i64 %1108, %1109
  %1111 = trunc i64 %1110 to i32
  %1112 = icmp eq i32 %1089, %1103
  br i1 %1112, label %1116, label %1113

1113:                                             ; preds = %1107
  %1114 = sub nsw i32 %1100, %1111
  %1115 = tail call i32 @llvm.abs.i32(i32 %1114, i1 true)
  br label %1129

1116:                                             ; preds = %1107
  %1117 = icmp eq i32 %1111, 0
  %1118 = icmp sgt i32 %1100, %46
  %1119 = or i1 %1118, %1117
  br i1 %1119, label %1210, label %1120

1120:                                             ; preds = %1116
  %1121 = sub nsw i32 %1100, %1111
  %1122 = tail call i32 @llvm.abs.i32(i32 %1121, i1 true)
  %1123 = icmp sgt i32 %1122, %2
  br i1 %1123, label %1210, label %1124

1124:                                             ; preds = %1120
  %1125 = and i1 %57, %1112
  %1126 = and i1 %44, %1125
  %1127 = icmp slt i32 %46, %1111
  %1128 = select i1 %1126, i1 %1127, i1 false
  br i1 %1128, label %1210, label %1129

1129:                                             ; preds = %1113, %1124
  %1130 = phi i32 [ %1115, %1113 ], [ %1122, %1124 ]
  %1131 = icmp slt i32 %1100, %1111
  %1132 = tail call i32 @llvm.smin.i32(i32 %1100, i32 %1111)
  %1133 = lshr i64 %1098, 32
  %1134 = trunc nuw i64 %1133 to i32
  %1135 = and i32 %1134, 255
  %1136 = tail call i32 @llvm.smin.i32(i32 %1135, i32 %1132)
  %1137 = icmp ne i32 %1130, 0
  %1138 = icmp slt i32 %1135, %1132
  %1139 = select i1 %1137, i1 true, i1 %1138
  br i1 %1139, label %1140, label %1181

1140:                                             ; preds = %1129
  %1141 = uitofp nneg i32 %1130 to float
  %1142 = sitofp i32 %1132 to float
  %1143 = fmul float %1142, %8
  %1144 = tail call float @llvm.fmuladd.f32(float %7, float %1141, float %1143)
  %1145 = icmp eq i32 %1130, 0
  br i1 %1145, label %1159, label %1146

1146:                                             ; preds = %1140
  %1147 = add nuw nsw i32 %1130, 1
  %1148 = uitofp nneg i32 %1147 to float
  %1149 = bitcast float %1148 to i32
  %1150 = lshr i32 %1149, 23
  %1151 = add nsw i32 %1150, -128
  %1152 = uitofp i32 %1151 to float
  %1153 = and i32 %1149, 8388607
  %1154 = or disjoint i32 %1153, 1065353216
  %1155 = bitcast i32 %1154 to float
  %1156 = tail call float @llvm.fmuladd.f32(float %1155, float 0xBFD611FF20000000, float 0x4000328400000000)
  %1157 = tail call float @llvm.fmuladd.f32(float %1156, float %1155, float 0xBFE59898E0000000)
  %1158 = fadd float %1157, %1152
  br label %1159

1159:                                             ; preds = %1146, %1140
  %1160 = phi float [ %1158, %1146 ], [ 0.000000e+00, %1140 ]
  %1161 = and i1 %44, %1112
  br i1 %1161, label %1177, label %1162

1162:                                             ; preds = %1159
  %1163 = icmp ne i32 %1089, %1103
  %1164 = icmp eq i32 %1111, 0
  %1165 = select i1 %1163, i1 %1164, i1 false
  br i1 %1165, label %1184, label %1166

1166:                                             ; preds = %1162
  %1167 = or i1 %1163, %1131
  br i1 %1167, label %1172, label %1168

1168:                                             ; preds = %1166
  %1169 = tail call float @llvm.fmuladd.f32(float %1160, float 5.000000e-01, float %1144)
  %1170 = fptosi float %1169 to i32
  %1171 = sub nsw i32 %1136, %1170
  br label %1181

1172:                                             ; preds = %1166
  %1173 = fcmp olt float %1144, %1160
  %1174 = select i1 %1173, float %1144, float %1160
  %1175 = fptosi float %1174 to i32
  %1176 = sub nsw i32 %1136, %1175
  br label %1181

1177:                                             ; preds = %1159
  %1178 = tail call float @llvm.fmuladd.f32(float %1160, float 5.000000e-01, float %1144)
  %1179 = fptosi float %1178 to i32
  %1180 = sub nsw i32 %1136, %1179
  br label %1181

1181:                                             ; preds = %1177, %1172, %1168, %1129
  %1182 = phi i32 [ %1136, %1129 ], [ %1176, %1172 ], [ %1171, %1168 ], [ %1180, %1177 ]
  %1183 = icmp eq i32 %1182, -2147483648
  br i1 %1183, label %1210, label %1184

1184:                                             ; preds = %1181, %1162
  %1185 = phi i32 [ %1182, %1181 ], [ 1, %1162 ]
  %1186 = getelementptr inbounds i32, ptr %50, i64 %1095
  %1187 = load i32, ptr %1186, align 4, !tbaa !27
  %1188 = add nsw i32 %1187, %1185
  %1189 = icmp sgt i32 %1188, %1093
  br i1 %1189, label %1197, label %1190

1190:                                             ; preds = %1184
  %1191 = getelementptr inbounds i32, ptr %52, i64 %1095
  %1192 = load i32, ptr %1191, align 4, !tbaa !27
  %1193 = icmp eq i32 %1192, %1090
  br i1 %1193, label %1194, label %1201

1194:                                             ; preds = %1190
  %1195 = add nsw i32 %1092, 1
  %1196 = icmp slt i32 %1092, %3
  br i1 %1196, label %1201, label %1216

1197:                                             ; preds = %1184
  %1198 = icmp sgt i32 %1092, 0
  %1199 = sext i1 %1198 to i32
  %1200 = add nsw i32 %1092, %1199
  br label %1201

1201:                                             ; preds = %1197, %1194, %1190
  %1202 = phi i64 [ %1094, %1194 ], [ %1094, %1190 ], [ %1095, %1197 ]
  %1203 = phi i32 [ %1093, %1194 ], [ %1093, %1190 ], [ %1188, %1197 ]
  %1204 = phi i32 [ %1195, %1194 ], [ %1092, %1190 ], [ %1200, %1197 ]
  %1205 = getelementptr inbounds i64, ptr %49, i64 %1095
  %1206 = load i64, ptr %1205, align 8, !tbaa !6
  %1207 = icmp sgt i64 %1206, -1
  br i1 %1207, label %1208, label %1210

1208:                                             ; preds = %1201
  %1209 = getelementptr inbounds i32, ptr %52, i64 %1206
  store i32 %1090, ptr %1209, align 4, !tbaa !27
  br label %1210

1210:                                             ; preds = %1208, %1201, %1181, %1124, %1120, %1116, %1091
  %1211 = phi i64 [ %1202, %1201 ], [ %1202, %1208 ], [ %1094, %1181 ], [ %1094, %1091 ], [ %1094, %1116 ], [ %1094, %1120 ], [ %1094, %1124 ]
  %1212 = phi i32 [ %1203, %1201 ], [ %1203, %1208 ], [ %1093, %1181 ], [ %1093, %1091 ], [ %1093, %1116 ], [ %1093, %1120 ], [ %1093, %1124 ]
  %1213 = phi i32 [ %1204, %1201 ], [ %1204, %1208 ], [ %1092, %1181 ], [ %1092, %1091 ], [ %1092, %1116 ], [ %1092, %1120 ], [ %1092, %1124 ]
  %1214 = add nsw i64 %1095, -1
  %1215 = icmp sgt i64 %1095, %1083
  br i1 %1215, label %1091, label %1216, !llvm.loop !40

1216:                                             ; preds = %1210, %1194
  %1217 = phi i64 [ %1214, %1210 ], [ %1095, %1194 ]
  %1218 = phi i64 [ %1211, %1210 ], [ %1094, %1194 ]
  %1219 = phi i32 [ %1212, %1210 ], [ %1093, %1194 ]
  %1220 = load i64, ptr %1057, align 8, !tbaa !10
  %1221 = getelementptr inbounds %struct.mm128_t, ptr %12, i64 %1055
  %1222 = load i64, ptr %1221, align 8, !tbaa !10
  %1223 = sub i64 %1220, %1222
  %1224 = icmp ugt i64 %1223, %55
  br i1 %1224, label %1235, label %1247

1225:                                             ; preds = %1078
  %1226 = load i64, ptr %1057, align 8, !tbaa !10
  %1227 = getelementptr inbounds %struct.mm128_t, ptr %12, i64 %1055
  %1228 = load i64, ptr %1227, align 8, !tbaa !10
  %1229 = sub i64 %1226, %1228
  %1230 = icmp ugt i64 %1229, %55
  br i1 %1230, label %1231, label %1247

1231:                                             ; preds = %1225
  %1232 = getelementptr inbounds i32, ptr %50, i64 %1056
  store i32 %1062, ptr %1232, align 4, !tbaa !27
  %1233 = getelementptr inbounds i64, ptr %49, i64 %1056
  store i64 -1, ptr %1233, align 8, !tbaa !6
  %1234 = getelementptr inbounds i32, ptr %51, i64 %1056
  store i32 %1062, ptr %1234, align 4, !tbaa !27
  br label %1387

1235:                                             ; preds = %1216
  br i1 %1084, label %1236, label %1357

1236:                                             ; preds = %1235, %1236
  %1237 = phi i32 [ %1244, %1236 ], [ -2147483648, %1235 ]
  %1238 = phi i64 [ %1243, %1236 ], [ -1, %1235 ]
  %1239 = phi i64 [ %1245, %1236 ], [ %722, %1235 ]
  %1240 = getelementptr inbounds i32, ptr %50, i64 %1239
  %1241 = load i32, ptr %1240, align 4, !tbaa !27
  %1242 = icmp slt i32 %1237, %1241
  %1243 = select i1 %1242, i64 %1239, i64 %1238
  %1244 = tail call i32 @llvm.smax.i32(i32 %1237, i32 %1241)
  %1245 = add nsw i64 %1239, -1
  %1246 = icmp sgt i64 %1239, %1083
  br i1 %1246, label %1236, label %1247, !llvm.loop !41

1247:                                             ; preds = %1236, %1225, %1216
  %1248 = phi i32 [ %1219, %1216 ], [ %1062, %1225 ], [ %1219, %1236 ]
  %1249 = phi i64 [ %1218, %1216 ], [ -1, %1225 ], [ %1218, %1236 ]
  %1250 = phi i64 [ %1217, %1216 ], [ %722, %1225 ], [ %1217, %1236 ]
  %1251 = phi i64 [ %1055, %1216 ], [ %1055, %1225 ], [ %1243, %1236 ]
  %1252 = icmp sgt i64 %1251, -1
  %1253 = icmp slt i64 %1251, %1250
  %1254 = and i1 %1252, %1253
  br i1 %1254, label %1255, label %1357

1255:                                             ; preds = %1247
  %1256 = getelementptr inbounds %struct.mm128_t, ptr %12, i64 %1251
  %1257 = trunc i64 %1059 to i32
  %1258 = getelementptr inbounds i8, ptr %1256, i64 8
  %1259 = load i64, ptr %1258, align 8, !tbaa !30
  %1260 = trunc i64 %1259 to i32
  %1261 = sub nsw i32 %1257, %1260
  %1262 = lshr i64 %1059, 48
  %1263 = trunc nuw nsw i64 %1262 to i32
  %1264 = and i32 %1263, 255
  %1265 = lshr i64 %1259, 48
  %1266 = trunc nuw nsw i64 %1265 to i32
  %1267 = and i32 %1266, 255
  %1268 = icmp slt i32 %1261, 1
  %1269 = icmp sgt i32 %1261, %43
  %1270 = or i1 %1268, %1269
  br i1 %1270, label %1357, label %1271

1271:                                             ; preds = %1255
  %1272 = load i64, ptr %1057, align 8, !tbaa !10
  %1273 = load i64, ptr %1256, align 8, !tbaa !10
  %1274 = sub i64 %1272, %1273
  %1275 = trunc i64 %1274 to i32
  %1276 = icmp eq i32 %1264, %1267
  br i1 %1276, label %1280, label %1277

1277:                                             ; preds = %1271
  %1278 = sub nsw i32 %1261, %1275
  %1279 = tail call i32 @llvm.abs.i32(i32 %1278, i1 true)
  br label %1293

1280:                                             ; preds = %1271
  %1281 = icmp eq i32 %1275, 0
  %1282 = icmp sgt i32 %1261, %46
  %1283 = or i1 %1282, %1281
  br i1 %1283, label %1357, label %1284

1284:                                             ; preds = %1280
  %1285 = sub nsw i32 %1261, %1275
  %1286 = tail call i32 @llvm.abs.i32(i32 %1285, i1 true)
  %1287 = icmp sgt i32 %1286, %2
  br i1 %1287, label %1357, label %1288

1288:                                             ; preds = %1284
  %1289 = and i1 %57, %1276
  %1290 = and i1 %44, %1289
  %1291 = icmp slt i32 %46, %1275
  %1292 = select i1 %1290, i1 %1291, i1 false
  br i1 %1292, label %1357, label %1293

1293:                                             ; preds = %1277, %1288
  %1294 = phi i32 [ %1279, %1277 ], [ %1286, %1288 ]
  %1295 = icmp slt i32 %1261, %1275
  %1296 = tail call i32 @llvm.smin.i32(i32 %1261, i32 %1275)
  %1297 = lshr i64 %1259, 32
  %1298 = trunc nuw i64 %1297 to i32
  %1299 = and i32 %1298, 255
  %1300 = tail call i32 @llvm.smin.i32(i32 %1299, i32 %1296)
  %1301 = icmp ne i32 %1294, 0
  %1302 = icmp slt i32 %1299, %1296
  %1303 = select i1 %1301, i1 true, i1 %1302
  br i1 %1303, label %1304, label %1345

1304:                                             ; preds = %1293
  %1305 = uitofp nneg i32 %1294 to float
  %1306 = sitofp i32 %1296 to float
  %1307 = fmul float %1306, %8
  %1308 = tail call float @llvm.fmuladd.f32(float %7, float %1305, float %1307)
  %1309 = icmp eq i32 %1294, 0
  br i1 %1309, label %1323, label %1310

1310:                                             ; preds = %1304
  %1311 = add nuw nsw i32 %1294, 1
  %1312 = uitofp nneg i32 %1311 to float
  %1313 = bitcast float %1312 to i32
  %1314 = lshr i32 %1313, 23
  %1315 = add nsw i32 %1314, -128
  %1316 = uitofp i32 %1315 to float
  %1317 = and i32 %1313, 8388607
  %1318 = or disjoint i32 %1317, 1065353216
  %1319 = bitcast i32 %1318 to float
  %1320 = tail call float @llvm.fmuladd.f32(float %1319, float 0xBFD611FF20000000, float 0x4000328400000000)
  %1321 = tail call float @llvm.fmuladd.f32(float %1320, float %1319, float 0xBFE59898E0000000)
  %1322 = fadd float %1321, %1316
  br label %1323

1323:                                             ; preds = %1310, %1304
  %1324 = phi float [ %1322, %1310 ], [ 0.000000e+00, %1304 ]
  %1325 = and i1 %44, %1276
  br i1 %1325, label %1341, label %1326

1326:                                             ; preds = %1323
  %1327 = icmp ne i32 %1264, %1267
  %1328 = icmp eq i32 %1275, 0
  %1329 = select i1 %1327, i1 %1328, i1 false
  br i1 %1329, label %1348, label %1330

1330:                                             ; preds = %1326
  %1331 = or i1 %1327, %1295
  br i1 %1331, label %1336, label %1332

1332:                                             ; preds = %1330
  %1333 = tail call float @llvm.fmuladd.f32(float %1324, float 5.000000e-01, float %1308)
  %1334 = fptosi float %1333 to i32
  %1335 = sub nsw i32 %1300, %1334
  br label %1345

1336:                                             ; preds = %1330
  %1337 = fcmp olt float %1308, %1324
  %1338 = select i1 %1337, float %1308, float %1324
  %1339 = fptosi float %1338 to i32
  %1340 = sub nsw i32 %1300, %1339
  br label %1345

1341:                                             ; preds = %1323
  %1342 = tail call float @llvm.fmuladd.f32(float %1324, float 5.000000e-01, float %1308)
  %1343 = fptosi float %1342 to i32
  %1344 = sub nsw i32 %1300, %1343
  br label %1345

1345:                                             ; preds = %1341, %1336, %1332, %1293
  %1346 = phi i32 [ %1300, %1293 ], [ %1340, %1336 ], [ %1335, %1332 ], [ %1344, %1341 ]
  %1347 = icmp eq i32 %1346, -2147483648
  br i1 %1347, label %1357, label %1348

1348:                                             ; preds = %1345, %1326
  %1349 = phi i32 [ %1346, %1345 ], [ 1, %1326 ]
  %1350 = getelementptr inbounds i32, ptr %50, i64 %1251
  %1351 = load i32, ptr %1350, align 4, !tbaa !27
  %1352 = add nsw i32 %1351, %1349
  %1353 = icmp slt i32 %1248, %1352
  br i1 %1353, label %1354, label %1357

1354:                                             ; preds = %1348
  %1355 = getelementptr inbounds i32, ptr %50, i64 %1056
  store i32 %1352, ptr %1355, align 4, !tbaa !27
  %1356 = getelementptr inbounds i64, ptr %49, i64 %1056
  store i64 %1251, ptr %1356, align 8, !tbaa !6
  br label %1364

1357:                                             ; preds = %1235, %1348, %1345, %1288, %1284, %1280, %1255, %1247
  %1358 = phi i64 [ %1251, %1348 ], [ %1251, %1345 ], [ %1251, %1288 ], [ %1251, %1284 ], [ %1251, %1280 ], [ %1251, %1255 ], [ %1251, %1247 ], [ -1, %1235 ]
  %1359 = phi i64 [ %1249, %1348 ], [ %1249, %1345 ], [ %1249, %1288 ], [ %1249, %1284 ], [ %1249, %1280 ], [ %1249, %1255 ], [ %1249, %1247 ], [ %1218, %1235 ]
  %1360 = phi i32 [ %1248, %1348 ], [ %1248, %1345 ], [ %1248, %1288 ], [ %1248, %1284 ], [ %1248, %1280 ], [ %1248, %1255 ], [ %1248, %1247 ], [ %1219, %1235 ]
  %1361 = getelementptr inbounds i32, ptr %50, i64 %1056
  store i32 %1360, ptr %1361, align 4, !tbaa !27
  %1362 = getelementptr inbounds i64, ptr %49, i64 %1056
  store i64 %1359, ptr %1362, align 8, !tbaa !6
  %1363 = icmp sgt i64 %1359, -1
  br i1 %1363, label %1364, label %1371

1364:                                             ; preds = %1357, %1354
  %1365 = phi i64 [ %1251, %1354 ], [ %1358, %1357 ]
  %1366 = phi i32 [ %1352, %1354 ], [ %1360, %1357 ]
  %1367 = phi i64 [ %1251, %1354 ], [ %1359, %1357 ]
  %1368 = getelementptr inbounds i32, ptr %51, i64 %1367
  %1369 = load i32, ptr %1368, align 4, !tbaa !27
  %1370 = tail call i32 @llvm.smax.i32(i32 %1369, i32 %1366)
  br label %1371

1371:                                             ; preds = %1364, %1357
  %1372 = phi i64 [ %1358, %1357 ], [ %1365, %1364 ]
  %1373 = phi i32 [ %1360, %1357 ], [ %1366, %1364 ]
  %1374 = phi i32 [ %1360, %1357 ], [ %1370, %1364 ]
  %1375 = getelementptr inbounds i32, ptr %51, i64 %1056
  store i32 %1374, ptr %1375, align 4, !tbaa !27
  %1376 = icmp slt i64 %1372, 0
  br i1 %1376, label %1387, label %1377

1377:                                             ; preds = %1371
  %1378 = load i64, ptr %1057, align 8, !tbaa !10
  %1379 = getelementptr inbounds %struct.mm128_t, ptr %12, i64 %1372
  %1380 = load i64, ptr %1379, align 8, !tbaa !10
  %1381 = sub i64 %1378, %1380
  %1382 = icmp ugt i64 %1381, %55
  br i1 %1382, label %1388, label %1383

1383:                                             ; preds = %1377
  %1384 = getelementptr inbounds i32, ptr %50, i64 %1372
  %1385 = load i32, ptr %1384, align 4, !tbaa !27
  %1386 = icmp slt i32 %1385, %1373
  br i1 %1386, label %1387, label %1388

1387:                                             ; preds = %1231, %1383, %1371
  br label %1388

1388:                                             ; preds = %1387, %1383, %1377
  %1389 = phi i64 [ %1056, %1387 ], [ %1372, %1383 ], [ %1372, %1377 ]
  %1390 = add nuw nsw i64 %65, 4
  %1391 = add i64 %66, 4
  %1392 = icmp eq i64 %1391, %61
  br i1 %1392, label %1393, label %62, !llvm.loop !42

1393:                                             ; preds = %1388, %54
  %1394 = phi i64 [ 0, %54 ], [ %1083, %1388 ]
  %1395 = phi i64 [ -1, %54 ], [ %1389, %1388 ]
  %1396 = phi i64 [ 0, %54 ], [ %1390, %1388 ]
  %1397 = icmp eq i64 %58, 0
  br i1 %1397, label %1727, label %1398

1398:                                             ; preds = %1393, %1722
  %1399 = phi i64 [ %1429, %1722 ], [ %1394, %1393 ]
  %1400 = phi i64 [ %1723, %1722 ], [ %1395, %1393 ]
  %1401 = phi i64 [ %1724, %1722 ], [ %1396, %1393 ]
  %1402 = phi i64 [ %1725, %1722 ], [ 0, %1393 ]
  %1403 = getelementptr inbounds %struct.mm128_t, ptr %12, i64 %1401
  %1404 = getelementptr inbounds i8, ptr %1403, i64 8
  %1405 = load i64, ptr %1404, align 8, !tbaa !30
  %1406 = lshr i64 %1405, 32
  %1407 = trunc nuw i64 %1406 to i32
  %1408 = and i32 %1407, 255
  %1409 = icmp slt i64 %1399, %1401
  br i1 %1409, label %1410, label %1424

1410:                                             ; preds = %1398
  %1411 = load i64, ptr %1403, align 8, !tbaa !10
  br label %1412

1412:                                             ; preds = %1421, %1410
  %1413 = phi i64 [ %1399, %1410 ], [ %1422, %1421 ]
  %1414 = getelementptr inbounds %struct.mm128_t, ptr %12, i64 %1413
  %1415 = load i64, ptr %1414, align 8, !tbaa !10
  %1416 = xor i64 %1415, %1411
  %1417 = icmp ugt i64 %1416, 4294967295
  %1418 = add i64 %1415, %55
  %1419 = icmp ugt i64 %1411, %1418
  %1420 = or i1 %1417, %1419
  br i1 %1420, label %1421, label %1424

1421:                                             ; preds = %1412
  %1422 = add i64 %1413, 1
  %1423 = icmp eq i64 %1422, %1401
  br i1 %1423, label %1424, label %1412, !llvm.loop !39

1424:                                             ; preds = %1412, %1421, %1398
  %1425 = phi i64 [ %1399, %1398 ], [ %1401, %1421 ], [ %1413, %1412 ]
  %1426 = sub nsw i64 %1401, %1425
  %1427 = icmp sgt i64 %1426, %56
  %1428 = sub nsw i64 %1401, %56
  %1429 = select i1 %1427, i64 %1428, i64 %1425
  %1430 = add nsw i64 %1401, -1
  %1431 = icmp sgt i64 %1401, %1429
  br i1 %1431, label %1432, label %1563

1432:                                             ; preds = %1424
  %1433 = trunc i64 %1405 to i32
  %1434 = lshr i64 %1405, 48
  %1435 = trunc nuw nsw i64 %1434 to i32
  %1436 = and i32 %1435, 255
  %1437 = trunc i64 %1401 to i32
  br label %1438

1438:                                             ; preds = %1557, %1432
  %1439 = phi i32 [ 0, %1432 ], [ %1560, %1557 ]
  %1440 = phi i32 [ %1408, %1432 ], [ %1559, %1557 ]
  %1441 = phi i64 [ -1, %1432 ], [ %1558, %1557 ]
  %1442 = phi i64 [ %1430, %1432 ], [ %1561, %1557 ]
  %1443 = getelementptr inbounds %struct.mm128_t, ptr %12, i64 %1442
  %1444 = getelementptr inbounds i8, ptr %1443, i64 8
  %1445 = load i64, ptr %1444, align 8, !tbaa !30
  %1446 = trunc i64 %1445 to i32
  %1447 = sub nsw i32 %1433, %1446
  %1448 = lshr i64 %1445, 48
  %1449 = trunc nuw nsw i64 %1448 to i32
  %1450 = and i32 %1449, 255
  %1451 = icmp slt i32 %1447, 1
  %1452 = icmp sgt i32 %1447, %43
  %1453 = or i1 %1451, %1452
  br i1 %1453, label %1557, label %1454

1454:                                             ; preds = %1438
  %1455 = load i64, ptr %1403, align 8, !tbaa !10
  %1456 = load i64, ptr %1443, align 8, !tbaa !10
  %1457 = sub i64 %1455, %1456
  %1458 = trunc i64 %1457 to i32
  %1459 = icmp eq i32 %1436, %1450
  br i1 %1459, label %1463, label %1460

1460:                                             ; preds = %1454
  %1461 = sub nsw i32 %1447, %1458
  %1462 = tail call i32 @llvm.abs.i32(i32 %1461, i1 true)
  br label %1476

1463:                                             ; preds = %1454
  %1464 = icmp eq i32 %1458, 0
  %1465 = icmp sgt i32 %1447, %46
  %1466 = or i1 %1465, %1464
  br i1 %1466, label %1557, label %1467

1467:                                             ; preds = %1463
  %1468 = sub nsw i32 %1447, %1458
  %1469 = tail call i32 @llvm.abs.i32(i32 %1468, i1 true)
  %1470 = icmp sgt i32 %1469, %2
  br i1 %1470, label %1557, label %1471

1471:                                             ; preds = %1467
  %1472 = and i1 %57, %1459
  %1473 = and i1 %44, %1472
  %1474 = icmp slt i32 %46, %1458
  %1475 = select i1 %1473, i1 %1474, i1 false
  br i1 %1475, label %1557, label %1476

1476:                                             ; preds = %1460, %1471
  %1477 = phi i32 [ %1462, %1460 ], [ %1469, %1471 ]
  %1478 = icmp slt i32 %1447, %1458
  %1479 = tail call i32 @llvm.smin.i32(i32 %1447, i32 %1458)
  %1480 = lshr i64 %1445, 32
  %1481 = trunc nuw i64 %1480 to i32
  %1482 = and i32 %1481, 255
  %1483 = tail call i32 @llvm.smin.i32(i32 %1482, i32 %1479)
  %1484 = icmp ne i32 %1477, 0
  %1485 = icmp slt i32 %1482, %1479
  %1486 = select i1 %1484, i1 true, i1 %1485
  br i1 %1486, label %1487, label %1528

1487:                                             ; preds = %1476
  %1488 = uitofp nneg i32 %1477 to float
  %1489 = sitofp i32 %1479 to float
  %1490 = fmul float %1489, %8
  %1491 = tail call float @llvm.fmuladd.f32(float %7, float %1488, float %1490)
  %1492 = icmp eq i32 %1477, 0
  br i1 %1492, label %1506, label %1493

1493:                                             ; preds = %1487
  %1494 = add nuw nsw i32 %1477, 1
  %1495 = uitofp nneg i32 %1494 to float
  %1496 = bitcast float %1495 to i32
  %1497 = lshr i32 %1496, 23
  %1498 = add nsw i32 %1497, -128
  %1499 = uitofp i32 %1498 to float
  %1500 = and i32 %1496, 8388607
  %1501 = or disjoint i32 %1500, 1065353216
  %1502 = bitcast i32 %1501 to float
  %1503 = tail call float @llvm.fmuladd.f32(float %1502, float 0xBFD611FF20000000, float 0x4000328400000000)
  %1504 = tail call float @llvm.fmuladd.f32(float %1503, float %1502, float 0xBFE59898E0000000)
  %1505 = fadd float %1504, %1499
  br label %1506

1506:                                             ; preds = %1493, %1487
  %1507 = phi float [ %1505, %1493 ], [ 0.000000e+00, %1487 ]
  %1508 = and i1 %44, %1459
  br i1 %1508, label %1524, label %1509

1509:                                             ; preds = %1506
  %1510 = icmp ne i32 %1436, %1450
  %1511 = icmp eq i32 %1458, 0
  %1512 = select i1 %1510, i1 %1511, i1 false
  br i1 %1512, label %1531, label %1513

1513:                                             ; preds = %1509
  %1514 = or i1 %1510, %1478
  br i1 %1514, label %1519, label %1515

1515:                                             ; preds = %1513
  %1516 = tail call float @llvm.fmuladd.f32(float %1507, float 5.000000e-01, float %1491)
  %1517 = fptosi float %1516 to i32
  %1518 = sub nsw i32 %1483, %1517
  br label %1528

1519:                                             ; preds = %1513
  %1520 = fcmp olt float %1491, %1507
  %1521 = select i1 %1520, float %1491, float %1507
  %1522 = fptosi float %1521 to i32
  %1523 = sub nsw i32 %1483, %1522
  br label %1528

1524:                                             ; preds = %1506
  %1525 = tail call float @llvm.fmuladd.f32(float %1507, float 5.000000e-01, float %1491)
  %1526 = fptosi float %1525 to i32
  %1527 = sub nsw i32 %1483, %1526
  br label %1528

1528:                                             ; preds = %1524, %1519, %1515, %1476
  %1529 = phi i32 [ %1483, %1476 ], [ %1523, %1519 ], [ %1518, %1515 ], [ %1527, %1524 ]
  %1530 = icmp eq i32 %1529, -2147483648
  br i1 %1530, label %1557, label %1531

1531:                                             ; preds = %1528, %1509
  %1532 = phi i32 [ %1529, %1528 ], [ 1, %1509 ]
  %1533 = getelementptr inbounds i32, ptr %50, i64 %1442
  %1534 = load i32, ptr %1533, align 4, !tbaa !27
  %1535 = add nsw i32 %1534, %1532
  %1536 = icmp sgt i32 %1535, %1440
  br i1 %1536, label %1544, label %1537

1537:                                             ; preds = %1531
  %1538 = getelementptr inbounds i32, ptr %52, i64 %1442
  %1539 = load i32, ptr %1538, align 4, !tbaa !27
  %1540 = icmp eq i32 %1539, %1437
  br i1 %1540, label %1541, label %1548

1541:                                             ; preds = %1537
  %1542 = add nsw i32 %1439, 1
  %1543 = icmp slt i32 %1439, %3
  br i1 %1543, label %1548, label %1563

1544:                                             ; preds = %1531
  %1545 = icmp sgt i32 %1439, 0
  %1546 = sext i1 %1545 to i32
  %1547 = add nsw i32 %1439, %1546
  br label %1548

1548:                                             ; preds = %1544, %1541, %1537
  %1549 = phi i64 [ %1441, %1541 ], [ %1441, %1537 ], [ %1442, %1544 ]
  %1550 = phi i32 [ %1440, %1541 ], [ %1440, %1537 ], [ %1535, %1544 ]
  %1551 = phi i32 [ %1542, %1541 ], [ %1439, %1537 ], [ %1547, %1544 ]
  %1552 = getelementptr inbounds i64, ptr %49, i64 %1442
  %1553 = load i64, ptr %1552, align 8, !tbaa !6
  %1554 = icmp sgt i64 %1553, -1
  br i1 %1554, label %1555, label %1557

1555:                                             ; preds = %1548
  %1556 = getelementptr inbounds i32, ptr %52, i64 %1553
  store i32 %1437, ptr %1556, align 4, !tbaa !27
  br label %1557

1557:                                             ; preds = %1555, %1548, %1528, %1471, %1467, %1463, %1438
  %1558 = phi i64 [ %1549, %1548 ], [ %1549, %1555 ], [ %1441, %1528 ], [ %1441, %1438 ], [ %1441, %1463 ], [ %1441, %1467 ], [ %1441, %1471 ]
  %1559 = phi i32 [ %1550, %1548 ], [ %1550, %1555 ], [ %1440, %1528 ], [ %1440, %1438 ], [ %1440, %1463 ], [ %1440, %1467 ], [ %1440, %1471 ]
  %1560 = phi i32 [ %1551, %1548 ], [ %1551, %1555 ], [ %1439, %1528 ], [ %1439, %1438 ], [ %1439, %1463 ], [ %1439, %1467 ], [ %1439, %1471 ]
  %1561 = add nsw i64 %1442, -1
  %1562 = icmp sgt i64 %1442, %1429
  br i1 %1562, label %1438, label %1563, !llvm.loop !40

1563:                                             ; preds = %1541, %1557, %1424
  %1564 = phi i64 [ %1430, %1424 ], [ %1442, %1541 ], [ %1561, %1557 ]
  %1565 = phi i64 [ -1, %1424 ], [ %1441, %1541 ], [ %1558, %1557 ]
  %1566 = phi i32 [ %1408, %1424 ], [ %1440, %1541 ], [ %1559, %1557 ]
  %1567 = icmp slt i64 %1400, 0
  br i1 %1567, label %1574, label %1568

1568:                                             ; preds = %1563
  %1569 = load i64, ptr %1403, align 8, !tbaa !10
  %1570 = getelementptr inbounds %struct.mm128_t, ptr %12, i64 %1400
  %1571 = load i64, ptr %1570, align 8, !tbaa !10
  %1572 = sub i64 %1569, %1571
  %1573 = icmp ugt i64 %1572, %55
  br i1 %1573, label %1574, label %1586

1574:                                             ; preds = %1568, %1563
  br i1 %1431, label %1575, label %1693

1575:                                             ; preds = %1574, %1575
  %1576 = phi i32 [ %1583, %1575 ], [ -2147483648, %1574 ]
  %1577 = phi i64 [ %1582, %1575 ], [ -1, %1574 ]
  %1578 = phi i64 [ %1584, %1575 ], [ %1430, %1574 ]
  %1579 = getelementptr inbounds i32, ptr %50, i64 %1578
  %1580 = load i32, ptr %1579, align 4, !tbaa !27
  %1581 = icmp slt i32 %1576, %1580
  %1582 = select i1 %1581, i64 %1578, i64 %1577
  %1583 = tail call i32 @llvm.smax.i32(i32 %1576, i32 %1580)
  %1584 = add nsw i64 %1578, -1
  %1585 = icmp sgt i64 %1578, %1429
  br i1 %1585, label %1575, label %1586, !llvm.loop !41

1586:                                             ; preds = %1575, %1568
  %1587 = phi i64 [ %1400, %1568 ], [ %1582, %1575 ]
  %1588 = icmp sgt i64 %1587, -1
  %1589 = icmp slt i64 %1587, %1564
  %1590 = and i1 %1588, %1589
  br i1 %1590, label %1591, label %1693

1591:                                             ; preds = %1586
  %1592 = getelementptr inbounds %struct.mm128_t, ptr %12, i64 %1587
  %1593 = trunc i64 %1405 to i32
  %1594 = getelementptr inbounds i8, ptr %1592, i64 8
  %1595 = load i64, ptr %1594, align 8, !tbaa !30
  %1596 = trunc i64 %1595 to i32
  %1597 = sub nsw i32 %1593, %1596
  %1598 = lshr i64 %1405, 48
  %1599 = trunc nuw nsw i64 %1598 to i32
  %1600 = and i32 %1599, 255
  %1601 = lshr i64 %1595, 48
  %1602 = trunc nuw nsw i64 %1601 to i32
  %1603 = and i32 %1602, 255
  %1604 = icmp slt i32 %1597, 1
  %1605 = icmp sgt i32 %1597, %43
  %1606 = or i1 %1604, %1605
  br i1 %1606, label %1693, label %1607

1607:                                             ; preds = %1591
  %1608 = load i64, ptr %1403, align 8, !tbaa !10
  %1609 = load i64, ptr %1592, align 8, !tbaa !10
  %1610 = sub i64 %1608, %1609
  %1611 = trunc i64 %1610 to i32
  %1612 = icmp eq i32 %1600, %1603
  br i1 %1612, label %1616, label %1613

1613:                                             ; preds = %1607
  %1614 = sub nsw i32 %1597, %1611
  %1615 = tail call i32 @llvm.abs.i32(i32 %1614, i1 true)
  br label %1629

1616:                                             ; preds = %1607
  %1617 = icmp eq i32 %1611, 0
  %1618 = icmp sgt i32 %1597, %46
  %1619 = or i1 %1618, %1617
  br i1 %1619, label %1693, label %1620

1620:                                             ; preds = %1616
  %1621 = sub nsw i32 %1597, %1611
  %1622 = tail call i32 @llvm.abs.i32(i32 %1621, i1 true)
  %1623 = icmp sgt i32 %1622, %2
  br i1 %1623, label %1693, label %1624

1624:                                             ; preds = %1620
  %1625 = and i1 %57, %1612
  %1626 = and i1 %44, %1625
  %1627 = icmp slt i32 %46, %1611
  %1628 = select i1 %1626, i1 %1627, i1 false
  br i1 %1628, label %1693, label %1629

1629:                                             ; preds = %1613, %1624
  %1630 = phi i32 [ %1615, %1613 ], [ %1622, %1624 ]
  %1631 = icmp slt i32 %1597, %1611
  %1632 = tail call i32 @llvm.smin.i32(i32 %1597, i32 %1611)
  %1633 = lshr i64 %1595, 32
  %1634 = trunc nuw i64 %1633 to i32
  %1635 = and i32 %1634, 255
  %1636 = tail call i32 @llvm.smin.i32(i32 %1635, i32 %1632)
  %1637 = icmp ne i32 %1630, 0
  %1638 = icmp slt i32 %1635, %1632
  %1639 = select i1 %1637, i1 true, i1 %1638
  br i1 %1639, label %1640, label %1681

1640:                                             ; preds = %1629
  %1641 = uitofp nneg i32 %1630 to float
  %1642 = sitofp i32 %1632 to float
  %1643 = fmul float %1642, %8
  %1644 = tail call float @llvm.fmuladd.f32(float %7, float %1641, float %1643)
  %1645 = icmp eq i32 %1630, 0
  br i1 %1645, label %1659, label %1646

1646:                                             ; preds = %1640
  %1647 = add nuw nsw i32 %1630, 1
  %1648 = uitofp nneg i32 %1647 to float
  %1649 = bitcast float %1648 to i32
  %1650 = lshr i32 %1649, 23
  %1651 = add nsw i32 %1650, -128
  %1652 = uitofp i32 %1651 to float
  %1653 = and i32 %1649, 8388607
  %1654 = or disjoint i32 %1653, 1065353216
  %1655 = bitcast i32 %1654 to float
  %1656 = tail call float @llvm.fmuladd.f32(float %1655, float 0xBFD611FF20000000, float 0x4000328400000000)
  %1657 = tail call float @llvm.fmuladd.f32(float %1656, float %1655, float 0xBFE59898E0000000)
  %1658 = fadd float %1657, %1652
  br label %1659

1659:                                             ; preds = %1646, %1640
  %1660 = phi float [ %1658, %1646 ], [ 0.000000e+00, %1640 ]
  %1661 = and i1 %44, %1612
  br i1 %1661, label %1677, label %1662

1662:                                             ; preds = %1659
  %1663 = icmp ne i32 %1600, %1603
  %1664 = icmp eq i32 %1611, 0
  %1665 = select i1 %1663, i1 %1664, i1 false
  br i1 %1665, label %1684, label %1666

1666:                                             ; preds = %1662
  %1667 = or i1 %1663, %1631
  br i1 %1667, label %1672, label %1668

1668:                                             ; preds = %1666
  %1669 = tail call float @llvm.fmuladd.f32(float %1660, float 5.000000e-01, float %1644)
  %1670 = fptosi float %1669 to i32
  %1671 = sub nsw i32 %1636, %1670
  br label %1681

1672:                                             ; preds = %1666
  %1673 = fcmp olt float %1644, %1660
  %1674 = select i1 %1673, float %1644, float %1660
  %1675 = fptosi float %1674 to i32
  %1676 = sub nsw i32 %1636, %1675
  br label %1681

1677:                                             ; preds = %1659
  %1678 = tail call float @llvm.fmuladd.f32(float %1660, float 5.000000e-01, float %1644)
  %1679 = fptosi float %1678 to i32
  %1680 = sub nsw i32 %1636, %1679
  br label %1681

1681:                                             ; preds = %1677, %1672, %1668, %1629
  %1682 = phi i32 [ %1636, %1629 ], [ %1676, %1672 ], [ %1671, %1668 ], [ %1680, %1677 ]
  %1683 = icmp eq i32 %1682, -2147483648
  br i1 %1683, label %1693, label %1684

1684:                                             ; preds = %1681, %1662
  %1685 = phi i32 [ %1682, %1681 ], [ 1, %1662 ]
  %1686 = getelementptr inbounds i32, ptr %50, i64 %1587
  %1687 = load i32, ptr %1686, align 4, !tbaa !27
  %1688 = add nsw i32 %1687, %1685
  %1689 = icmp slt i32 %1566, %1688
  br i1 %1689, label %1690, label %1693

1690:                                             ; preds = %1684
  %1691 = getelementptr inbounds i32, ptr %50, i64 %1401
  store i32 %1688, ptr %1691, align 4, !tbaa !27
  %1692 = getelementptr inbounds i64, ptr %49, i64 %1401
  store i64 %1587, ptr %1692, align 8, !tbaa !6
  br label %1698

1693:                                             ; preds = %1574, %1684, %1681, %1624, %1620, %1616, %1591, %1586
  %1694 = phi i64 [ %1587, %1684 ], [ %1587, %1681 ], [ %1587, %1624 ], [ %1587, %1620 ], [ %1587, %1616 ], [ %1587, %1591 ], [ %1587, %1586 ], [ -1, %1574 ]
  %1695 = getelementptr inbounds i32, ptr %50, i64 %1401
  store i32 %1566, ptr %1695, align 4, !tbaa !27
  %1696 = getelementptr inbounds i64, ptr %49, i64 %1401
  store i64 %1565, ptr %1696, align 8, !tbaa !6
  %1697 = icmp sgt i64 %1565, -1
  br i1 %1697, label %1698, label %1705

1698:                                             ; preds = %1693, %1690
  %1699 = phi i64 [ %1587, %1690 ], [ %1694, %1693 ]
  %1700 = phi i32 [ %1688, %1690 ], [ %1566, %1693 ]
  %1701 = phi i64 [ %1587, %1690 ], [ %1565, %1693 ]
  %1702 = getelementptr inbounds i32, ptr %51, i64 %1701
  %1703 = load i32, ptr %1702, align 4, !tbaa !27
  %1704 = tail call i32 @llvm.smax.i32(i32 %1703, i32 %1700)
  br label %1705

1705:                                             ; preds = %1698, %1693
  %1706 = phi i64 [ %1694, %1693 ], [ %1699, %1698 ]
  %1707 = phi i32 [ %1566, %1693 ], [ %1700, %1698 ]
  %1708 = phi i32 [ %1566, %1693 ], [ %1704, %1698 ]
  %1709 = getelementptr inbounds i32, ptr %51, i64 %1401
  store i32 %1708, ptr %1709, align 4, !tbaa !27
  %1710 = icmp slt i64 %1706, 0
  br i1 %1710, label %1721, label %1711

1711:                                             ; preds = %1705
  %1712 = load i64, ptr %1403, align 8, !tbaa !10
  %1713 = getelementptr inbounds %struct.mm128_t, ptr %12, i64 %1706
  %1714 = load i64, ptr %1713, align 8, !tbaa !10
  %1715 = sub i64 %1712, %1714
  %1716 = icmp ugt i64 %1715, %55
  br i1 %1716, label %1722, label %1717

1717:                                             ; preds = %1711
  %1718 = getelementptr inbounds i32, ptr %50, i64 %1706
  %1719 = load i32, ptr %1718, align 4, !tbaa !27
  %1720 = icmp slt i32 %1719, %1707
  br i1 %1720, label %1721, label %1722

1721:                                             ; preds = %1717, %1705
  br label %1722

1722:                                             ; preds = %1721, %1717, %1711
  %1723 = phi i64 [ %1401, %1721 ], [ %1706, %1717 ], [ %1706, %1711 ]
  %1724 = add nuw nsw i64 %1401, 1
  %1725 = add nuw nsw i64 %1402, 1
  %1726 = icmp eq i64 %1725, %58
  br i1 %1726, label %1727, label %1398, !llvm.loop !44

1727:                                             ; preds = %1722, %1393, %42
  %1728 = call ptr @mg_chain_backtrack(ptr poison, i64 noundef %11, ptr noundef %50, ptr noundef %49, ptr noundef %51, ptr noundef %52, i32 noundef signext %5, i32 noundef signext %6, i32 noundef signext %47, ptr noundef nonnull %17, ptr noundef nonnull %18)
  %1729 = load i32, ptr %17, align 4, !tbaa !27
  store i32 %1729, ptr %13, align 4, !tbaa !27
  store ptr %1728, ptr %14, align 8, !tbaa !38
  %1730 = icmp eq i32 %1729, 0
  br i1 %1730, label %1731, label %1732

1731:                                             ; preds = %1727
  tail call void @free(ptr noundef %12) #13
  tail call void @free(ptr noundef %51) #13
  br label %1856

1732:                                             ; preds = %1727
  %1733 = load i32, ptr %18, align 4, !tbaa !27
  %1734 = sext i32 %1733 to i64
  %1735 = shl nsw i64 %1734, 4
  %1736 = tail call noalias ptr @malloc(i64 noundef %1735) #15
  %1737 = sext i32 %1729 to i64
  %1738 = icmp sgt i32 %1729, 0
  br i1 %1738, label %1739, label %1768

1739:                                             ; preds = %1732, %1764
  %1740 = phi i64 [ %1766, %1764 ], [ 0, %1732 ]
  %1741 = phi i64 [ %1765, %1764 ], [ 0, %1732 ]
  %1742 = getelementptr inbounds i64, ptr %1728, i64 %1740
  %1743 = load i64, ptr %1742, align 8, !tbaa !6
  %1744 = shl i64 %1743, 32
  %1745 = ashr exact i64 %1744, 32
  %1746 = icmp sgt i64 %1745, 0
  br i1 %1746, label %1747, label %1764

1747:                                             ; preds = %1739
  %1748 = getelementptr i32, ptr %51, i64 %1745
  %1749 = shl i64 %1741, 32
  %1750 = ashr exact i64 %1749, 32
  %1751 = getelementptr i32, ptr %1748, i64 %1750
  br label %1752

1752:                                             ; preds = %1752, %1747
  %1753 = phi i64 [ 0, %1747 ], [ %1762, %1752 ]
  %1754 = phi i64 [ %1741, %1747 ], [ %1755, %1752 ]
  %1755 = add nsw i64 %1754, 1
  %1756 = getelementptr inbounds %struct.mm128_t, ptr %1736, i64 %1754
  %1757 = xor i64 %1753, -1
  %1758 = getelementptr i32, ptr %1751, i64 %1757
  %1759 = load i32, ptr %1758, align 4, !tbaa !27
  %1760 = sext i32 %1759 to i64
  %1761 = getelementptr inbounds %struct.mm128_t, ptr %12, i64 %1760
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1756, ptr noundef nonnull align 8 dereferenceable(16) %1761, i64 16, i1 false), !tbaa.struct !12
  %1762 = add nuw nsw i64 %1753, 1
  %1763 = icmp eq i64 %1762, %1745
  br i1 %1763, label %1764, label %1752, !llvm.loop !45

1764:                                             ; preds = %1752, %1739
  %1765 = phi i64 [ %1741, %1739 ], [ %1755, %1752 ]
  %1766 = add nuw nsw i64 %1740, 1
  %1767 = icmp eq i64 %1766, %1737
  br i1 %1767, label %1768, label %1739, !llvm.loop !46

1768:                                             ; preds = %1764, %1732
  tail call void @free(ptr noundef %51) #13
  %1769 = shl nsw i64 %1737, 4
  %1770 = tail call noalias ptr @malloc(i64 noundef %1769) #15
  br i1 %1738, label %1774, label %1771

1771:                                             ; preds = %1768
  %1772 = shl nsw i64 %1737, 3
  %1773 = tail call noalias ptr @malloc(i64 noundef %1772) #15
  br label %1851

1774:                                             ; preds = %1768, %1774
  %1775 = phi i64 [ %1788, %1774 ], [ 0, %1768 ]
  %1776 = phi i64 [ %1787, %1774 ], [ 0, %1768 ]
  %1777 = getelementptr inbounds %struct.mm128_t, ptr %1736, i64 %1776
  %1778 = load i64, ptr %1777, align 8, !tbaa !10
  %1779 = getelementptr inbounds %struct.mm128_t, ptr %1770, i64 %1775
  store i64 %1778, ptr %1779, align 8, !tbaa !10
  %1780 = shl i64 %1776, 32
  %1781 = or i64 %1780, %1775
  %1782 = getelementptr inbounds i8, ptr %1779, i64 8
  store i64 %1781, ptr %1782, align 8, !tbaa !30
  %1783 = getelementptr inbounds i64, ptr %1728, i64 %1775
  %1784 = load i64, ptr %1783, align 8, !tbaa !6
  %1785 = shl i64 %1784, 32
  %1786 = ashr exact i64 %1785, 32
  %1787 = add nsw i64 %1786, %1776
  %1788 = add nuw nsw i64 %1775, 1
  %1789 = icmp eq i64 %1788, %1737
  br i1 %1789, label %1790, label %1774, !llvm.loop !47

1790:                                             ; preds = %1774
  %1791 = getelementptr inbounds i8, ptr %1770, i64 %1769
  %1792 = icmp slt i32 %1729, 65
  br i1 %1792, label %1793, label %1822

1793:                                             ; preds = %1790
  %1794 = icmp eq i32 %1729, 1
  br i1 %1794, label %1795, label %1797

1795:                                             ; preds = %1793
  %1796 = tail call noalias dereferenceable_or_null(8) ptr @malloc(i64 noundef 8) #15
  br label %1828

1797:                                             ; preds = %1793
  %1798 = getelementptr inbounds i8, ptr %1770, i64 16
  br label %1799

1799:                                             ; preds = %1819, %1797
  %1800 = phi ptr [ %1820, %1819 ], [ %1798, %1797 ]
  %1801 = phi ptr [ %1800, %1819 ], [ %1770, %1797 ]
  %1802 = load i64, ptr %1800, align 8, !tbaa !6
  %1803 = load i64, ptr %1801, align 8, !tbaa !10
  %1804 = icmp ult i64 %1802, %1803
  br i1 %1804, label %1805, label %1819

1805:                                             ; preds = %1799
  %1806 = getelementptr inbounds i8, ptr %1801, i64 24
  %1807 = load i64, ptr %1806, align 8, !tbaa !6
  %1808 = icmp ugt ptr %1800, %1770
  br i1 %1808, label %1809, label %1816

1809:                                             ; preds = %1805, %1814
  %1810 = phi ptr [ %1811, %1814 ], [ %1800, %1805 ]
  %1811 = getelementptr inbounds i8, ptr %1810, i64 -16
  %1812 = load i64, ptr %1811, align 8, !tbaa !10
  %1813 = icmp ult i64 %1802, %1812
  br i1 %1813, label %1814, label %1816

1814:                                             ; preds = %1809
  tail call void @llvm.memcpy.p0.p0.i64(ptr noundef nonnull align 8 dereferenceable(16) %1810, ptr noundef nonnull align 8 dereferenceable(16) %1811, i64 16, i1 false), !tbaa.struct !12
  %1815 = icmp ugt ptr %1811, %1770
  br i1 %1815, label %1809, label %1816, !llvm.loop !13

1816:                                             ; preds = %1814, %1809, %1805
  %1817 = phi ptr [ %1800, %1805 ], [ %1810, %1809 ], [ %1811, %1814 ]
  store i64 %1802, ptr %1817, align 8, !tbaa !6
  %1818 = getelementptr inbounds i8, ptr %1817, i64 8
  store i64 %1807, ptr %1818, align 8, !tbaa !6
  br label %1819

1819:                                             ; preds = %1816, %1799
  %1820 = getelementptr inbounds i8, ptr %1800, i64 16
  %1821 = icmp ult ptr %1820, %1791
  br i1 %1821, label %1799, label %1825, !llvm.loop !15

1822:                                             ; preds = %1790
  tail call void @rs_sort_128x(ptr noundef nonnull %1770, ptr noundef nonnull %1791, i32 noundef signext 8, i32 noundef signext 56)
  %1823 = shl nuw nsw i64 %1737, 3
  %1824 = tail call noalias ptr @malloc(i64 noundef %1823) #15
  br label %1828

1825:                                             ; preds = %1819
  %1826 = shl nuw nsw i64 %1737, 3
  %1827 = tail call noalias ptr @malloc(i64 noundef %1826) #15
  br label %1828

1828:                                             ; preds = %1825, %1795, %1822
  %1829 = phi ptr [ %1824, %1822 ], [ %1827, %1825 ], [ %1796, %1795 ]
  br label %1830

1830:                                             ; preds = %1830, %1828
  %1831 = phi i64 [ %1847, %1830 ], [ 0, %1828 ]
  %1832 = phi i64 [ %1846, %1830 ], [ 0, %1828 ]
  %1833 = getelementptr inbounds %struct.mm128_t, ptr %1770, i64 %1831, i32 1
  %1834 = load i64, ptr %1833, align 8, !tbaa !30
  %1835 = shl i64 %1834, 32
  %1836 = ashr exact i64 %1835, 32
  %1837 = getelementptr inbounds i64, ptr %1728, i64 %1836
  %1838 = load i64, ptr %1837, align 8, !tbaa !6
  %1839 = getelementptr inbounds i64, ptr %1829, i64 %1831
  store i64 %1838, ptr %1839, align 8, !tbaa !6
  %1840 = getelementptr inbounds %struct.mm128_t, ptr %12, i64 %1832
  %1841 = lshr i64 %1834, 32
  %1842 = getelementptr inbounds %struct.mm128_t, ptr %1736, i64 %1841
  %1843 = shl i64 %1838, 32
  %1844 = ashr exact i64 %1843, 32
  %1845 = ashr exact i64 %1843, 28
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 8 %1840, ptr align 8 %1842, i64 %1845, i1 false)
  %1846 = add nsw i64 %1844, %1832
  %1847 = add nuw nsw i64 %1831, 1
  %1848 = icmp eq i64 %1847, %1737
  br i1 %1848, label %1849, label %1830, !llvm.loop !48

1849:                                             ; preds = %1830
  %1850 = shl i64 %1846, 4
  br label %1851

1851:                                             ; preds = %1771, %1849
  %1852 = phi ptr [ %1829, %1849 ], [ %1773, %1771 ]
  %1853 = phi i64 [ %1850, %1849 ], [ 0, %1771 ]
  %1854 = shl nsw i32 %1729, 3
  %1855 = sext i32 %1854 to i64
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 8 %1728, ptr align 8 %1852, i64 %1855, i1 false)
  tail call void @llvm.memcpy.p0.p0.i64(ptr align 8 %1736, ptr align 8 %12, i64 %1853, i1 false)
  br label %1856

1856:                                             ; preds = %1731, %1851, %41
  %1857 = phi ptr [ null, %41 ], [ null, %1731 ], [ %1736, %1851 ]
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %18) #13
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %17) #13
  ret ptr %1857
}

; Function Attrs: nofree nounwind
declare dso_local noundef signext i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #8

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(0,1) memory(inaccessiblemem: readwrite)
declare dso_local noalias noundef ptr @calloc(i64 noundef, i64 noundef) local_unnamed_addr #9

; Function Attrs: nofree nounwind
define dso_local void @load_input_data_from_file(ptr nocapture noundef readonly %0, i64 noundef %1, ptr nocapture noundef %2, ptr nocapture noundef %3, ptr nocapture noundef %4, ptr nocapture noundef %5, ptr nocapture noundef %6, ptr nocapture noundef %7, ptr nocapture noundef %8, ptr nocapture noundef %9, ptr nocapture noundef %10, ptr nocapture noundef %11, ptr nocapture noundef %12, ptr nocapture noundef %13, ptr nocapture noundef writeonly %14, ptr nocapture noundef readnone %15, ptr nocapture noundef readnone %16, ptr nocapture noundef readnone %17) local_unnamed_addr #8 {
  %19 = tail call ptr @fopen(ptr noundef %0, ptr noundef nonnull @.str.19)
  %20 = icmp eq ptr %19, null
  br i1 %20, label %21, label %22

21:                                               ; preds = %18
  tail call void @perror(ptr noundef nonnull @.str.20) #17
  br label %39

22:                                               ; preds = %18
  %23 = tail call i64 @fread(ptr noundef %2, i64 noundef 4, i64 noundef 1, ptr noundef nonnull %19)
  %24 = tail call i64 @fread(ptr noundef %3, i64 noundef 4, i64 noundef 1, ptr noundef nonnull %19)
  %25 = tail call i64 @fread(ptr noundef %4, i64 noundef 4, i64 noundef 1, ptr noundef nonnull %19)
  %26 = tail call i64 @fread(ptr noundef %5, i64 noundef 4, i64 noundef 1, ptr noundef nonnull %19)
  %27 = tail call i64 @fread(ptr noundef %6, i64 noundef 4, i64 noundef 1, ptr noundef nonnull %19)
  %28 = tail call i64 @fread(ptr noundef %7, i64 noundef 4, i64 noundef 1, ptr noundef nonnull %19)
  %29 = tail call i64 @fread(ptr noundef %8, i64 noundef 4, i64 noundef 1, ptr noundef nonnull %19)
  %30 = tail call i64 @fread(ptr noundef %9, i64 noundef 4, i64 noundef 1, ptr noundef nonnull %19)
  %31 = tail call i64 @fread(ptr noundef %10, i64 noundef 4, i64 noundef 1, ptr noundef nonnull %19)
  %32 = tail call i64 @fread(ptr noundef %11, i64 noundef 4, i64 noundef 1, ptr noundef nonnull %19)
  %33 = tail call i64 @fread(ptr noundef %12, i64 noundef 4, i64 noundef 1, ptr noundef nonnull %19)
  %34 = tail call i64 @fread(ptr noundef %13, i64 noundef 8, i64 noundef 1, ptr noundef nonnull %19)
  store i64 %1, ptr %13, align 8, !tbaa !6
  %35 = shl i64 %1, 4
  %36 = tail call noalias ptr @malloc(i64 noundef %35) #15
  store ptr %36, ptr %14, align 8, !tbaa !38
  %37 = tail call i64 @fread(ptr noundef %36, i64 noundef 16, i64 noundef %1, ptr noundef nonnull %19)
  %38 = tail call signext i32 @fclose(ptr noundef nonnull %19)
  br label %39

39:                                               ; preds = %22, %21
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local noalias noundef ptr @fopen(ptr nocapture noundef readonly, ptr nocapture noundef readonly) local_unnamed_addr #8

; Function Attrs: nofree nounwind
declare dso_local void @perror(ptr nocapture noundef readonly) local_unnamed_addr #8

; Function Attrs: nofree nounwind
declare dso_local noundef i64 @fread(ptr nocapture noundef, i64 noundef, i64 noundef, ptr nocapture noundef) local_unnamed_addr #8

; Function Attrs: nofree nounwind
declare dso_local noundef signext i32 @fclose(ptr nocapture noundef) local_unnamed_addr #8

; Function Attrs: nofree nounwind
define dso_local void @load_output_data_from_file(ptr nocapture noundef readonly %0, ptr nocapture noundef %1, ptr nocapture noundef writeonly %2) local_unnamed_addr #8 {
  %4 = tail call ptr @fopen(ptr noundef %0, ptr noundef nonnull @.str.19)
  %5 = icmp eq ptr %4, null
  br i1 %5, label %6, label %7

6:                                                ; preds = %3
  tail call void @perror(ptr noundef nonnull @.str.20) #17
  br label %19

7:                                                ; preds = %3
  %8 = tail call i64 @fread(ptr noundef %1, i64 noundef 4, i64 noundef 1, ptr noundef nonnull %4)
  %9 = load i32, ptr %1, align 4, !tbaa !27
  %10 = sext i32 %9 to i64
  %11 = shl nsw i64 %10, 3
  %12 = tail call noalias ptr @malloc(i64 noundef %11) #15
  store ptr %12, ptr %2, align 8, !tbaa !38
  %13 = icmp eq ptr %12, null
  br i1 %13, label %14, label %16

14:                                               ; preds = %7
  tail call void @perror(ptr noundef nonnull @.str.21) #17
  %15 = tail call signext i32 @fclose(ptr noundef nonnull %4)
  br label %19

16:                                               ; preds = %7
  %17 = tail call i64 @fread(ptr noundef nonnull %12, i64 noundef 8, i64 noundef %10, ptr noundef nonnull %4)
  %18 = tail call signext i32 @fclose(ptr noundef nonnull %4)
  br label %19

19:                                               ; preds = %16, %14, %6
  ret void
}

; Function Attrs: nofree nounwind
define dso_local void @print_mm128_array(ptr nocapture noundef readonly %0, i32 noundef signext %1) local_unnamed_addr #8 {
  %3 = icmp sgt i32 %1, 0
  br i1 %3, label %4, label %6

4:                                                ; preds = %2
  %5 = zext nneg i32 %1 to i64
  br label %7

6:                                                ; preds = %7, %2
  ret void

7:                                                ; preds = %4, %7
  %8 = phi i64 [ 0, %4 ], [ %15, %7 ]
  %9 = getelementptr inbounds %struct.mm128_t, ptr %0, i64 %8
  %10 = load i64, ptr %9, align 8, !tbaa !10
  %11 = getelementptr inbounds i8, ptr %9, i64 8
  %12 = load i64, ptr %11, align 8, !tbaa !30
  %13 = trunc nuw nsw i64 %8 to i32
  %14 = tail call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.22, i32 noundef signext %13, i64 noundef %10, i64 noundef %12)
  %15 = add nuw nsw i64 %8, 1
  %16 = icmp eq i64 %15, %5
  br i1 %16, label %6, label %7, !llvm.loop !49
}

; Function Attrs: nounwind
define dso_local signext i32 @get_regsw_hits() local_unnamed_addr #3 {
  %1 = tail call i32 asm sideeffect "csrr $0, 0x80b", "=r"() #13, !srcloc !50
  ret i32 %1
}

; Function Attrs: nounwind
define dso_local signext i32 @get_regsw_misses() local_unnamed_addr #3 {
  %1 = tail call i32 asm sideeffect "csrr $0, 0x80c", "=r"() #13, !srcloc !51
  ret i32 %1
}

; Function Attrs: nounwind
define dso_local void @clear_regsw_cache() local_unnamed_addr #3 {
  %1 = tail call i32 asm sideeffect "csrr $0, 0x80d", "=r"() #13, !srcloc !52
  ret void
}

; Function Attrs: nounwind
define dso_local range(i64 -2147483648, 2147483648) i64 @get_cycles() local_unnamed_addr #3 {
  %1 = tail call i32 asm sideeffect "csrr $0, 0x80e", "=r"() #13, !srcloc !53
  %2 = sext i32 %1 to i64
  ret i64 %2
}

; Function Attrs: nounwind
define dso_local noundef signext i32 @main(i32 noundef signext %0, ptr nocapture noundef readnone %1) local_unnamed_addr #3 {
  %3 = alloca i32, align 4
  %4 = alloca ptr, align 8
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %3) #13
  call void @llvm.lifetime.start.p0(i64 8, ptr nonnull %4) #13
  %5 = tail call i32 asm sideeffect "csrr $0, 0x80d", "=r"() #13, !srcloc !52
  %6 = tail call i32 asm sideeffect "csrr $0, 0x80e", "=r"() #13, !srcloc !53
  %7 = call ptr @mg_lchain_dp(i32 noundef signext 5000, i32 noundef signext 5000, i32 noundef signext 500, i32 noundef signext 25, i32 noundef signext 5000, i32 noundef signext 3, i32 noundef signext 40, float noundef 0x3FBEB851E0000000, float noundef 0.000000e+00, i32 noundef signext 0, i32 noundef signext 1, i64 noundef 1000, ptr noundef nonnull @sta, ptr noundef nonnull %3, ptr noundef nonnull %4, ptr noundef undef)
  %8 = call i32 asm sideeffect "csrr $0, 0x80e", "=r"() #13, !srcloc !53
  %9 = call i32 asm sideeffect "csrr $0, 0x80b", "=r"() #13, !srcloc !50
  %10 = call i32 asm sideeffect "csrr $0, 0x80c", "=r"() #13, !srcloc !51
  %11 = load i64, ptr %7, align 8, !tbaa !10
  %12 = getelementptr inbounds i8, ptr %7, i64 8
  %13 = load i64, ptr %12, align 8, !tbaa !30
  %14 = call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.22, i32 noundef signext 0, i64 noundef %11, i64 noundef %13)
  %15 = getelementptr inbounds i8, ptr %7, i64 16
  %16 = load i64, ptr %15, align 8, !tbaa !10
  %17 = getelementptr inbounds i8, ptr %7, i64 24
  %18 = load i64, ptr %17, align 8, !tbaa !30
  %19 = call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.22, i32 noundef signext 1, i64 noundef %16, i64 noundef %18)
  %20 = getelementptr inbounds i8, ptr %7, i64 32
  %21 = load i64, ptr %20, align 8, !tbaa !10
  %22 = getelementptr inbounds i8, ptr %7, i64 40
  %23 = load i64, ptr %22, align 8, !tbaa !30
  %24 = call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.22, i32 noundef signext 2, i64 noundef %21, i64 noundef %23)
  %25 = getelementptr inbounds i8, ptr %7, i64 48
  %26 = load i64, ptr %25, align 8, !tbaa !10
  %27 = getelementptr inbounds i8, ptr %7, i64 56
  %28 = load i64, ptr %27, align 8, !tbaa !30
  %29 = call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.22, i32 noundef signext 3, i64 noundef %26, i64 noundef %28)
  %30 = getelementptr inbounds i8, ptr %7, i64 64
  %31 = load i64, ptr %30, align 8, !tbaa !10
  %32 = getelementptr inbounds i8, ptr %7, i64 72
  %33 = load i64, ptr %32, align 8, !tbaa !30
  %34 = call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.22, i32 noundef signext 4, i64 noundef %31, i64 noundef %33)
  %35 = getelementptr inbounds i8, ptr %7, i64 80
  %36 = load i64, ptr %35, align 8, !tbaa !10
  %37 = getelementptr inbounds i8, ptr %7, i64 88
  %38 = load i64, ptr %37, align 8, !tbaa !30
  %39 = call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.22, i32 noundef signext 5, i64 noundef %36, i64 noundef %38)
  %40 = getelementptr inbounds i8, ptr %7, i64 96
  %41 = load i64, ptr %40, align 8, !tbaa !10
  %42 = getelementptr inbounds i8, ptr %7, i64 104
  %43 = load i64, ptr %42, align 8, !tbaa !30
  %44 = call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.22, i32 noundef signext 6, i64 noundef %41, i64 noundef %43)
  %45 = getelementptr inbounds i8, ptr %7, i64 112
  %46 = load i64, ptr %45, align 8, !tbaa !10
  %47 = getelementptr inbounds i8, ptr %7, i64 120
  %48 = load i64, ptr %47, align 8, !tbaa !30
  %49 = call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.22, i32 noundef signext 7, i64 noundef %46, i64 noundef %48)
  %50 = getelementptr inbounds i8, ptr %7, i64 128
  %51 = load i64, ptr %50, align 8, !tbaa !10
  %52 = getelementptr inbounds i8, ptr %7, i64 136
  %53 = load i64, ptr %52, align 8, !tbaa !30
  %54 = call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.22, i32 noundef signext 8, i64 noundef %51, i64 noundef %53)
  %55 = getelementptr inbounds i8, ptr %7, i64 144
  %56 = load i64, ptr %55, align 8, !tbaa !10
  %57 = getelementptr inbounds i8, ptr %7, i64 152
  %58 = load i64, ptr %57, align 8, !tbaa !30
  %59 = call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.22, i32 noundef signext 9, i64 noundef %56, i64 noundef %58)
  %60 = getelementptr inbounds i8, ptr %7, i64 160
  %61 = load i64, ptr %60, align 8, !tbaa !10
  %62 = getelementptr inbounds i8, ptr %7, i64 168
  %63 = load i64, ptr %62, align 8, !tbaa !30
  %64 = call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.22, i32 noundef signext 10, i64 noundef %61, i64 noundef %63)
  %65 = getelementptr inbounds i8, ptr %7, i64 176
  %66 = load i64, ptr %65, align 8, !tbaa !10
  %67 = getelementptr inbounds i8, ptr %7, i64 184
  %68 = load i64, ptr %67, align 8, !tbaa !30
  %69 = call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.22, i32 noundef signext 11, i64 noundef %66, i64 noundef %68)
  %70 = getelementptr inbounds i8, ptr %7, i64 192
  %71 = load i64, ptr %70, align 8, !tbaa !10
  %72 = getelementptr inbounds i8, ptr %7, i64 200
  %73 = load i64, ptr %72, align 8, !tbaa !30
  %74 = call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.22, i32 noundef signext 12, i64 noundef %71, i64 noundef %73)
  %75 = getelementptr inbounds i8, ptr %7, i64 208
  %76 = load i64, ptr %75, align 8, !tbaa !10
  %77 = getelementptr inbounds i8, ptr %7, i64 216
  %78 = load i64, ptr %77, align 8, !tbaa !30
  %79 = call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.22, i32 noundef signext 13, i64 noundef %76, i64 noundef %78)
  %80 = getelementptr inbounds i8, ptr %7, i64 224
  %81 = load i64, ptr %80, align 8, !tbaa !10
  %82 = getelementptr inbounds i8, ptr %7, i64 232
  %83 = load i64, ptr %82, align 8, !tbaa !30
  %84 = call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.22, i32 noundef signext 14, i64 noundef %81, i64 noundef %83)
  %85 = getelementptr inbounds i8, ptr %7, i64 240
  %86 = load i64, ptr %85, align 8, !tbaa !10
  %87 = getelementptr inbounds i8, ptr %7, i64 248
  %88 = load i64, ptr %87, align 8, !tbaa !30
  %89 = call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.22, i32 noundef signext 15, i64 noundef %86, i64 noundef %88)
  %90 = getelementptr inbounds i8, ptr %7, i64 256
  %91 = load i64, ptr %90, align 8, !tbaa !10
  %92 = getelementptr inbounds i8, ptr %7, i64 264
  %93 = load i64, ptr %92, align 8, !tbaa !30
  %94 = call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.22, i32 noundef signext 16, i64 noundef %91, i64 noundef %93)
  %95 = getelementptr inbounds i8, ptr %7, i64 272
  %96 = load i64, ptr %95, align 8, !tbaa !10
  %97 = getelementptr inbounds i8, ptr %7, i64 280
  %98 = load i64, ptr %97, align 8, !tbaa !30
  %99 = call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.22, i32 noundef signext 17, i64 noundef %96, i64 noundef %98)
  %100 = getelementptr inbounds i8, ptr %7, i64 288
  %101 = load i64, ptr %100, align 8, !tbaa !10
  %102 = getelementptr inbounds i8, ptr %7, i64 296
  %103 = load i64, ptr %102, align 8, !tbaa !30
  %104 = call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.22, i32 noundef signext 18, i64 noundef %101, i64 noundef %103)
  %105 = getelementptr inbounds i8, ptr %7, i64 304
  %106 = load i64, ptr %105, align 8, !tbaa !10
  %107 = getelementptr inbounds i8, ptr %7, i64 312
  %108 = load i64, ptr %107, align 8, !tbaa !30
  %109 = call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.22, i32 noundef signext 19, i64 noundef %106, i64 noundef %108)
  %110 = sext i32 %8 to i64
  %111 = sext i32 %6 to i64
  %112 = call i32 @puts(ptr nonnull dereferenceable(1) @str)
  %113 = sub nsw i64 %110, %111
  %114 = call signext i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.24, i64 noundef %113, i32 noundef signext %9, i32 noundef signext %10)
  call void @llvm.lifetime.end.p0(i64 8, ptr nonnull %4) #13
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %3) #13
  ret i32 0
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fmuladd.f32(float, float, float) #10

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #11

; Function Attrs: nofree nounwind
declare noundef i32 @puts(ptr nocapture noundef readonly) local_unnamed_addr #12

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #11

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #11

attributes #0 = { nofree norecurse nosync nounwind memory(readwrite, inaccessiblemem: none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv64" "target-features"="+64bit,+a,+d,+f,+m,+relax,+zicsr,+zifencei,-c,-e,-experimental-smmpm,-experimental-smnpm,-experimental-ssnpm,-experimental-sspm,-experimental-ssqosid,-experimental-supm,-experimental-zalasr,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-shcounterenw,-shgatpa,-shtvala,-shvsatpa,-shvstvala,-shvstvecd,-smaia,-smepmp,-smstateen,-ssaia,-ssccptr,-sscofpmf,-sscounterenw,-ssstateen,-ssstrict,-sstc,-sstvala,-sstvecd,-ssu64xl,-svade,-svadu,-svbare,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfcease,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xsifivecdiscarddlone,-xsifivecflushdlone,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zaamo,-zabha,-zacas,-zalrsc,-zama16b,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zca,-zcb,-zcd,-zce,-zcf,-zcmop,-zcmp,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zimop,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }
attributes #1 = { mustprogress nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: readwrite) }
attributes #3 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv64" "target-features"="+64bit,+a,+d,+f,+m,+relax,+zicsr,+zifencei,-c,-e,-experimental-smmpm,-experimental-smnpm,-experimental-ssnpm,-experimental-sspm,-experimental-ssqosid,-experimental-supm,-experimental-zalasr,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-shcounterenw,-shgatpa,-shtvala,-shvsatpa,-shvstvala,-shvstvecd,-smaia,-smepmp,-smstateen,-ssaia,-ssccptr,-sscofpmf,-sscounterenw,-ssstateen,-ssstrict,-sstc,-sstvala,-sstvecd,-ssu64xl,-svade,-svadu,-svbare,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfcease,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xsifivecdiscarddlone,-xsifivecflushdlone,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zaamo,-zabha,-zacas,-zalrsc,-zama16b,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zca,-zcb,-zcd,-zce,-zcf,-zcmop,-zcmp,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zimop,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }
attributes #4 = { noreturn nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv64" "target-features"="+64bit,+a,+d,+f,+m,+relax,+zicsr,+zifencei,-c,-e,-experimental-smmpm,-experimental-smnpm,-experimental-ssnpm,-experimental-sspm,-experimental-ssqosid,-experimental-supm,-experimental-zalasr,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-shcounterenw,-shgatpa,-shtvala,-shvsatpa,-shvstvala,-shvstvecd,-smaia,-smepmp,-smstateen,-ssaia,-ssccptr,-sscofpmf,-sscounterenw,-ssstateen,-ssstrict,-sstc,-sstvala,-sstvecd,-ssu64xl,-svade,-svadu,-svbare,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfcease,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xsifivecdiscarddlone,-xsifivecflushdlone,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zaamo,-zabha,-zacas,-zalrsc,-zama16b,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zca,-zcb,-zcd,-zce,-zcf,-zcmop,-zcmp,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zimop,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }
attributes #5 = { mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv64" "target-features"="+64bit,+a,+d,+f,+m,+relax,+zicsr,+zifencei,-c,-e,-experimental-smmpm,-experimental-smnpm,-experimental-ssnpm,-experimental-sspm,-experimental-ssqosid,-experimental-supm,-experimental-zalasr,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-shcounterenw,-shgatpa,-shtvala,-shvsatpa,-shvstvala,-shvstvecd,-smaia,-smepmp,-smstateen,-ssaia,-ssccptr,-sscofpmf,-sscounterenw,-ssstateen,-ssstrict,-sstc,-sstvala,-sstvecd,-ssu64xl,-svade,-svadu,-svbare,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfcease,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xsifivecdiscarddlone,-xsifivecflushdlone,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zaamo,-zabha,-zacas,-zalrsc,-zama16b,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zca,-zcb,-zcd,-zce,-zcf,-zcmop,-zcmp,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zimop,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }
attributes #6 = { mustprogress nocallback nofree nounwind willreturn memory(argmem: write) }
attributes #7 = { mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv64" "target-features"="+64bit,+a,+d,+f,+m,+relax,+zicsr,+zifencei,-c,-e,-experimental-smmpm,-experimental-smnpm,-experimental-ssnpm,-experimental-sspm,-experimental-ssqosid,-experimental-supm,-experimental-zalasr,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-shcounterenw,-shgatpa,-shtvala,-shvsatpa,-shvstvala,-shvstvecd,-smaia,-smepmp,-smstateen,-ssaia,-ssccptr,-sscofpmf,-sscounterenw,-ssstateen,-ssstrict,-sstc,-sstvala,-sstvecd,-ssu64xl,-svade,-svadu,-svbare,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfcease,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xsifivecdiscarddlone,-xsifivecflushdlone,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zaamo,-zabha,-zacas,-zalrsc,-zama16b,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zca,-zcb,-zcd,-zce,-zcf,-zcmop,-zcmp,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zimop,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }
attributes #8 = { nofree nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv64" "target-features"="+64bit,+a,+d,+f,+m,+relax,+zicsr,+zifencei,-c,-e,-experimental-smmpm,-experimental-smnpm,-experimental-ssnpm,-experimental-sspm,-experimental-ssqosid,-experimental-supm,-experimental-zalasr,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-shcounterenw,-shgatpa,-shtvala,-shvsatpa,-shvstvala,-shvstvecd,-smaia,-smepmp,-smstateen,-ssaia,-ssccptr,-sscofpmf,-sscounterenw,-ssstateen,-ssstrict,-sstc,-sstvala,-sstvecd,-ssu64xl,-svade,-svadu,-svbare,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfcease,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xsifivecdiscarddlone,-xsifivecflushdlone,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zaamo,-zabha,-zacas,-zalrsc,-zama16b,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zca,-zcb,-zcd,-zce,-zcf,-zcmop,-zcmp,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zimop,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }
attributes #9 = { mustprogress nofree nounwind willreturn allockind("alloc,zeroed") allocsize(0,1) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv64" "target-features"="+64bit,+a,+d,+f,+m,+relax,+zicsr,+zifencei,-c,-e,-experimental-smmpm,-experimental-smnpm,-experimental-ssnpm,-experimental-sspm,-experimental-ssqosid,-experimental-supm,-experimental-zalasr,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-shcounterenw,-shgatpa,-shtvala,-shvsatpa,-shvstvala,-shvstvecd,-smaia,-smepmp,-smstateen,-ssaia,-ssccptr,-sscofpmf,-sscounterenw,-ssstateen,-ssstrict,-sstc,-sstvala,-sstvecd,-ssu64xl,-svade,-svadu,-svbare,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfcease,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xsifivecdiscarddlone,-xsifivecflushdlone,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zaamo,-zabha,-zacas,-zalrsc,-zama16b,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zca,-zcb,-zcd,-zce,-zcf,-zcmop,-zcmp,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zimop,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }
attributes #10 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #11 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #12 = { nofree nounwind }
attributes #13 = { nounwind }
attributes #14 = { noreturn nounwind }
attributes #15 = { nounwind allocsize(0) }
attributes #16 = { nounwind allocsize(0,1) }
attributes #17 = { cold }

!llvm.module.flags = !{!0, !1, !2, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"lp64d"}
!2 = !{i32 6, !"riscv-isa", !3}
!3 = !{!"rv64i2p1_m2p0_a2p1_f2p2_d2p2_zicsr2p0_zifencei2p0"}
!4 = !{i32 8, !"SmallDataLimit", i32 8}
!5 = !{!"clang version 19.0.0git (https://github.com/llvm/llvm-project.git 4b702946006cfa9be9ab646ce5fc5b25248edd81)"}
!6 = !{!7, !7, i64 0}
!7 = !{!"long", !8, i64 0}
!8 = !{!"omnipotent char", !9, i64 0}
!9 = !{!"Simple C/C++ TBAA"}
!10 = !{!11, !7, i64 0}
!11 = !{!"", !7, i64 0, !7, i64 8}
!12 = !{i64 0, i64 8, !6, i64 8, i64 8, !6}
!13 = distinct !{!13, !14}
!14 = !{!"llvm.loop.mustprogress"}
!15 = distinct !{!15, !14}
!16 = !{!17, !18, i64 8}
!17 = !{!"", !18, i64 0, !18, i64 8}
!18 = !{!"any pointer", !8, i64 0}
!19 = !{!17, !18, i64 0}
!20 = distinct !{!20, !14}
!21 = distinct !{!21, !14}
!22 = distinct !{!22, !14}
!23 = distinct !{!23, !14}
!24 = distinct !{!24, !14}
!25 = distinct !{!25, !14}
!26 = distinct !{!26, !14}
!27 = !{!28, !28, i64 0}
!28 = !{!"int", !8, i64 0}
!29 = distinct !{!29, !14}
!30 = !{!11, !7, i64 8}
!31 = distinct !{!31, !14}
!32 = distinct !{!32, !14}
!33 = distinct !{!33, !14}
!34 = distinct !{!34, !14}
!35 = distinct !{!35, !14}
!36 = distinct !{!36, !14}
!37 = distinct !{!37, !14}
!38 = !{!18, !18, i64 0}
!39 = distinct !{!39, !14}
!40 = distinct !{!40, !14}
!41 = distinct !{!41, !14}
!42 = distinct !{!42, !14, !43}
!43 = !{!"llvm.loop.unroll.disable"}
!44 = distinct !{!44, !43}
!45 = distinct !{!45, !14}
!46 = distinct !{!46, !14}
!47 = distinct !{!47, !14}
!48 = distinct !{!48, !14}
!49 = distinct !{!49, !14}
!50 = !{i64 40121}
!51 = !{i64 40232}
!52 = !{i64 40349}
!53 = !{i64 40442}
