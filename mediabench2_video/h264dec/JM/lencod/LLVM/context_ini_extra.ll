; ModuleID = 'src/context_ini.c'
source_filename = "src/context_ini.c"
target datalayout = "e-m:e-p:64:64-i64:64-i128:128-n32:64-S128"
target triple = "riscv64-unknown-unknown"

%struct.BiContextType = type { i16, i8, i64 }

@probability = dso_local local_unnamed_addr global [128 x double] [double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 0.000000e+00, double 5.000000e-01, double 4.746090e-01, double 4.505070e-01, double 4.276290e-01, double 4.059120e-01, double 3.852990e-01, double 3.657320e-01, double 3.471590e-01, double 3.295300e-01, double 3.127950e-01, double 2.969110e-01, double 2.818330e-01, double 2.675200e-01, double 2.539350e-01, double 2.410390e-01, double 2.287990e-01, double 2.171800e-01, double 2.061510e-01, double 1.956820e-01, double 1.857440e-01, double 1.763120e-01, double 1.673580e-01, double 1.588590e-01, double 1.507920e-01, double 1.431340e-01, double 1.358660e-01, double 1.289660e-01, double 1.224170e-01, double 1.162000e-01, double 1.102990e-01, double 1.046980e-01, double 0x3FB9710880D801B4, double 9.433400e-02, double 0x3FB6EC4A4095F245, double 8.499600e-02, double 8.068000e-02, double 0x3FB39AF1886DF82B, double 0x3FB29C12F09D8C6D, double 0x3FB1AA1D755BCCAF, double 6.549800e-02, double 6.217200e-02, double 5.901400e-02, double 5.601800e-02, double 5.317300e-02, double 5.047300e-02, double 4.790900e-02, double 4.547600e-02, double 4.316700e-02, double 4.097500e-02, double 3.889400e-02, double 3.691900e-02, double 3.504400e-02, double 3.326400e-02, double 3.157500e-02, double 2.997200e-02, double 2.845000e-02, double 2.700500e-02, double 2.563300e-02, double 2.433200e-02, double 2.309600e-02, double 2.192300e-02, double 2.081000e-02, double 1.975300e-02, double 1.875000e-02], align 8
@img = external dso_local local_unnamed_addr global ptr, align 8
@input = external dso_local local_unnamed_addr global ptr, align 8
@num_mb_per_slice = dso_local local_unnamed_addr global i32 0, align 4
@number_of_slices = dso_local local_unnamed_addr global i32 0, align 4
@initialized = dso_local local_unnamed_addr global ptr null, align 8
@.str = private unnamed_addr constant [35 x i8] c"create_context_memory: initialized\00", align 1
@model_number = dso_local local_unnamed_addr global ptr null, align 8
@.str.1 = private unnamed_addr constant [36 x i8] c"create_context_memory: model_number\00", align 1
@entropy = dso_local local_unnamed_addr global [128 x double] zeroinitializer, align 8
@INIT_MB_TYPE_I = internal constant [1 x [3 x [11 x [2 x i32]]]] [[3 x [11 x [2 x i32]]] [[11 x [2 x i32]] [[2 x i32] [i32 20, i32 -15], [2 x i32] [i32 2, i32 54], [2 x i32] [i32 3, i32 74], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -28, i32 127], [2 x i32] [i32 -23, i32 104], [2 x i32] [i32 -6, i32 53], [2 x i32] [i32 -1, i32 54], [2 x i32] [i32 7, i32 51], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [11 x [2 x i32]] [[2 x i32] [i32 20, i32 -15], [2 x i32] [i32 2, i32 54], [2 x i32] [i32 3, i32 74], [2 x i32] [i32 20, i32 -15], [2 x i32] [i32 2, i32 54], [2 x i32] [i32 3, i32 74], [2 x i32] [i32 -28, i32 127], [2 x i32] [i32 -23, i32 104], [2 x i32] [i32 -6, i32 53], [2 x i32] [i32 -1, i32 54], [2 x i32] [i32 7, i32 51]], [11 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]]], align 4
@INIT_MB_TYPE_P = internal constant [3 x [3 x [11 x [2 x i32]]]] [[3 x [11 x [2 x i32]]] [[11 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [11 x [2 x i32]] [[2 x i32] [i32 23, i32 33], [2 x i32] [i32 23, i32 2], [2 x i32] [i32 21, i32 0], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 1, i32 9], [2 x i32] [i32 0, i32 49], [2 x i32] [i32 -37, i32 118], [2 x i32] [i32 5, i32 57], [2 x i32] [i32 -13, i32 78], [2 x i32] [i32 -11, i32 65], [2 x i32] [i32 1, i32 62]], [11 x [2 x i32]] [[2 x i32] [i32 26, i32 67], [2 x i32] [i32 16, i32 90], [2 x i32] [i32 9, i32 104], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -46, i32 127], [2 x i32] [i32 -20, i32 104], [2 x i32] [i32 1, i32 67], [2 x i32] [i32 18, i32 64], [2 x i32] [i32 9, i32 43], [2 x i32] [i32 29, i32 0], [2 x i32] [i32 0, i32 64]]], [3 x [11 x [2 x i32]]] [[11 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [11 x [2 x i32]] [[2 x i32] [i32 22, i32 25], [2 x i32] [i32 34, i32 0], [2 x i32] [i32 16, i32 0], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -2, i32 9], [2 x i32] [i32 4, i32 41], [2 x i32] [i32 -29, i32 118], [2 x i32] [i32 2, i32 65], [2 x i32] [i32 -6, i32 71], [2 x i32] [i32 -13, i32 79], [2 x i32] [i32 5, i32 52]], [11 x [2 x i32]] [[2 x i32] [i32 57, i32 2], [2 x i32] [i32 41, i32 36], [2 x i32] [i32 26, i32 69], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -45, i32 127], [2 x i32] [i32 -15, i32 101], [2 x i32] [i32 -4, i32 76], [2 x i32] [i32 26, i32 34], [2 x i32] [i32 19, i32 22], [2 x i32] [i32 40, i32 0], [2 x i32] [i32 0, i32 64]]], [3 x [11 x [2 x i32]]] [[11 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [11 x [2 x i32]] [[2 x i32] [i32 29, i32 16], [2 x i32] [i32 25, i32 0], [2 x i32] [i32 14, i32 0], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -10, i32 51], [2 x i32] [i32 -3, i32 62], [2 x i32] [i32 -27, i32 99], [2 x i32] [i32 26, i32 16], [2 x i32] [i32 -4, i32 85], [2 x i32] [i32 -24, i32 102], [2 x i32] [i32 5, i32 57]], [11 x [2 x i32]] [[2 x i32] [i32 54, i32 0], [2 x i32] [i32 37, i32 42], [2 x i32] [i32 12, i32 97], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -32, i32 127], [2 x i32] [i32 -22, i32 117], [2 x i32] [i32 -2, i32 74], [2 x i32] [i32 20, i32 40], [2 x i32] [i32 20, i32 10], [2 x i32] [i32 29, i32 0], [2 x i32] [i32 0, i32 64]]]], align 4
@INIT_B8_TYPE_I = internal constant [1 x [2 x [9 x [2 x i32]]]] [[2 x [9 x [2 x i32]]] [[9 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [9 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]]], align 4
@INIT_B8_TYPE_P = internal constant [3 x [2 x [9 x [2 x i32]]]] [[2 x [9 x [2 x i32]]] [[9 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 12, i32 49], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -4, i32 73], [2 x i32] [i32 17, i32 50], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [9 x [2 x i32]] [[2 x i32] [i32 -6, i32 86], [2 x i32] [i32 -17, i32 95], [2 x i32] [i32 -6, i32 61], [2 x i32] [i32 9, i32 45], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]], [2 x [9 x [2 x i32]]] [[9 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 9, i32 50], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -3, i32 70], [2 x i32] [i32 10, i32 54], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [9 x [2 x i32]] [[2 x i32] [i32 6, i32 69], [2 x i32] [i32 -13, i32 90], [2 x i32] [i32 0, i32 52], [2 x i32] [i32 8, i32 43], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]], [2 x [9 x [2 x i32]]] [[9 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 6, i32 57], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -17, i32 73], [2 x i32] [i32 14, i32 57], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [9 x [2 x i32]] [[2 x i32] [i32 -6, i32 93], [2 x i32] [i32 -14, i32 88], [2 x i32] [i32 -6, i32 44], [2 x i32] [i32 4, i32 55], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]]], align 4
@INIT_MV_RES_I = internal constant [1 x [2 x [10 x [2 x i32]]]] [[2 x [10 x [2 x i32]]] [[10 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [10 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]]], align 4
@INIT_MV_RES_P = internal constant [3 x [2 x [10 x [2 x i32]]]] [[2 x [10 x [2 x i32]]] [[10 x [2 x i32]] [[2 x i32] [i32 -3, i32 69], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -6, i32 81], [2 x i32] [i32 -11, i32 96], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 58], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -3, i32 76], [2 x i32] [i32 -10, i32 94], [2 x i32] [i32 0, i32 64]], [10 x [2 x i32]] [[2 x i32] [i32 6, i32 55], [2 x i32] [i32 7, i32 67], [2 x i32] [i32 -5, i32 86], [2 x i32] [i32 2, i32 88], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 5, i32 54], [2 x i32] [i32 4, i32 69], [2 x i32] [i32 -3, i32 81], [2 x i32] [i32 0, i32 88], [2 x i32] [i32 0, i32 64]]], [2 x [10 x [2 x i32]]] [[10 x [2 x i32]] [[2 x i32] [i32 -2, i32 69], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -5, i32 82], [2 x i32] [i32 -10, i32 96], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 1, i32 56], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -3, i32 74], [2 x i32] [i32 -6, i32 85], [2 x i32] [i32 0, i32 64]], [10 x [2 x i32]] [[2 x i32] [i32 2, i32 59], [2 x i32] [i32 2, i32 75], [2 x i32] [i32 -3, i32 87], [2 x i32] [i32 -3, i32 100], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 59], [2 x i32] [i32 -3, i32 81], [2 x i32] [i32 -7, i32 86], [2 x i32] [i32 -5, i32 95], [2 x i32] [i32 0, i32 64]]], [2 x [10 x [2 x i32]]] [[10 x [2 x i32]] [[2 x i32] [i32 -11, i32 89], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -15, i32 103], [2 x i32] [i32 -21, i32 116], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 1, i32 63], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -5, i32 85], [2 x i32] [i32 -13, i32 106], [2 x i32] [i32 0, i32 64]], [10 x [2 x i32]] [[2 x i32] [i32 19, i32 57], [2 x i32] [i32 20, i32 58], [2 x i32] [i32 4, i32 84], [2 x i32] [i32 6, i32 96], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 5, i32 63], [2 x i32] [i32 6, i32 75], [2 x i32] [i32 -3, i32 90], [2 x i32] [i32 -1, i32 101], [2 x i32] [i32 0, i32 64]]]], align 4
@INIT_REF_NO_I = internal constant [1 x [2 x [6 x [2 x i32]]]] [[2 x [6 x [2 x i32]]] [[6 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [6 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]]], align 4
@INIT_REF_NO_P = internal constant [3 x [2 x [6 x [2 x i32]]]] [[2 x [6 x [2 x i32]]] [[6 x [2 x i32]] [[2 x i32] [i32 -7, i32 67], [2 x i32] [i32 -5, i32 74], [2 x i32] [i32 -4, i32 74], [2 x i32] [i32 -5, i32 80], [2 x i32] [i32 -7, i32 72], [2 x i32] [i32 1, i32 58]], [6 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]], [2 x [6 x [2 x i32]]] [[6 x [2 x i32]] [[2 x i32] [i32 -1, i32 66], [2 x i32] [i32 -1, i32 77], [2 x i32] [i32 1, i32 70], [2 x i32] [i32 -2, i32 86], [2 x i32] [i32 -5, i32 72], [2 x i32] [i32 0, i32 61]], [6 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]], [2 x [6 x [2 x i32]]] [[6 x [2 x i32]] [[2 x i32] [i32 3, i32 55], [2 x i32] [i32 -4, i32 79], [2 x i32] [i32 -2, i32 75], [2 x i32] [i32 -12, i32 97], [2 x i32] [i32 -7, i32 50], [2 x i32] [i32 1, i32 60]], [6 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]]], align 4
@INIT_DELTA_QP_I = internal constant [1 x [1 x [4 x [2 x i32]]]] [[1 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 0, i32 41], [2 x i32] [i32 0, i32 63], [2 x i32] [i32 0, i32 63], [2 x i32] [i32 0, i32 63]]]], align 4
@INIT_DELTA_QP_P = internal constant [3 x [1 x [4 x [2 x i32]]]] [[1 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 0, i32 41], [2 x i32] [i32 0, i32 63], [2 x i32] [i32 0, i32 63], [2 x i32] [i32 0, i32 63]]], [1 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 0, i32 41], [2 x i32] [i32 0, i32 63], [2 x i32] [i32 0, i32 63], [2 x i32] [i32 0, i32 63]]], [1 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 0, i32 41], [2 x i32] [i32 0, i32 63], [2 x i32] [i32 0, i32 63], [2 x i32] [i32 0, i32 63]]]], align 4
@INIT_MB_AFF_I = internal constant [1 x [1 x [4 x [2 x i32]]]] [[1 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 0, i32 11], [2 x i32] [i32 1, i32 55], [2 x i32] [i32 0, i32 69], [2 x i32] [i32 0, i32 64]]]], align 4
@INIT_MB_AFF_P = internal constant [3 x [1 x [4 x [2 x i32]]]] [[1 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 0, i32 45], [2 x i32] [i32 -4, i32 78], [2 x i32] [i32 -3, i32 96], [2 x i32] [i32 0, i32 64]]], [1 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 13, i32 15], [2 x i32] [i32 7, i32 51], [2 x i32] [i32 2, i32 80], [2 x i32] [i32 0, i32 64]]], [1 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 7, i32 34], [2 x i32] [i32 -9, i32 88], [2 x i32] [i32 -20, i32 127], [2 x i32] [i32 0, i32 64]]]], align 4
@INIT_TRANSFORM_SIZE_I = internal constant [1 x [1 x [3 x [2 x i32]]]] [[1 x [3 x [2 x i32]]] [[3 x [2 x i32]] [[2 x i32] [i32 31, i32 21], [2 x i32] [i32 31, i32 31], [2 x i32] [i32 25, i32 50]]]], align 4
@INIT_TRANSFORM_SIZE_P = internal constant [3 x [1 x [3 x [2 x i32]]]] [[1 x [3 x [2 x i32]]] [[3 x [2 x i32]] [[2 x i32] [i32 12, i32 40], [2 x i32] [i32 11, i32 51], [2 x i32] [i32 14, i32 59]]], [1 x [3 x [2 x i32]]] [[3 x [2 x i32]] [[2 x i32] [i32 25, i32 32], [2 x i32] [i32 21, i32 49], [2 x i32] [i32 21, i32 54]]], [1 x [3 x [2 x i32]]] [[3 x [2 x i32]] [[2 x i32] [i32 21, i32 33], [2 x i32] [i32 19, i32 50], [2 x i32] [i32 17, i32 61]]]], align 4
@INIT_IPR_I = internal constant [1 x [1 x [2 x [2 x i32]]]] [[1 x [2 x [2 x i32]]] [[2 x [2 x i32]] [[2 x i32] [i32 13, i32 41], [2 x i32] [i32 3, i32 62]]]], align 4
@INIT_IPR_P = internal constant [3 x [1 x [2 x [2 x i32]]]] [[1 x [2 x [2 x i32]]] [[2 x [2 x i32]] [[2 x i32] [i32 13, i32 41], [2 x i32] [i32 3, i32 62]]], [1 x [2 x [2 x i32]]] [[2 x [2 x i32]] [[2 x i32] [i32 13, i32 41], [2 x i32] [i32 3, i32 62]]], [1 x [2 x [2 x i32]]] [[2 x [2 x i32]] [[2 x i32] [i32 13, i32 41], [2 x i32] [i32 3, i32 62]]]], align 4
@INIT_CIPR_I = internal constant [1 x [1 x [4 x [2 x i32]]]] [[1 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 -9, i32 83], [2 x i32] [i32 4, i32 86], [2 x i32] [i32 0, i32 97], [2 x i32] [i32 -7, i32 72]]]], align 4
@INIT_CIPR_P = internal constant [3 x [1 x [4 x [2 x i32]]]] [[1 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 -9, i32 83], [2 x i32] [i32 4, i32 86], [2 x i32] [i32 0, i32 97], [2 x i32] [i32 -7, i32 72]]], [1 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 -9, i32 83], [2 x i32] [i32 4, i32 86], [2 x i32] [i32 0, i32 97], [2 x i32] [i32 -7, i32 72]]], [1 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 -9, i32 83], [2 x i32] [i32 4, i32 86], [2 x i32] [i32 0, i32 97], [2 x i32] [i32 -7, i32 72]]]], align 4
@INIT_CBP_I = internal constant [1 x [3 x [4 x [2 x i32]]]] [[3 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 -17, i32 127], [2 x i32] [i32 -13, i32 102], [2 x i32] [i32 0, i32 82], [2 x i32] [i32 -7, i32 74]], [4 x [2 x i32]] [[2 x i32] [i32 -21, i32 107], [2 x i32] [i32 -27, i32 127], [2 x i32] [i32 -31, i32 127], [2 x i32] [i32 -24, i32 127]], [4 x [2 x i32]] [[2 x i32] [i32 -18, i32 95], [2 x i32] [i32 -27, i32 127], [2 x i32] [i32 -21, i32 114], [2 x i32] [i32 -30, i32 127]]]], align 4
@INIT_CBP_P = internal constant [3 x [3 x [4 x [2 x i32]]]] [[3 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 -27, i32 126], [2 x i32] [i32 -28, i32 98], [2 x i32] [i32 -25, i32 101], [2 x i32] [i32 -23, i32 67]], [4 x [2 x i32]] [[2 x i32] [i32 -28, i32 82], [2 x i32] [i32 -20, i32 94], [2 x i32] [i32 -16, i32 83], [2 x i32] [i32 -22, i32 110]], [4 x [2 x i32]] [[2 x i32] [i32 -21, i32 91], [2 x i32] [i32 -18, i32 102], [2 x i32] [i32 -13, i32 93], [2 x i32] [i32 -29, i32 127]]], [3 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 -39, i32 127], [2 x i32] [i32 -18, i32 91], [2 x i32] [i32 -17, i32 96], [2 x i32] [i32 -26, i32 81]], [4 x [2 x i32]] [[2 x i32] [i32 -35, i32 98], [2 x i32] [i32 -24, i32 102], [2 x i32] [i32 -23, i32 97], [2 x i32] [i32 -27, i32 119]], [4 x [2 x i32]] [[2 x i32] [i32 -24, i32 99], [2 x i32] [i32 -21, i32 110], [2 x i32] [i32 -18, i32 102], [2 x i32] [i32 -36, i32 127]]], [3 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 -36, i32 127], [2 x i32] [i32 -17, i32 91], [2 x i32] [i32 -14, i32 95], [2 x i32] [i32 -25, i32 84]], [4 x [2 x i32]] [[2 x i32] [i32 -25, i32 86], [2 x i32] [i32 -12, i32 89], [2 x i32] [i32 -17, i32 91], [2 x i32] [i32 -31, i32 127]], [4 x [2 x i32]] [[2 x i32] [i32 -14, i32 76], [2 x i32] [i32 -18, i32 103], [2 x i32] [i32 -13, i32 90], [2 x i32] [i32 -37, i32 127]]]], align 4
@INIT_BCBP_I = internal constant [1 x [8 x [4 x [2 x i32]]]] [[8 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 -17, i32 123], [2 x i32] [i32 -12, i32 115], [2 x i32] [i32 -16, i32 122], [2 x i32] [i32 -11, i32 115]], [4 x [2 x i32]] [[2 x i32] [i32 -12, i32 63], [2 x i32] [i32 -2, i32 68], [2 x i32] [i32 -15, i32 84], [2 x i32] [i32 -13, i32 104]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [4 x [2 x i32]] [[2 x i32] [i32 -3, i32 70], [2 x i32] [i32 -8, i32 93], [2 x i32] [i32 -10, i32 90], [2 x i32] [i32 -30, i32 127]], [4 x [2 x i32]] [[2 x i32] [i32 -1, i32 74], [2 x i32] [i32 -6, i32 97], [2 x i32] [i32 -7, i32 91], [2 x i32] [i32 -20, i32 127]], [4 x [2 x i32]] [[2 x i32] [i32 -4, i32 56], [2 x i32] [i32 -5, i32 82], [2 x i32] [i32 -7, i32 76], [2 x i32] [i32 -22, i32 125]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]]], align 4
@INIT_BCBP_P = internal constant [3 x [8 x [4 x [2 x i32]]]] [[8 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 -7, i32 92], [2 x i32] [i32 -5, i32 89], [2 x i32] [i32 -7, i32 96], [2 x i32] [i32 -13, i32 108]], [4 x [2 x i32]] [[2 x i32] [i32 -3, i32 46], [2 x i32] [i32 -1, i32 65], [2 x i32] [i32 -1, i32 57], [2 x i32] [i32 -9, i32 93]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [4 x [2 x i32]] [[2 x i32] [i32 -3, i32 74], [2 x i32] [i32 -9, i32 92], [2 x i32] [i32 -8, i32 87], [2 x i32] [i32 -23, i32 126]], [4 x [2 x i32]] [[2 x i32] [i32 5, i32 54], [2 x i32] [i32 6, i32 60], [2 x i32] [i32 6, i32 59], [2 x i32] [i32 6, i32 69]], [4 x [2 x i32]] [[2 x i32] [i32 -1, i32 48], [2 x i32] [i32 0, i32 68], [2 x i32] [i32 -4, i32 69], [2 x i32] [i32 -8, i32 88]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]], [8 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 0, i32 80], [2 x i32] [i32 -5, i32 89], [2 x i32] [i32 -7, i32 94], [2 x i32] [i32 -4, i32 92]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 39], [2 x i32] [i32 0, i32 65], [2 x i32] [i32 -15, i32 84], [2 x i32] [i32 -35, i32 127]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [4 x [2 x i32]] [[2 x i32] [i32 -2, i32 73], [2 x i32] [i32 -12, i32 104], [2 x i32] [i32 -9, i32 91], [2 x i32] [i32 -31, i32 127]], [4 x [2 x i32]] [[2 x i32] [i32 3, i32 55], [2 x i32] [i32 7, i32 56], [2 x i32] [i32 7, i32 55], [2 x i32] [i32 8, i32 61]], [4 x [2 x i32]] [[2 x i32] [i32 -3, i32 53], [2 x i32] [i32 0, i32 68], [2 x i32] [i32 -7, i32 74], [2 x i32] [i32 -9, i32 88]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]], [8 x [4 x [2 x i32]]] [[4 x [2 x i32]] [[2 x i32] [i32 11, i32 80], [2 x i32] [i32 5, i32 76], [2 x i32] [i32 2, i32 84], [2 x i32] [i32 5, i32 78]], [4 x [2 x i32]] [[2 x i32] [i32 -6, i32 55], [2 x i32] [i32 4, i32 61], [2 x i32] [i32 -14, i32 83], [2 x i32] [i32 -37, i32 127]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [4 x [2 x i32]] [[2 x i32] [i32 -5, i32 79], [2 x i32] [i32 -11, i32 104], [2 x i32] [i32 -11, i32 91], [2 x i32] [i32 -30, i32 127]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 65], [2 x i32] [i32 -2, i32 79], [2 x i32] [i32 0, i32 72], [2 x i32] [i32 -4, i32 92]], [4 x [2 x i32]] [[2 x i32] [i32 -6, i32 56], [2 x i32] [i32 3, i32 68], [2 x i32] [i32 -8, i32 71], [2 x i32] [i32 -13, i32 98]], [4 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]]], align 4
@INIT_MAP_I = internal constant [1 x [8 x [15 x [2 x i32]]]] [[8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 -7, i32 93], [2 x i32] [i32 -11, i32 87], [2 x i32] [i32 -3, i32 77], [2 x i32] [i32 -5, i32 71], [2 x i32] [i32 -4, i32 63], [2 x i32] [i32 -4, i32 68], [2 x i32] [i32 -12, i32 84], [2 x i32] [i32 -7, i32 62], [2 x i32] [i32 -7, i32 65], [2 x i32] [i32 8, i32 61], [2 x i32] [i32 5, i32 56], [2 x i32] [i32 -2, i32 66], [2 x i32] [i32 1, i32 64], [2 x i32] [i32 0, i32 61], [2 x i32] [i32 -2, i32 78]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 1, i32 50], [2 x i32] [i32 7, i32 52], [2 x i32] [i32 10, i32 35], [2 x i32] [i32 0, i32 44], [2 x i32] [i32 11, i32 38], [2 x i32] [i32 1, i32 45], [2 x i32] [i32 0, i32 46], [2 x i32] [i32 5, i32 44], [2 x i32] [i32 31, i32 17], [2 x i32] [i32 1, i32 51], [2 x i32] [i32 7, i32 50], [2 x i32] [i32 28, i32 19], [2 x i32] [i32 16, i32 33], [2 x i32] [i32 14, i32 62]], [15 x [2 x i32]] [[2 x i32] [i32 -17, i32 120], [2 x i32] [i32 -20, i32 112], [2 x i32] [i32 -18, i32 114], [2 x i32] [i32 -11, i32 85], [2 x i32] [i32 -15, i32 92], [2 x i32] [i32 -14, i32 89], [2 x i32] [i32 -26, i32 71], [2 x i32] [i32 -15, i32 81], [2 x i32] [i32 -14, i32 80], [2 x i32] [i32 0, i32 68], [2 x i32] [i32 -14, i32 70], [2 x i32] [i32 -24, i32 56], [2 x i32] [i32 -23, i32 68], [2 x i32] [i32 -24, i32 50], [2 x i32] [i32 -11, i32 74]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 -13, i32 108], [2 x i32] [i32 -15, i32 100], [2 x i32] [i32 -13, i32 101], [2 x i32] [i32 -13, i32 91], [2 x i32] [i32 -12, i32 94], [2 x i32] [i32 -10, i32 88], [2 x i32] [i32 -16, i32 84], [2 x i32] [i32 -10, i32 86], [2 x i32] [i32 -7, i32 83], [2 x i32] [i32 -13, i32 87], [2 x i32] [i32 -19, i32 94], [2 x i32] [i32 1, i32 70], [2 x i32] [i32 0, i32 72], [2 x i32] [i32 -5, i32 74], [2 x i32] [i32 18, i32 59]], [15 x [2 x i32]] [[2 x i32] [i32 -8, i32 102], [2 x i32] [i32 -15, i32 100], [2 x i32] [i32 0, i32 95], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 -4, i32 75], [2 x i32] [i32 2, i32 72], [2 x i32] [i32 -11, i32 75], [2 x i32] [i32 -3, i32 71], [2 x i32] [i32 15, i32 46], [2 x i32] [i32 -13, i32 69], [2 x i32] [i32 0, i32 62], [2 x i32] [i32 0, i32 65], [2 x i32] [i32 21, i32 37], [2 x i32] [i32 -15, i32 72], [2 x i32] [i32 9, i32 57], [2 x i32] [i32 16, i32 54], [2 x i32] [i32 0, i32 62], [2 x i32] [i32 12, i32 72]]]], align 4
@INIT_MAP_P = internal constant [3 x [8 x [15 x [2 x i32]]]] [[8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 -2, i32 85], [2 x i32] [i32 -6, i32 78], [2 x i32] [i32 -1, i32 75], [2 x i32] [i32 -7, i32 77], [2 x i32] [i32 2, i32 54], [2 x i32] [i32 5, i32 50], [2 x i32] [i32 -3, i32 68], [2 x i32] [i32 1, i32 50], [2 x i32] [i32 6, i32 42], [2 x i32] [i32 -4, i32 81], [2 x i32] [i32 1, i32 63], [2 x i32] [i32 -4, i32 70], [2 x i32] [i32 0, i32 67], [2 x i32] [i32 2, i32 57], [2 x i32] [i32 -2, i32 76]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 11, i32 35], [2 x i32] [i32 4, i32 64], [2 x i32] [i32 1, i32 61], [2 x i32] [i32 11, i32 35], [2 x i32] [i32 18, i32 25], [2 x i32] [i32 12, i32 24], [2 x i32] [i32 13, i32 29], [2 x i32] [i32 13, i32 36], [2 x i32] [i32 -10, i32 93], [2 x i32] [i32 -7, i32 73], [2 x i32] [i32 -2, i32 73], [2 x i32] [i32 13, i32 46], [2 x i32] [i32 9, i32 49], [2 x i32] [i32 -7, i32 100]], [15 x [2 x i32]] [[2 x i32] [i32 -4, i32 79], [2 x i32] [i32 -7, i32 71], [2 x i32] [i32 -5, i32 69], [2 x i32] [i32 -9, i32 70], [2 x i32] [i32 -8, i32 66], [2 x i32] [i32 -10, i32 68], [2 x i32] [i32 -19, i32 73], [2 x i32] [i32 -12, i32 69], [2 x i32] [i32 -16, i32 70], [2 x i32] [i32 -15, i32 67], [2 x i32] [i32 -20, i32 62], [2 x i32] [i32 -19, i32 70], [2 x i32] [i32 -16, i32 66], [2 x i32] [i32 -22, i32 65], [2 x i32] [i32 -20, i32 63]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 9, i32 53], [2 x i32] [i32 2, i32 53], [2 x i32] [i32 5, i32 53], [2 x i32] [i32 -2, i32 61], [2 x i32] [i32 0, i32 56], [2 x i32] [i32 0, i32 56], [2 x i32] [i32 -13, i32 63], [2 x i32] [i32 -5, i32 60], [2 x i32] [i32 -1, i32 62], [2 x i32] [i32 4, i32 57], [2 x i32] [i32 -6, i32 69], [2 x i32] [i32 4, i32 57], [2 x i32] [i32 14, i32 39], [2 x i32] [i32 4, i32 51], [2 x i32] [i32 13, i32 68]], [15 x [2 x i32]] [[2 x i32] [i32 3, i32 64], [2 x i32] [i32 1, i32 61], [2 x i32] [i32 9, i32 63], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 7, i32 50], [2 x i32] [i32 16, i32 39], [2 x i32] [i32 5, i32 44], [2 x i32] [i32 4, i32 52], [2 x i32] [i32 11, i32 48], [2 x i32] [i32 -5, i32 60], [2 x i32] [i32 -1, i32 59], [2 x i32] [i32 0, i32 59], [2 x i32] [i32 22, i32 33], [2 x i32] [i32 5, i32 44], [2 x i32] [i32 14, i32 43], [2 x i32] [i32 -1, i32 78], [2 x i32] [i32 0, i32 60], [2 x i32] [i32 9, i32 69]]], [8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 -13, i32 103], [2 x i32] [i32 -13, i32 91], [2 x i32] [i32 -9, i32 89], [2 x i32] [i32 -14, i32 92], [2 x i32] [i32 -8, i32 76], [2 x i32] [i32 -12, i32 87], [2 x i32] [i32 -23, i32 110], [2 x i32] [i32 -24, i32 105], [2 x i32] [i32 -10, i32 78], [2 x i32] [i32 -20, i32 112], [2 x i32] [i32 -17, i32 99], [2 x i32] [i32 -78, i32 127], [2 x i32] [i32 -70, i32 127], [2 x i32] [i32 -50, i32 127], [2 x i32] [i32 -46, i32 127]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 -4, i32 66], [2 x i32] [i32 -5, i32 78], [2 x i32] [i32 -4, i32 71], [2 x i32] [i32 -8, i32 72], [2 x i32] [i32 2, i32 59], [2 x i32] [i32 -1, i32 55], [2 x i32] [i32 -7, i32 70], [2 x i32] [i32 -6, i32 75], [2 x i32] [i32 -8, i32 89], [2 x i32] [i32 -34, i32 119], [2 x i32] [i32 -3, i32 75], [2 x i32] [i32 32, i32 20], [2 x i32] [i32 30, i32 22], [2 x i32] [i32 -44, i32 127]], [15 x [2 x i32]] [[2 x i32] [i32 -5, i32 85], [2 x i32] [i32 -6, i32 81], [2 x i32] [i32 -10, i32 77], [2 x i32] [i32 -7, i32 81], [2 x i32] [i32 -17, i32 80], [2 x i32] [i32 -18, i32 73], [2 x i32] [i32 -4, i32 74], [2 x i32] [i32 -10, i32 83], [2 x i32] [i32 -9, i32 71], [2 x i32] [i32 -9, i32 67], [2 x i32] [i32 -1, i32 61], [2 x i32] [i32 -8, i32 66], [2 x i32] [i32 -14, i32 66], [2 x i32] [i32 0, i32 59], [2 x i32] [i32 2, i32 59]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 54], [2 x i32] [i32 -5, i32 61], [2 x i32] [i32 0, i32 58], [2 x i32] [i32 -1, i32 60], [2 x i32] [i32 -3, i32 61], [2 x i32] [i32 -8, i32 67], [2 x i32] [i32 -25, i32 84], [2 x i32] [i32 -14, i32 74], [2 x i32] [i32 -5, i32 65], [2 x i32] [i32 5, i32 52], [2 x i32] [i32 2, i32 57], [2 x i32] [i32 0, i32 61], [2 x i32] [i32 -9, i32 69], [2 x i32] [i32 -11, i32 70], [2 x i32] [i32 18, i32 55]], [15 x [2 x i32]] [[2 x i32] [i32 -4, i32 71], [2 x i32] [i32 0, i32 58], [2 x i32] [i32 7, i32 61], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 9, i32 41], [2 x i32] [i32 18, i32 25], [2 x i32] [i32 9, i32 32], [2 x i32] [i32 5, i32 43], [2 x i32] [i32 9, i32 47], [2 x i32] [i32 0, i32 44], [2 x i32] [i32 0, i32 51], [2 x i32] [i32 2, i32 46], [2 x i32] [i32 19, i32 38], [2 x i32] [i32 -4, i32 66], [2 x i32] [i32 15, i32 38], [2 x i32] [i32 12, i32 42], [2 x i32] [i32 9, i32 34], [2 x i32] [i32 0, i32 89]]], [8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 -4, i32 86], [2 x i32] [i32 -12, i32 88], [2 x i32] [i32 -5, i32 82], [2 x i32] [i32 -3, i32 72], [2 x i32] [i32 -4, i32 67], [2 x i32] [i32 -8, i32 72], [2 x i32] [i32 -16, i32 89], [2 x i32] [i32 -9, i32 69], [2 x i32] [i32 -1, i32 59], [2 x i32] [i32 5, i32 66], [2 x i32] [i32 4, i32 57], [2 x i32] [i32 -4, i32 71], [2 x i32] [i32 -2, i32 71], [2 x i32] [i32 2, i32 58], [2 x i32] [i32 -1, i32 74]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 -4, i32 44], [2 x i32] [i32 -1, i32 69], [2 x i32] [i32 0, i32 62], [2 x i32] [i32 -7, i32 51], [2 x i32] [i32 -4, i32 47], [2 x i32] [i32 -6, i32 42], [2 x i32] [i32 -3, i32 41], [2 x i32] [i32 -6, i32 53], [2 x i32] [i32 8, i32 76], [2 x i32] [i32 -9, i32 78], [2 x i32] [i32 -11, i32 83], [2 x i32] [i32 9, i32 52], [2 x i32] [i32 0, i32 67], [2 x i32] [i32 -5, i32 90]], [15 x [2 x i32]] [[2 x i32] [i32 -3, i32 78], [2 x i32] [i32 -8, i32 74], [2 x i32] [i32 -9, i32 72], [2 x i32] [i32 -10, i32 72], [2 x i32] [i32 -18, i32 75], [2 x i32] [i32 -12, i32 71], [2 x i32] [i32 -11, i32 63], [2 x i32] [i32 -5, i32 70], [2 x i32] [i32 -17, i32 75], [2 x i32] [i32 -14, i32 72], [2 x i32] [i32 -16, i32 67], [2 x i32] [i32 -8, i32 53], [2 x i32] [i32 -14, i32 59], [2 x i32] [i32 -9, i32 52], [2 x i32] [i32 -11, i32 68]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 1, i32 67], [2 x i32] [i32 -15, i32 72], [2 x i32] [i32 -5, i32 75], [2 x i32] [i32 -8, i32 80], [2 x i32] [i32 -21, i32 83], [2 x i32] [i32 -21, i32 64], [2 x i32] [i32 -13, i32 31], [2 x i32] [i32 -25, i32 64], [2 x i32] [i32 -29, i32 94], [2 x i32] [i32 9, i32 75], [2 x i32] [i32 17, i32 63], [2 x i32] [i32 -8, i32 74], [2 x i32] [i32 -5, i32 35], [2 x i32] [i32 -2, i32 27], [2 x i32] [i32 13, i32 91]], [15 x [2 x i32]] [[2 x i32] [i32 3, i32 65], [2 x i32] [i32 -7, i32 69], [2 x i32] [i32 8, i32 77], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 -10, i32 66], [2 x i32] [i32 3, i32 62], [2 x i32] [i32 -3, i32 68], [2 x i32] [i32 -20, i32 81], [2 x i32] [i32 0, i32 30], [2 x i32] [i32 1, i32 7], [2 x i32] [i32 -3, i32 23], [2 x i32] [i32 -21, i32 74], [2 x i32] [i32 16, i32 66], [2 x i32] [i32 -23, i32 124], [2 x i32] [i32 17, i32 37], [2 x i32] [i32 44, i32 -18], [2 x i32] [i32 50, i32 -34], [2 x i32] [i32 -22, i32 127]]]], align 4
@INIT_LAST_I = internal constant [1 x [8 x [15 x [2 x i32]]]] [[8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 24, i32 0], [2 x i32] [i32 15, i32 9], [2 x i32] [i32 8, i32 25], [2 x i32] [i32 13, i32 18], [2 x i32] [i32 15, i32 9], [2 x i32] [i32 13, i32 19], [2 x i32] [i32 10, i32 37], [2 x i32] [i32 12, i32 18], [2 x i32] [i32 6, i32 29], [2 x i32] [i32 20, i32 33], [2 x i32] [i32 15, i32 30], [2 x i32] [i32 4, i32 45], [2 x i32] [i32 1, i32 58], [2 x i32] [i32 0, i32 62], [2 x i32] [i32 7, i32 61]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 12, i32 38], [2 x i32] [i32 11, i32 45], [2 x i32] [i32 15, i32 39], [2 x i32] [i32 11, i32 42], [2 x i32] [i32 13, i32 44], [2 x i32] [i32 16, i32 45], [2 x i32] [i32 12, i32 41], [2 x i32] [i32 10, i32 49], [2 x i32] [i32 30, i32 34], [2 x i32] [i32 18, i32 42], [2 x i32] [i32 10, i32 55], [2 x i32] [i32 17, i32 51], [2 x i32] [i32 17, i32 46], [2 x i32] [i32 0, i32 89]], [15 x [2 x i32]] [[2 x i32] [i32 23, i32 -13], [2 x i32] [i32 26, i32 -13], [2 x i32] [i32 40, i32 -15], [2 x i32] [i32 49, i32 -14], [2 x i32] [i32 44, i32 3], [2 x i32] [i32 45, i32 6], [2 x i32] [i32 44, i32 34], [2 x i32] [i32 33, i32 54], [2 x i32] [i32 19, i32 82], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 26, i32 -19], [2 x i32] [i32 22, i32 -17], [2 x i32] [i32 26, i32 -17], [2 x i32] [i32 30, i32 -25], [2 x i32] [i32 28, i32 -20], [2 x i32] [i32 33, i32 -23], [2 x i32] [i32 37, i32 -27], [2 x i32] [i32 33, i32 -23], [2 x i32] [i32 40, i32 -28], [2 x i32] [i32 38, i32 -17], [2 x i32] [i32 33, i32 -11], [2 x i32] [i32 40, i32 -15], [2 x i32] [i32 41, i32 -6], [2 x i32] [i32 38, i32 1], [2 x i32] [i32 41, i32 17]], [15 x [2 x i32]] [[2 x i32] [i32 30, i32 -6], [2 x i32] [i32 27, i32 3], [2 x i32] [i32 26, i32 22], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 37, i32 -16], [2 x i32] [i32 35, i32 -4], [2 x i32] [i32 38, i32 -8], [2 x i32] [i32 38, i32 -3], [2 x i32] [i32 37, i32 3], [2 x i32] [i32 38, i32 5], [2 x i32] [i32 42, i32 0], [2 x i32] [i32 35, i32 16], [2 x i32] [i32 39, i32 22], [2 x i32] [i32 14, i32 48], [2 x i32] [i32 27, i32 37], [2 x i32] [i32 21, i32 60], [2 x i32] [i32 12, i32 68], [2 x i32] [i32 2, i32 97]]]], align 4
@INIT_LAST_P = internal constant [3 x [8 x [15 x [2 x i32]]]] [[8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 11, i32 28], [2 x i32] [i32 2, i32 40], [2 x i32] [i32 3, i32 44], [2 x i32] [i32 0, i32 49], [2 x i32] [i32 0, i32 46], [2 x i32] [i32 2, i32 44], [2 x i32] [i32 2, i32 51], [2 x i32] [i32 0, i32 47], [2 x i32] [i32 4, i32 39], [2 x i32] [i32 2, i32 62], [2 x i32] [i32 6, i32 46], [2 x i32] [i32 0, i32 54], [2 x i32] [i32 3, i32 54], [2 x i32] [i32 2, i32 58], [2 x i32] [i32 4, i32 63]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 6, i32 51], [2 x i32] [i32 6, i32 57], [2 x i32] [i32 7, i32 53], [2 x i32] [i32 6, i32 52], [2 x i32] [i32 6, i32 55], [2 x i32] [i32 11, i32 45], [2 x i32] [i32 14, i32 36], [2 x i32] [i32 8, i32 53], [2 x i32] [i32 -1, i32 82], [2 x i32] [i32 7, i32 55], [2 x i32] [i32 -3, i32 78], [2 x i32] [i32 15, i32 46], [2 x i32] [i32 22, i32 31], [2 x i32] [i32 -1, i32 84]], [15 x [2 x i32]] [[2 x i32] [i32 9, i32 -2], [2 x i32] [i32 26, i32 -9], [2 x i32] [i32 33, i32 -9], [2 x i32] [i32 39, i32 -7], [2 x i32] [i32 41, i32 -2], [2 x i32] [i32 45, i32 3], [2 x i32] [i32 49, i32 9], [2 x i32] [i32 45, i32 27], [2 x i32] [i32 36, i32 59], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 25, i32 7], [2 x i32] [i32 30, i32 -7], [2 x i32] [i32 28, i32 3], [2 x i32] [i32 28, i32 4], [2 x i32] [i32 32, i32 0], [2 x i32] [i32 34, i32 -1], [2 x i32] [i32 30, i32 6], [2 x i32] [i32 30, i32 6], [2 x i32] [i32 32, i32 9], [2 x i32] [i32 31, i32 19], [2 x i32] [i32 26, i32 27], [2 x i32] [i32 26, i32 30], [2 x i32] [i32 37, i32 20], [2 x i32] [i32 28, i32 34], [2 x i32] [i32 17, i32 70]], [15 x [2 x i32]] [[2 x i32] [i32 1, i32 67], [2 x i32] [i32 5, i32 59], [2 x i32] [i32 9, i32 67], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 16, i32 30], [2 x i32] [i32 18, i32 32], [2 x i32] [i32 18, i32 35], [2 x i32] [i32 22, i32 29], [2 x i32] [i32 24, i32 31], [2 x i32] [i32 23, i32 38], [2 x i32] [i32 18, i32 43], [2 x i32] [i32 20, i32 41], [2 x i32] [i32 11, i32 63], [2 x i32] [i32 9, i32 59], [2 x i32] [i32 9, i32 64], [2 x i32] [i32 -1, i32 94], [2 x i32] [i32 -2, i32 89], [2 x i32] [i32 -9, i32 108]]], [8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 4, i32 45], [2 x i32] [i32 10, i32 28], [2 x i32] [i32 10, i32 31], [2 x i32] [i32 33, i32 -11], [2 x i32] [i32 52, i32 -43], [2 x i32] [i32 18, i32 15], [2 x i32] [i32 28, i32 0], [2 x i32] [i32 35, i32 -22], [2 x i32] [i32 38, i32 -25], [2 x i32] [i32 34, i32 0], [2 x i32] [i32 39, i32 -18], [2 x i32] [i32 32, i32 -12], [2 x i32] [i32 102, i32 -94], [2 x i32] zeroinitializer, [2 x i32] [i32 56, i32 -15]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 33, i32 -4], [2 x i32] [i32 29, i32 10], [2 x i32] [i32 37, i32 -5], [2 x i32] [i32 51, i32 -29], [2 x i32] [i32 39, i32 -9], [2 x i32] [i32 52, i32 -34], [2 x i32] [i32 69, i32 -58], [2 x i32] [i32 67, i32 -63], [2 x i32] [i32 44, i32 -5], [2 x i32] [i32 32, i32 7], [2 x i32] [i32 55, i32 -29], [2 x i32] [i32 32, i32 1], [2 x i32] zeroinitializer, [2 x i32] [i32 27, i32 36]], [15 x [2 x i32]] [[2 x i32] [i32 17, i32 -10], [2 x i32] [i32 32, i32 -13], [2 x i32] [i32 42, i32 -9], [2 x i32] [i32 49, i32 -5], [2 x i32] [i32 53, i32 0], [2 x i32] [i32 64, i32 3], [2 x i32] [i32 68, i32 10], [2 x i32] [i32 66, i32 27], [2 x i32] [i32 47, i32 57], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 33, i32 -25], [2 x i32] [i32 34, i32 -30], [2 x i32] [i32 36, i32 -28], [2 x i32] [i32 38, i32 -28], [2 x i32] [i32 38, i32 -27], [2 x i32] [i32 34, i32 -18], [2 x i32] [i32 35, i32 -16], [2 x i32] [i32 34, i32 -14], [2 x i32] [i32 32, i32 -8], [2 x i32] [i32 37, i32 -6], [2 x i32] [i32 35, i32 0], [2 x i32] [i32 30, i32 10], [2 x i32] [i32 28, i32 18], [2 x i32] [i32 26, i32 25], [2 x i32] [i32 29, i32 41]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 75], [2 x i32] [i32 2, i32 72], [2 x i32] [i32 8, i32 77], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 14, i32 35], [2 x i32] [i32 18, i32 31], [2 x i32] [i32 17, i32 35], [2 x i32] [i32 21, i32 30], [2 x i32] [i32 17, i32 45], [2 x i32] [i32 20, i32 42], [2 x i32] [i32 18, i32 45], [2 x i32] [i32 27, i32 26], [2 x i32] [i32 16, i32 54], [2 x i32] [i32 7, i32 66], [2 x i32] [i32 16, i32 56], [2 x i32] [i32 11, i32 73], [2 x i32] [i32 10, i32 67], [2 x i32] [i32 -10, i32 116]]], [8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 4, i32 39], [2 x i32] [i32 0, i32 42], [2 x i32] [i32 7, i32 34], [2 x i32] [i32 11, i32 29], [2 x i32] [i32 8, i32 31], [2 x i32] [i32 6, i32 37], [2 x i32] [i32 7, i32 42], [2 x i32] [i32 3, i32 40], [2 x i32] [i32 8, i32 33], [2 x i32] [i32 13, i32 43], [2 x i32] [i32 13, i32 36], [2 x i32] [i32 4, i32 47], [2 x i32] [i32 3, i32 55], [2 x i32] [i32 2, i32 58], [2 x i32] [i32 6, i32 60]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 8, i32 44], [2 x i32] [i32 11, i32 44], [2 x i32] [i32 14, i32 42], [2 x i32] [i32 7, i32 48], [2 x i32] [i32 4, i32 56], [2 x i32] [i32 4, i32 52], [2 x i32] [i32 13, i32 37], [2 x i32] [i32 9, i32 49], [2 x i32] [i32 19, i32 58], [2 x i32] [i32 10, i32 48], [2 x i32] [i32 12, i32 45], [2 x i32] [i32 0, i32 69], [2 x i32] [i32 20, i32 33], [2 x i32] [i32 8, i32 63]], [15 x [2 x i32]] [[2 x i32] [i32 9, i32 -2], [2 x i32] [i32 30, i32 -10], [2 x i32] [i32 31, i32 -4], [2 x i32] [i32 33, i32 -1], [2 x i32] [i32 33, i32 7], [2 x i32] [i32 31, i32 12], [2 x i32] [i32 37, i32 23], [2 x i32] [i32 31, i32 38], [2 x i32] [i32 20, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 35, i32 -18], [2 x i32] [i32 33, i32 -25], [2 x i32] [i32 28, i32 -3], [2 x i32] [i32 24, i32 10], [2 x i32] [i32 27, i32 0], [2 x i32] [i32 34, i32 -14], [2 x i32] [i32 52, i32 -44], [2 x i32] [i32 39, i32 -24], [2 x i32] [i32 19, i32 17], [2 x i32] [i32 31, i32 25], [2 x i32] [i32 36, i32 29], [2 x i32] [i32 24, i32 33], [2 x i32] [i32 34, i32 15], [2 x i32] [i32 30, i32 20], [2 x i32] [i32 22, i32 73]], [15 x [2 x i32]] [[2 x i32] [i32 20, i32 34], [2 x i32] [i32 19, i32 31], [2 x i32] [i32 27, i32 44], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 19, i32 16], [2 x i32] [i32 15, i32 36], [2 x i32] [i32 15, i32 36], [2 x i32] [i32 21, i32 28], [2 x i32] [i32 25, i32 21], [2 x i32] [i32 30, i32 20], [2 x i32] [i32 31, i32 12], [2 x i32] [i32 27, i32 16], [2 x i32] [i32 24, i32 42], [2 x i32] [i32 0, i32 93], [2 x i32] [i32 14, i32 56], [2 x i32] [i32 15, i32 57], [2 x i32] [i32 26, i32 38], [2 x i32] [i32 -24, i32 127]]]], align 4
@INIT_ONE_I = internal constant [1 x [8 x [5 x [2 x i32]]]] [[8 x [5 x [2 x i32]]] [[5 x [2 x i32]] [[2 x i32] [i32 -3, i32 71], [2 x i32] [i32 -6, i32 42], [2 x i32] [i32 -5, i32 50], [2 x i32] [i32 -3, i32 54], [2 x i32] [i32 -2, i32 62]], [5 x [2 x i32]] [[2 x i32] [i32 -5, i32 67], [2 x i32] [i32 -5, i32 27], [2 x i32] [i32 -3, i32 39], [2 x i32] [i32 -2, i32 44], [2 x i32] [i32 0, i32 46]], [5 x [2 x i32]] [[2 x i32] [i32 -3, i32 75], [2 x i32] [i32 -1, i32 23], [2 x i32] [i32 1, i32 34], [2 x i32] [i32 1, i32 43], [2 x i32] [i32 0, i32 54]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [5 x [2 x i32]] [[2 x i32] [i32 -12, i32 92], [2 x i32] [i32 -15, i32 55], [2 x i32] [i32 -10, i32 60], [2 x i32] [i32 -6, i32 62], [2 x i32] [i32 -4, i32 65]], [5 x [2 x i32]] [[2 x i32] [i32 -11, i32 97], [2 x i32] [i32 -20, i32 84], [2 x i32] [i32 -11, i32 79], [2 x i32] [i32 -6, i32 73], [2 x i32] [i32 -4, i32 74]], [5 x [2 x i32]] [[2 x i32] [i32 -8, i32 78], [2 x i32] [i32 -5, i32 33], [2 x i32] [i32 -4, i32 48], [2 x i32] [i32 -2, i32 53], [2 x i32] [i32 -3, i32 62]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]]], align 4
@INIT_ONE_P = internal constant [3 x [8 x [5 x [2 x i32]]]] [[8 x [5 x [2 x i32]]] [[5 x [2 x i32]] [[2 x i32] [i32 -6, i32 76], [2 x i32] [i32 -2, i32 44], [2 x i32] [i32 0, i32 45], [2 x i32] [i32 0, i32 52], [2 x i32] [i32 -3, i32 64]], [5 x [2 x i32]] [[2 x i32] [i32 -9, i32 77], [2 x i32] [i32 3, i32 24], [2 x i32] [i32 0, i32 42], [2 x i32] [i32 0, i32 48], [2 x i32] [i32 0, i32 55]], [5 x [2 x i32]] [[2 x i32] [i32 -6, i32 66], [2 x i32] [i32 -7, i32 35], [2 x i32] [i32 -7, i32 42], [2 x i32] [i32 -8, i32 45], [2 x i32] [i32 -5, i32 48]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [5 x [2 x i32]] [[2 x i32] [i32 1, i32 58], [2 x i32] [i32 -3, i32 29], [2 x i32] [i32 -1, i32 36], [2 x i32] [i32 1, i32 38], [2 x i32] [i32 2, i32 43]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 70], [2 x i32] [i32 -4, i32 29], [2 x i32] [i32 5, i32 31], [2 x i32] [i32 7, i32 42], [2 x i32] [i32 1, i32 59]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 58], [2 x i32] [i32 8, i32 5], [2 x i32] [i32 10, i32 14], [2 x i32] [i32 14, i32 18], [2 x i32] [i32 13, i32 27]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]], [8 x [5 x [2 x i32]]] [[5 x [2 x i32]] [[2 x i32] [i32 -23, i32 112], [2 x i32] [i32 -15, i32 71], [2 x i32] [i32 -7, i32 61], [2 x i32] [i32 0, i32 53], [2 x i32] [i32 -5, i32 66]], [5 x [2 x i32]] [[2 x i32] [i32 -21, i32 101], [2 x i32] [i32 -3, i32 39], [2 x i32] [i32 -5, i32 53], [2 x i32] [i32 -7, i32 61], [2 x i32] [i32 -11, i32 75]], [5 x [2 x i32]] [[2 x i32] [i32 -5, i32 71], [2 x i32] [i32 0, i32 24], [2 x i32] [i32 -1, i32 36], [2 x i32] [i32 -2, i32 42], [2 x i32] [i32 -2, i32 52]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [5 x [2 x i32]] [[2 x i32] [i32 -11, i32 76], [2 x i32] [i32 -10, i32 44], [2 x i32] [i32 -10, i32 52], [2 x i32] [i32 -10, i32 57], [2 x i32] [i32 -9, i32 58]], [5 x [2 x i32]] [[2 x i32] [i32 2, i32 66], [2 x i32] [i32 -9, i32 34], [2 x i32] [i32 1, i32 32], [2 x i32] [i32 11, i32 31], [2 x i32] [i32 5, i32 52]], [5 x [2 x i32]] [[2 x i32] [i32 3, i32 52], [2 x i32] [i32 7, i32 4], [2 x i32] [i32 10, i32 8], [2 x i32] [i32 17, i32 8], [2 x i32] [i32 16, i32 19]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]], [8 x [5 x [2 x i32]]] [[5 x [2 x i32]] [[2 x i32] [i32 -24, i32 115], [2 x i32] [i32 -22, i32 82], [2 x i32] [i32 -9, i32 62], [2 x i32] [i32 0, i32 53], [2 x i32] [i32 0, i32 59]], [5 x [2 x i32]] [[2 x i32] [i32 -21, i32 100], [2 x i32] [i32 -14, i32 57], [2 x i32] [i32 -12, i32 67], [2 x i32] [i32 -11, i32 71], [2 x i32] [i32 -10, i32 77]], [5 x [2 x i32]] [[2 x i32] [i32 -9, i32 71], [2 x i32] [i32 -7, i32 37], [2 x i32] [i32 -8, i32 44], [2 x i32] [i32 -11, i32 49], [2 x i32] [i32 -10, i32 56]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [5 x [2 x i32]] [[2 x i32] [i32 -10, i32 82], [2 x i32] [i32 -8, i32 48], [2 x i32] [i32 -8, i32 61], [2 x i32] [i32 -8, i32 66], [2 x i32] [i32 -7, i32 70]], [5 x [2 x i32]] [[2 x i32] [i32 -4, i32 79], [2 x i32] [i32 -22, i32 69], [2 x i32] [i32 -16, i32 75], [2 x i32] [i32 -2, i32 58], [2 x i32] [i32 1, i32 58]], [5 x [2 x i32]] [[2 x i32] [i32 -13, i32 81], [2 x i32] [i32 -6, i32 38], [2 x i32] [i32 -13, i32 62], [2 x i32] [i32 -6, i32 58], [2 x i32] [i32 -2, i32 59]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]]], align 4
@INIT_ABS_I = internal constant [1 x [8 x [5 x [2 x i32]]]] [[8 x [5 x [2 x i32]]] [[5 x [2 x i32]] [[2 x i32] [i32 0, i32 58], [2 x i32] [i32 1, i32 63], [2 x i32] [i32 -2, i32 72], [2 x i32] [i32 -1, i32 74], [2 x i32] [i32 -9, i32 91]], [5 x [2 x i32]] [[2 x i32] [i32 -16, i32 64], [2 x i32] [i32 -8, i32 68], [2 x i32] [i32 -10, i32 78], [2 x i32] [i32 -6, i32 77], [2 x i32] [i32 -10, i32 86]], [5 x [2 x i32]] [[2 x i32] [i32 -2, i32 55], [2 x i32] [i32 0, i32 61], [2 x i32] [i32 1, i32 64], [2 x i32] [i32 0, i32 68], [2 x i32] [i32 -9, i32 92]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [5 x [2 x i32]] [[2 x i32] [i32 -12, i32 73], [2 x i32] [i32 -8, i32 76], [2 x i32] [i32 -7, i32 80], [2 x i32] [i32 -9, i32 88], [2 x i32] [i32 -17, i32 110]], [5 x [2 x i32]] [[2 x i32] [i32 -13, i32 86], [2 x i32] [i32 -13, i32 96], [2 x i32] [i32 -11, i32 97], [2 x i32] [i32 -19, i32 117], [2 x i32] [i32 0, i32 64]], [5 x [2 x i32]] [[2 x i32] [i32 -13, i32 71], [2 x i32] [i32 -10, i32 79], [2 x i32] [i32 -12, i32 86], [2 x i32] [i32 -13, i32 90], [2 x i32] [i32 -14, i32 97]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]]], align 4
@INIT_ABS_P = internal constant [3 x [8 x [5 x [2 x i32]]]] [[8 x [5 x [2 x i32]]] [[5 x [2 x i32]] [[2 x i32] [i32 -2, i32 59], [2 x i32] [i32 -4, i32 70], [2 x i32] [i32 -4, i32 75], [2 x i32] [i32 -8, i32 82], [2 x i32] [i32 -17, i32 102]], [5 x [2 x i32]] [[2 x i32] [i32 -6, i32 59], [2 x i32] [i32 -7, i32 71], [2 x i32] [i32 -12, i32 83], [2 x i32] [i32 -11, i32 87], [2 x i32] [i32 -30, i32 119]], [5 x [2 x i32]] [[2 x i32] [i32 -12, i32 56], [2 x i32] [i32 -6, i32 60], [2 x i32] [i32 -5, i32 62], [2 x i32] [i32 -8, i32 66], [2 x i32] [i32 -8, i32 76]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [5 x [2 x i32]] [[2 x i32] [i32 -6, i32 55], [2 x i32] [i32 0, i32 58], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 -3, i32 74], [2 x i32] [i32 -10, i32 90]], [5 x [2 x i32]] [[2 x i32] [i32 -2, i32 58], [2 x i32] [i32 -3, i32 72], [2 x i32] [i32 -3, i32 81], [2 x i32] [i32 -11, i32 97], [2 x i32] [i32 0, i32 64]], [5 x [2 x i32]] [[2 x i32] [i32 2, i32 40], [2 x i32] [i32 0, i32 58], [2 x i32] [i32 -3, i32 70], [2 x i32] [i32 -6, i32 79], [2 x i32] [i32 -8, i32 85]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]], [8 x [5 x [2 x i32]]] [[5 x [2 x i32]] [[2 x i32] [i32 -11, i32 77], [2 x i32] [i32 -9, i32 80], [2 x i32] [i32 -9, i32 84], [2 x i32] [i32 -10, i32 87], [2 x i32] [i32 -34, i32 127]], [5 x [2 x i32]] [[2 x i32] [i32 -15, i32 77], [2 x i32] [i32 -17, i32 91], [2 x i32] [i32 -25, i32 107], [2 x i32] [i32 -25, i32 111], [2 x i32] [i32 -28, i32 122]], [5 x [2 x i32]] [[2 x i32] [i32 -9, i32 57], [2 x i32] [i32 -6, i32 63], [2 x i32] [i32 -4, i32 65], [2 x i32] [i32 -4, i32 67], [2 x i32] [i32 -7, i32 82]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [5 x [2 x i32]] [[2 x i32] [i32 -16, i32 72], [2 x i32] [i32 -7, i32 69], [2 x i32] [i32 -4, i32 69], [2 x i32] [i32 -5, i32 74], [2 x i32] [i32 -9, i32 86]], [5 x [2 x i32]] [[2 x i32] [i32 -2, i32 55], [2 x i32] [i32 -2, i32 67], [2 x i32] [i32 0, i32 73], [2 x i32] [i32 -8, i32 89], [2 x i32] [i32 0, i32 64]], [5 x [2 x i32]] [[2 x i32] [i32 3, i32 37], [2 x i32] [i32 -1, i32 61], [2 x i32] [i32 -5, i32 73], [2 x i32] [i32 -1, i32 70], [2 x i32] [i32 -4, i32 78]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]], [8 x [5 x [2 x i32]]] [[5 x [2 x i32]] [[2 x i32] [i32 -14, i32 85], [2 x i32] [i32 -13, i32 89], [2 x i32] [i32 -13, i32 94], [2 x i32] [i32 -11, i32 92], [2 x i32] [i32 -29, i32 127]], [5 x [2 x i32]] [[2 x i32] [i32 -21, i32 85], [2 x i32] [i32 -16, i32 88], [2 x i32] [i32 -23, i32 104], [2 x i32] [i32 -15, i32 98], [2 x i32] [i32 -37, i32 127]], [5 x [2 x i32]] [[2 x i32] [i32 -12, i32 59], [2 x i32] [i32 -8, i32 63], [2 x i32] [i32 -9, i32 67], [2 x i32] [i32 -6, i32 68], [2 x i32] [i32 -10, i32 79]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [5 x [2 x i32]] [[2 x i32] [i32 -14, i32 75], [2 x i32] [i32 -10, i32 79], [2 x i32] [i32 -9, i32 83], [2 x i32] [i32 -12, i32 92], [2 x i32] [i32 -18, i32 108]], [5 x [2 x i32]] [[2 x i32] [i32 -13, i32 78], [2 x i32] [i32 -9, i32 83], [2 x i32] [i32 -4, i32 81], [2 x i32] [i32 -13, i32 99], [2 x i32] [i32 0, i32 64]], [5 x [2 x i32]] [[2 x i32] [i32 -16, i32 73], [2 x i32] [i32 -10, i32 76], [2 x i32] [i32 -13, i32 86], [2 x i32] [i32 -9, i32 83], [2 x i32] [i32 -10, i32 87]], [5 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]]]], align 4
@INIT_FLD_MAP_I = internal constant [1 x [8 x [15 x [2 x i32]]]] [[8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 -6, i32 93], [2 x i32] [i32 -6, i32 84], [2 x i32] [i32 -8, i32 79], [2 x i32] [i32 0, i32 66], [2 x i32] [i32 -1, i32 71], [2 x i32] [i32 0, i32 62], [2 x i32] [i32 -2, i32 60], [2 x i32] [i32 -2, i32 59], [2 x i32] [i32 -5, i32 75], [2 x i32] [i32 -3, i32 62], [2 x i32] [i32 -4, i32 58], [2 x i32] [i32 -9, i32 66], [2 x i32] [i32 -1, i32 79], [2 x i32] [i32 0, i32 71], [2 x i32] [i32 3, i32 68]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 10, i32 44], [2 x i32] [i32 -7, i32 62], [2 x i32] [i32 15, i32 36], [2 x i32] [i32 14, i32 40], [2 x i32] [i32 16, i32 27], [2 x i32] [i32 12, i32 29], [2 x i32] [i32 1, i32 44], [2 x i32] [i32 20, i32 36], [2 x i32] [i32 18, i32 32], [2 x i32] [i32 5, i32 42], [2 x i32] [i32 1, i32 48], [2 x i32] [i32 10, i32 62], [2 x i32] [i32 17, i32 46], [2 x i32] [i32 9, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 -14, i32 106], [2 x i32] [i32 -13, i32 97], [2 x i32] [i32 -15, i32 90], [2 x i32] [i32 -12, i32 90], [2 x i32] [i32 -18, i32 88], [2 x i32] [i32 -10, i32 73], [2 x i32] [i32 -9, i32 79], [2 x i32] [i32 -14, i32 86], [2 x i32] [i32 -10, i32 73], [2 x i32] [i32 -10, i32 70], [2 x i32] [i32 -10, i32 69], [2 x i32] [i32 -5, i32 66], [2 x i32] [i32 -9, i32 64], [2 x i32] [i32 -5, i32 58], [2 x i32] [i32 2, i32 59]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 -12, i32 104], [2 x i32] [i32 -11, i32 97], [2 x i32] [i32 -16, i32 96], [2 x i32] [i32 -7, i32 88], [2 x i32] [i32 -8, i32 85], [2 x i32] [i32 -7, i32 85], [2 x i32] [i32 -9, i32 85], [2 x i32] [i32 -13, i32 88], [2 x i32] [i32 4, i32 66], [2 x i32] [i32 -3, i32 77], [2 x i32] [i32 -3, i32 76], [2 x i32] [i32 -6, i32 76], [2 x i32] [i32 10, i32 58], [2 x i32] [i32 -1, i32 76], [2 x i32] [i32 -1, i32 83]], [15 x [2 x i32]] [[2 x i32] [i32 -7, i32 99], [2 x i32] [i32 -14, i32 95], [2 x i32] [i32 2, i32 95], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 76], [2 x i32] [i32 -5, i32 74], [2 x i32] [i32 0, i32 70], [2 x i32] [i32 -11, i32 75], [2 x i32] [i32 1, i32 68], [2 x i32] [i32 0, i32 65], [2 x i32] [i32 -14, i32 73], [2 x i32] [i32 3, i32 62], [2 x i32] [i32 4, i32 62], [2 x i32] [i32 -1, i32 68], [2 x i32] [i32 -13, i32 75], [2 x i32] [i32 11, i32 55], [2 x i32] [i32 5, i32 64], [2 x i32] [i32 12, i32 70]]]], align 4
@INIT_FLD_MAP_P = internal constant [3 x [8 x [15 x [2 x i32]]]] [[8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 -13, i32 106], [2 x i32] [i32 -16, i32 106], [2 x i32] [i32 -10, i32 87], [2 x i32] [i32 -21, i32 114], [2 x i32] [i32 -18, i32 110], [2 x i32] [i32 -14, i32 98], [2 x i32] [i32 -22, i32 110], [2 x i32] [i32 -21, i32 106], [2 x i32] [i32 -18, i32 103], [2 x i32] [i32 -21, i32 107], [2 x i32] [i32 -23, i32 108], [2 x i32] [i32 -26, i32 112], [2 x i32] [i32 -10, i32 96], [2 x i32] [i32 -12, i32 95], [2 x i32] [i32 -5, i32 91]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 -9, i32 93], [2 x i32] [i32 -22, i32 94], [2 x i32] [i32 -5, i32 86], [2 x i32] [i32 9, i32 67], [2 x i32] [i32 -4, i32 80], [2 x i32] [i32 -10, i32 85], [2 x i32] [i32 -1, i32 70], [2 x i32] [i32 7, i32 60], [2 x i32] [i32 9, i32 58], [2 x i32] [i32 5, i32 61], [2 x i32] [i32 12, i32 50], [2 x i32] [i32 15, i32 50], [2 x i32] [i32 18, i32 49], [2 x i32] [i32 17, i32 54]], [15 x [2 x i32]] [[2 x i32] [i32 -5, i32 85], [2 x i32] [i32 -6, i32 81], [2 x i32] [i32 -10, i32 77], [2 x i32] [i32 -7, i32 81], [2 x i32] [i32 -17, i32 80], [2 x i32] [i32 -18, i32 73], [2 x i32] [i32 -4, i32 74], [2 x i32] [i32 -10, i32 83], [2 x i32] [i32 -9, i32 71], [2 x i32] [i32 -9, i32 67], [2 x i32] [i32 -1, i32 61], [2 x i32] [i32 -8, i32 66], [2 x i32] [i32 -14, i32 66], [2 x i32] [i32 0, i32 59], [2 x i32] [i32 2, i32 59]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 10, i32 41], [2 x i32] [i32 7, i32 46], [2 x i32] [i32 -1, i32 51], [2 x i32] [i32 7, i32 49], [2 x i32] [i32 8, i32 52], [2 x i32] [i32 9, i32 41], [2 x i32] [i32 6, i32 47], [2 x i32] [i32 2, i32 55], [2 x i32] [i32 13, i32 41], [2 x i32] [i32 10, i32 44], [2 x i32] [i32 6, i32 50], [2 x i32] [i32 5, i32 53], [2 x i32] [i32 13, i32 49], [2 x i32] [i32 4, i32 63], [2 x i32] [i32 6, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 -2, i32 69], [2 x i32] [i32 -2, i32 59], [2 x i32] [i32 6, i32 70], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 10, i32 44], [2 x i32] [i32 9, i32 31], [2 x i32] [i32 12, i32 43], [2 x i32] [i32 3, i32 53], [2 x i32] [i32 14, i32 34], [2 x i32] [i32 10, i32 38], [2 x i32] [i32 -3, i32 52], [2 x i32] [i32 13, i32 40], [2 x i32] [i32 17, i32 32], [2 x i32] [i32 7, i32 44], [2 x i32] [i32 7, i32 38], [2 x i32] [i32 13, i32 50], [2 x i32] [i32 10, i32 57], [2 x i32] [i32 26, i32 43]]], [8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 -21, i32 126], [2 x i32] [i32 -23, i32 124], [2 x i32] [i32 -20, i32 110], [2 x i32] [i32 -26, i32 126], [2 x i32] [i32 -25, i32 124], [2 x i32] [i32 -17, i32 105], [2 x i32] [i32 -27, i32 121], [2 x i32] [i32 -27, i32 117], [2 x i32] [i32 -17, i32 102], [2 x i32] [i32 -26, i32 117], [2 x i32] [i32 -27, i32 116], [2 x i32] [i32 -33, i32 122], [2 x i32] [i32 -10, i32 95], [2 x i32] [i32 -14, i32 100], [2 x i32] [i32 -8, i32 95]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 -17, i32 111], [2 x i32] [i32 -28, i32 114], [2 x i32] [i32 -6, i32 89], [2 x i32] [i32 -2, i32 80], [2 x i32] [i32 -4, i32 82], [2 x i32] [i32 -9, i32 85], [2 x i32] [i32 -8, i32 81], [2 x i32] [i32 -1, i32 72], [2 x i32] [i32 5, i32 64], [2 x i32] [i32 1, i32 67], [2 x i32] [i32 9, i32 56], [2 x i32] [i32 0, i32 69], [2 x i32] [i32 1, i32 69], [2 x i32] [i32 7, i32 69]], [15 x [2 x i32]] [[2 x i32] [i32 -3, i32 81], [2 x i32] [i32 -3, i32 76], [2 x i32] [i32 -7, i32 72], [2 x i32] [i32 -6, i32 78], [2 x i32] [i32 -12, i32 72], [2 x i32] [i32 -14, i32 68], [2 x i32] [i32 -3, i32 70], [2 x i32] [i32 -6, i32 76], [2 x i32] [i32 -5, i32 66], [2 x i32] [i32 -5, i32 62], [2 x i32] [i32 0, i32 57], [2 x i32] [i32 -4, i32 61], [2 x i32] [i32 -9, i32 60], [2 x i32] [i32 1, i32 54], [2 x i32] [i32 2, i32 58]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 -7, i32 69], [2 x i32] [i32 -6, i32 67], [2 x i32] [i32 -16, i32 77], [2 x i32] [i32 -2, i32 64], [2 x i32] [i32 2, i32 61], [2 x i32] [i32 -6, i32 67], [2 x i32] [i32 -3, i32 64], [2 x i32] [i32 2, i32 57], [2 x i32] [i32 -3, i32 65], [2 x i32] [i32 -3, i32 66], [2 x i32] [i32 0, i32 62], [2 x i32] [i32 9, i32 51], [2 x i32] [i32 -1, i32 66], [2 x i32] [i32 -2, i32 71], [2 x i32] [i32 -2, i32 75]], [15 x [2 x i32]] [[2 x i32] [i32 -1, i32 70], [2 x i32] [i32 -9, i32 72], [2 x i32] [i32 14, i32 60], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 16, i32 37], [2 x i32] [i32 0, i32 47], [2 x i32] [i32 18, i32 35], [2 x i32] [i32 11, i32 37], [2 x i32] [i32 12, i32 41], [2 x i32] [i32 10, i32 41], [2 x i32] [i32 2, i32 48], [2 x i32] [i32 12, i32 41], [2 x i32] [i32 13, i32 41], [2 x i32] [i32 0, i32 59], [2 x i32] [i32 3, i32 50], [2 x i32] [i32 19, i32 40], [2 x i32] [i32 3, i32 66], [2 x i32] [i32 18, i32 50]]], [8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 -22, i32 127], [2 x i32] [i32 -25, i32 127], [2 x i32] [i32 -25, i32 120], [2 x i32] [i32 -27, i32 127], [2 x i32] [i32 -19, i32 114], [2 x i32] [i32 -23, i32 117], [2 x i32] [i32 -25, i32 118], [2 x i32] [i32 -26, i32 117], [2 x i32] [i32 -24, i32 113], [2 x i32] [i32 -28, i32 118], [2 x i32] [i32 -31, i32 120], [2 x i32] [i32 -37, i32 124], [2 x i32] [i32 -10, i32 94], [2 x i32] [i32 -15, i32 102], [2 x i32] [i32 -10, i32 99]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 -13, i32 106], [2 x i32] [i32 -50, i32 127], [2 x i32] [i32 -5, i32 92], [2 x i32] [i32 17, i32 57], [2 x i32] [i32 -5, i32 86], [2 x i32] [i32 -13, i32 94], [2 x i32] [i32 -12, i32 91], [2 x i32] [i32 -2, i32 77], [2 x i32] [i32 0, i32 71], [2 x i32] [i32 -1, i32 73], [2 x i32] [i32 4, i32 64], [2 x i32] [i32 -7, i32 81], [2 x i32] [i32 5, i32 64], [2 x i32] [i32 15, i32 57]], [15 x [2 x i32]] [[2 x i32] [i32 -3, i32 78], [2 x i32] [i32 -8, i32 74], [2 x i32] [i32 -9, i32 72], [2 x i32] [i32 -10, i32 72], [2 x i32] [i32 -18, i32 75], [2 x i32] [i32 -12, i32 71], [2 x i32] [i32 -11, i32 63], [2 x i32] [i32 -5, i32 70], [2 x i32] [i32 -17, i32 75], [2 x i32] [i32 -14, i32 72], [2 x i32] [i32 -16, i32 67], [2 x i32] [i32 -8, i32 53], [2 x i32] [i32 -14, i32 59], [2 x i32] [i32 -9, i32 52], [2 x i32] [i32 -11, i32 68]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 1, i32 67], [2 x i32] [i32 0, i32 68], [2 x i32] [i32 -10, i32 67], [2 x i32] [i32 1, i32 68], [2 x i32] [i32 0, i32 77], [2 x i32] [i32 2, i32 64], [2 x i32] [i32 0, i32 68], [2 x i32] [i32 -5, i32 78], [2 x i32] [i32 7, i32 55], [2 x i32] [i32 5, i32 59], [2 x i32] [i32 2, i32 65], [2 x i32] [i32 14, i32 54], [2 x i32] [i32 15, i32 44], [2 x i32] [i32 5, i32 60], [2 x i32] [i32 2, i32 70]], [15 x [2 x i32]] [[2 x i32] [i32 -2, i32 76], [2 x i32] [i32 -18, i32 86], [2 x i32] [i32 12, i32 70], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 5, i32 64], [2 x i32] [i32 -12, i32 70], [2 x i32] [i32 11, i32 55], [2 x i32] [i32 5, i32 56], [2 x i32] [i32 0, i32 69], [2 x i32] [i32 2, i32 65], [2 x i32] [i32 -6, i32 74], [2 x i32] [i32 5, i32 54], [2 x i32] [i32 7, i32 54], [2 x i32] [i32 -6, i32 76], [2 x i32] [i32 -11, i32 82], [2 x i32] [i32 -2, i32 77], [2 x i32] [i32 -2, i32 77], [2 x i32] [i32 25, i32 42]]]], align 4
@INIT_FLD_LAST_I = internal constant [1 x [8 x [15 x [2 x i32]]]] [[8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 15, i32 6], [2 x i32] [i32 6, i32 19], [2 x i32] [i32 7, i32 16], [2 x i32] [i32 12, i32 14], [2 x i32] [i32 18, i32 13], [2 x i32] [i32 13, i32 11], [2 x i32] [i32 13, i32 15], [2 x i32] [i32 15, i32 16], [2 x i32] [i32 12, i32 23], [2 x i32] [i32 13, i32 23], [2 x i32] [i32 15, i32 20], [2 x i32] [i32 14, i32 26], [2 x i32] [i32 14, i32 44], [2 x i32] [i32 17, i32 40], [2 x i32] [i32 17, i32 47]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 24, i32 17], [2 x i32] [i32 21, i32 21], [2 x i32] [i32 25, i32 22], [2 x i32] [i32 31, i32 27], [2 x i32] [i32 22, i32 29], [2 x i32] [i32 19, i32 35], [2 x i32] [i32 14, i32 50], [2 x i32] [i32 10, i32 57], [2 x i32] [i32 7, i32 63], [2 x i32] [i32 -2, i32 77], [2 x i32] [i32 -4, i32 82], [2 x i32] [i32 -3, i32 94], [2 x i32] [i32 9, i32 69], [2 x i32] [i32 -12, i32 109]], [15 x [2 x i32]] [[2 x i32] [i32 21, i32 -10], [2 x i32] [i32 24, i32 -11], [2 x i32] [i32 28, i32 -8], [2 x i32] [i32 28, i32 -1], [2 x i32] [i32 29, i32 3], [2 x i32] [i32 29, i32 9], [2 x i32] [i32 35, i32 20], [2 x i32] [i32 29, i32 36], [2 x i32] [i32 14, i32 67], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 36, i32 -35], [2 x i32] [i32 36, i32 -34], [2 x i32] [i32 32, i32 -26], [2 x i32] [i32 37, i32 -30], [2 x i32] [i32 44, i32 -32], [2 x i32] [i32 34, i32 -18], [2 x i32] [i32 34, i32 -15], [2 x i32] [i32 40, i32 -15], [2 x i32] [i32 33, i32 -7], [2 x i32] [i32 35, i32 -5], [2 x i32] [i32 33, i32 0], [2 x i32] [i32 38, i32 2], [2 x i32] [i32 33, i32 13], [2 x i32] [i32 23, i32 35], [2 x i32] [i32 13, i32 58]], [15 x [2 x i32]] [[2 x i32] [i32 29, i32 -3], [2 x i32] [i32 26, i32 0], [2 x i32] [i32 22, i32 30], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 31, i32 -7], [2 x i32] [i32 35, i32 -15], [2 x i32] [i32 34, i32 -3], [2 x i32] [i32 34, i32 3], [2 x i32] [i32 36, i32 -1], [2 x i32] [i32 34, i32 5], [2 x i32] [i32 32, i32 11], [2 x i32] [i32 35, i32 5], [2 x i32] [i32 34, i32 12], [2 x i32] [i32 39, i32 11], [2 x i32] [i32 30, i32 29], [2 x i32] [i32 34, i32 26], [2 x i32] [i32 29, i32 39], [2 x i32] [i32 19, i32 66]]]], align 4
@INIT_FLD_LAST_P = internal constant [3 x [8 x [15 x [2 x i32]]]] [[8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 14, i32 11], [2 x i32] [i32 11, i32 14], [2 x i32] [i32 9, i32 11], [2 x i32] [i32 18, i32 11], [2 x i32] [i32 21, i32 9], [2 x i32] [i32 23, i32 -2], [2 x i32] [i32 32, i32 -15], [2 x i32] [i32 32, i32 -15], [2 x i32] [i32 34, i32 -21], [2 x i32] [i32 39, i32 -23], [2 x i32] [i32 42, i32 -33], [2 x i32] [i32 41, i32 -31], [2 x i32] [i32 46, i32 -28], [2 x i32] [i32 38, i32 -12], [2 x i32] [i32 21, i32 29]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 45, i32 -24], [2 x i32] [i32 53, i32 -45], [2 x i32] [i32 48, i32 -26], [2 x i32] [i32 65, i32 -43], [2 x i32] [i32 43, i32 -19], [2 x i32] [i32 39, i32 -10], [2 x i32] [i32 30, i32 9], [2 x i32] [i32 18, i32 26], [2 x i32] [i32 20, i32 27], [2 x i32] [i32 0, i32 57], [2 x i32] [i32 -14, i32 82], [2 x i32] [i32 -5, i32 75], [2 x i32] [i32 -19, i32 97], [2 x i32] [i32 -35, i32 125]], [15 x [2 x i32]] [[2 x i32] [i32 21, i32 -13], [2 x i32] [i32 33, i32 -14], [2 x i32] [i32 39, i32 -7], [2 x i32] [i32 46, i32 -2], [2 x i32] [i32 51, i32 2], [2 x i32] [i32 60, i32 6], [2 x i32] [i32 61, i32 17], [2 x i32] [i32 55, i32 34], [2 x i32] [i32 42, i32 62], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 27, i32 0], [2 x i32] [i32 28, i32 0], [2 x i32] [i32 31, i32 -4], [2 x i32] [i32 27, i32 6], [2 x i32] [i32 34, i32 8], [2 x i32] [i32 30, i32 10], [2 x i32] [i32 24, i32 22], [2 x i32] [i32 33, i32 19], [2 x i32] [i32 22, i32 32], [2 x i32] [i32 26, i32 31], [2 x i32] [i32 21, i32 41], [2 x i32] [i32 26, i32 44], [2 x i32] [i32 23, i32 47], [2 x i32] [i32 16, i32 65], [2 x i32] [i32 14, i32 71]], [15 x [2 x i32]] [[2 x i32] [i32 8, i32 60], [2 x i32] [i32 6, i32 63], [2 x i32] [i32 17, i32 65], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 21, i32 24], [2 x i32] [i32 23, i32 20], [2 x i32] [i32 26, i32 23], [2 x i32] [i32 27, i32 32], [2 x i32] [i32 28, i32 23], [2 x i32] [i32 28, i32 24], [2 x i32] [i32 23, i32 40], [2 x i32] [i32 24, i32 32], [2 x i32] [i32 28, i32 29], [2 x i32] [i32 23, i32 42], [2 x i32] [i32 19, i32 57], [2 x i32] [i32 22, i32 53], [2 x i32] [i32 22, i32 61], [2 x i32] [i32 11, i32 86]]], [8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 19, i32 -6], [2 x i32] [i32 18, i32 -6], [2 x i32] [i32 14, i32 0], [2 x i32] [i32 26, i32 -12], [2 x i32] [i32 31, i32 -16], [2 x i32] [i32 33, i32 -25], [2 x i32] [i32 33, i32 -22], [2 x i32] [i32 37, i32 -28], [2 x i32] [i32 39, i32 -30], [2 x i32] [i32 42, i32 -30], [2 x i32] [i32 47, i32 -42], [2 x i32] [i32 45, i32 -36], [2 x i32] [i32 49, i32 -34], [2 x i32] [i32 41, i32 -17], [2 x i32] [i32 32, i32 9]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 69, i32 -71], [2 x i32] [i32 63, i32 -63], [2 x i32] [i32 66, i32 -64], [2 x i32] [i32 77, i32 -74], [2 x i32] [i32 54, i32 -39], [2 x i32] [i32 52, i32 -35], [2 x i32] [i32 41, i32 -10], [2 x i32] [i32 36, i32 0], [2 x i32] [i32 40, i32 -1], [2 x i32] [i32 30, i32 14], [2 x i32] [i32 28, i32 26], [2 x i32] [i32 23, i32 37], [2 x i32] [i32 12, i32 55], [2 x i32] [i32 11, i32 65]], [15 x [2 x i32]] [[2 x i32] [i32 17, i32 -10], [2 x i32] [i32 32, i32 -13], [2 x i32] [i32 42, i32 -9], [2 x i32] [i32 49, i32 -5], [2 x i32] [i32 53, i32 0], [2 x i32] [i32 64, i32 3], [2 x i32] [i32 68, i32 10], [2 x i32] [i32 66, i32 27], [2 x i32] [i32 47, i32 57], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 37, i32 -33], [2 x i32] [i32 39, i32 -36], [2 x i32] [i32 40, i32 -37], [2 x i32] [i32 38, i32 -30], [2 x i32] [i32 46, i32 -33], [2 x i32] [i32 42, i32 -30], [2 x i32] [i32 40, i32 -24], [2 x i32] [i32 49, i32 -29], [2 x i32] [i32 38, i32 -12], [2 x i32] [i32 40, i32 -10], [2 x i32] [i32 38, i32 -3], [2 x i32] [i32 46, i32 -5], [2 x i32] [i32 31, i32 20], [2 x i32] [i32 29, i32 30], [2 x i32] [i32 25, i32 44]], [15 x [2 x i32]] [[2 x i32] [i32 12, i32 48], [2 x i32] [i32 11, i32 49], [2 x i32] [i32 26, i32 45], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 22, i32 22], [2 x i32] [i32 23, i32 22], [2 x i32] [i32 27, i32 21], [2 x i32] [i32 33, i32 20], [2 x i32] [i32 26, i32 28], [2 x i32] [i32 30, i32 24], [2 x i32] [i32 27, i32 34], [2 x i32] [i32 18, i32 42], [2 x i32] [i32 25, i32 39], [2 x i32] [i32 18, i32 50], [2 x i32] [i32 12, i32 70], [2 x i32] [i32 21, i32 54], [2 x i32] [i32 14, i32 71], [2 x i32] [i32 11, i32 83]]], [8 x [15 x [2 x i32]]] [[15 x [2 x i32]] [[2 x i32] [i32 17, i32 -13], [2 x i32] [i32 16, i32 -9], [2 x i32] [i32 17, i32 -12], [2 x i32] [i32 27, i32 -21], [2 x i32] [i32 37, i32 -30], [2 x i32] [i32 41, i32 -40], [2 x i32] [i32 42, i32 -41], [2 x i32] [i32 48, i32 -47], [2 x i32] [i32 39, i32 -32], [2 x i32] [i32 46, i32 -40], [2 x i32] [i32 52, i32 -51], [2 x i32] [i32 46, i32 -41], [2 x i32] [i32 52, i32 -39], [2 x i32] [i32 43, i32 -19], [2 x i32] [i32 32, i32 11]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 61, i32 -55], [2 x i32] [i32 56, i32 -46], [2 x i32] [i32 62, i32 -50], [2 x i32] [i32 81, i32 -67], [2 x i32] [i32 45, i32 -20], [2 x i32] [i32 35, i32 -2], [2 x i32] [i32 28, i32 15], [2 x i32] [i32 34, i32 1], [2 x i32] [i32 39, i32 1], [2 x i32] [i32 30, i32 17], [2 x i32] [i32 20, i32 38], [2 x i32] [i32 18, i32 45], [2 x i32] [i32 15, i32 54], [2 x i32] [i32 0, i32 79]], [15 x [2 x i32]] [[2 x i32] [i32 9, i32 -2], [2 x i32] [i32 30, i32 -10], [2 x i32] [i32 31, i32 -4], [2 x i32] [i32 33, i32 -1], [2 x i32] [i32 33, i32 7], [2 x i32] [i32 31, i32 12], [2 x i32] [i32 37, i32 23], [2 x i32] [i32 31, i32 38], [2 x i32] [i32 20, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 36, i32 -16], [2 x i32] [i32 37, i32 -14], [2 x i32] [i32 37, i32 -17], [2 x i32] [i32 32, i32 1], [2 x i32] [i32 34, i32 15], [2 x i32] [i32 29, i32 15], [2 x i32] [i32 24, i32 25], [2 x i32] [i32 34, i32 22], [2 x i32] [i32 31, i32 16], [2 x i32] [i32 35, i32 18], [2 x i32] [i32 31, i32 28], [2 x i32] [i32 33, i32 41], [2 x i32] [i32 36, i32 28], [2 x i32] [i32 27, i32 47], [2 x i32] [i32 21, i32 62]], [15 x [2 x i32]] [[2 x i32] [i32 18, i32 31], [2 x i32] [i32 19, i32 26], [2 x i32] [i32 36, i32 24], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64], [2 x i32] [i32 0, i32 64]], [15 x [2 x i32]] [[2 x i32] [i32 0, i32 64], [2 x i32] [i32 24, i32 23], [2 x i32] [i32 27, i32 16], [2 x i32] [i32 24, i32 30], [2 x i32] [i32 31, i32 29], [2 x i32] [i32 22, i32 41], [2 x i32] [i32 22, i32 42], [2 x i32] [i32 16, i32 60], [2 x i32] [i32 15, i32 52], [2 x i32] [i32 14, i32 60], [2 x i32] [i32 3, i32 78], [2 x i32] [i32 -16, i32 123], [2 x i32] [i32 21, i32 53], [2 x i32] [i32 22, i32 56], [2 x i32] [i32 25, i32 61]]]], align 4

; Function Attrs: nounwind
define dso_local void @create_context_memory() local_unnamed_addr #0 {
  %1 = load ptr, ptr @img, align 8, !tbaa !6
  %2 = getelementptr inbounds i8, ptr %1, i64 90308
  %3 = load i32, ptr %2, align 4, !tbaa !10
  %4 = load ptr, ptr @input, align 8, !tbaa !6
  %5 = getelementptr inbounds i8, ptr %4, i64 212
  %6 = load i32, ptr %5, align 4, !tbaa !16
  %7 = icmp eq i32 %6, 1
  br i1 %7, label %8, label %11

8:                                                ; preds = %0
  %9 = getelementptr inbounds i8, ptr %4, i64 216
  %10 = load i32, ptr %9, align 8, !tbaa !18
  br label %11

11:                                               ; preds = %0, %8
  %12 = phi i32 [ %10, %8 ], [ %3, %0 ]
  store i32 %12, ptr @num_mb_per_slice, align 4, !tbaa !19
  %13 = add i32 %3, -1
  %14 = add i32 %13, %12
  %15 = sdiv i32 %14, %12
  store i32 %15, ptr @number_of_slices, align 4, !tbaa !19
  %16 = tail call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #11
  store ptr %16, ptr @initialized, align 8, !tbaa !6
  %17 = icmp eq ptr %16, null
  br i1 %17, label %18, label %19

18:                                               ; preds = %11
  tail call void @no_mem_exit(ptr noundef nonnull @.str) #12
  br label %19

19:                                               ; preds = %18, %11
  %20 = tail call noalias dereferenceable_or_null(24) ptr @malloc(i64 noundef 24) #11
  store ptr %20, ptr @model_number, align 8, !tbaa !6
  %21 = icmp eq ptr %20, null
  br i1 %21, label %22, label %23

22:                                               ; preds = %19
  tail call void @no_mem_exit(ptr noundef nonnull @.str.1) #12
  br label %23

23:                                               ; preds = %22, %19
  br label %24

24:                                               ; preds = %23, %130
  %25 = phi i64 [ %131, %130 ], [ 0, %23 ]
  %26 = tail call noalias dereferenceable_or_null(32) ptr @malloc(i64 noundef 32) #11
  %27 = load ptr, ptr @initialized, align 8, !tbaa !6
  %28 = getelementptr inbounds ptr, ptr %27, i64 %25
  store ptr %26, ptr %28, align 8, !tbaa !6
  %29 = icmp eq ptr %26, null
  br i1 %29, label %30, label %31

30:                                               ; preds = %24
  tail call void @no_mem_exit(ptr noundef nonnull @.str) #12
  br label %31

31:                                               ; preds = %30, %24
  %32 = tail call noalias dereferenceable_or_null(32) ptr @malloc(i64 noundef 32) #11
  %33 = load ptr, ptr @model_number, align 8, !tbaa !6
  %34 = getelementptr inbounds ptr, ptr %33, i64 %25
  store ptr %32, ptr %34, align 8, !tbaa !6
  %35 = icmp eq ptr %32, null
  br i1 %35, label %36, label %37

36:                                               ; preds = %31
  tail call void @no_mem_exit(ptr noundef nonnull @.str.1) #12
  br label %37

37:                                               ; preds = %36, %31
  %38 = load i32, ptr @number_of_slices, align 4, !tbaa !19
  %39 = sext i32 %38 to i64
  %40 = shl nsw i64 %39, 2
  %41 = tail call noalias ptr @malloc(i64 noundef %40) #11
  %42 = load ptr, ptr @initialized, align 8, !tbaa !6
  %43 = getelementptr inbounds ptr, ptr %42, i64 %25
  %44 = load ptr, ptr %43, align 8, !tbaa !6
  store ptr %41, ptr %44, align 8, !tbaa !6
  %45 = icmp eq ptr %41, null
  br i1 %45, label %46, label %50

46:                                               ; preds = %37
  tail call void @no_mem_exit(ptr noundef nonnull @.str) #12
  %47 = load i32, ptr @number_of_slices, align 4, !tbaa !19
  %48 = sext i32 %47 to i64
  %49 = shl nsw i64 %48, 2
  br label %50

50:                                               ; preds = %46, %37
  %51 = phi i64 [ %49, %46 ], [ %40, %37 ]
  %52 = tail call noalias ptr @malloc(i64 noundef %51) #11
  %53 = load ptr, ptr @model_number, align 8, !tbaa !6
  %54 = getelementptr inbounds ptr, ptr %53, i64 %25
  %55 = load ptr, ptr %54, align 8, !tbaa !6
  store ptr %52, ptr %55, align 8, !tbaa !6
  %56 = icmp eq ptr %52, null
  br i1 %56, label %57, label %61

57:                                               ; preds = %50
  tail call void @no_mem_exit(ptr noundef nonnull @.str.1) #12
  %58 = load i32, ptr @number_of_slices, align 4, !tbaa !19
  %59 = sext i32 %58 to i64
  %60 = shl nsw i64 %59, 2
  br label %61

61:                                               ; preds = %50, %57
  %62 = phi i64 [ %51, %50 ], [ %60, %57 ]
  %63 = tail call noalias ptr @malloc(i64 noundef %62) #11
  %64 = load ptr, ptr @initialized, align 8, !tbaa !6
  %65 = getelementptr inbounds ptr, ptr %64, i64 %25
  %66 = load ptr, ptr %65, align 8, !tbaa !6
  %67 = getelementptr inbounds i8, ptr %66, i64 8
  store ptr %63, ptr %67, align 8, !tbaa !6
  %68 = icmp eq ptr %63, null
  br i1 %68, label %69, label %73

69:                                               ; preds = %61
  tail call void @no_mem_exit(ptr noundef nonnull @.str) #12
  %70 = load i32, ptr @number_of_slices, align 4, !tbaa !19
  %71 = sext i32 %70 to i64
  %72 = shl nsw i64 %71, 2
  br label %73

73:                                               ; preds = %69, %61
  %74 = phi i64 [ %72, %69 ], [ %62, %61 ]
  %75 = tail call noalias ptr @malloc(i64 noundef %74) #11
  %76 = load ptr, ptr @model_number, align 8, !tbaa !6
  %77 = getelementptr inbounds ptr, ptr %76, i64 %25
  %78 = load ptr, ptr %77, align 8, !tbaa !6
  %79 = getelementptr inbounds i8, ptr %78, i64 8
  store ptr %75, ptr %79, align 8, !tbaa !6
  %80 = icmp eq ptr %75, null
  br i1 %80, label %81, label %85

81:                                               ; preds = %73
  tail call void @no_mem_exit(ptr noundef nonnull @.str.1) #12
  %82 = load i32, ptr @number_of_slices, align 4, !tbaa !19
  %83 = sext i32 %82 to i64
  %84 = shl nsw i64 %83, 2
  br label %85

85:                                               ; preds = %81, %73
  %86 = phi i64 [ %84, %81 ], [ %74, %73 ]
  %87 = tail call noalias ptr @malloc(i64 noundef %86) #11
  %88 = load ptr, ptr @initialized, align 8, !tbaa !6
  %89 = getelementptr inbounds ptr, ptr %88, i64 %25
  %90 = load ptr, ptr %89, align 8, !tbaa !6
  %91 = getelementptr inbounds i8, ptr %90, i64 16
  store ptr %87, ptr %91, align 8, !tbaa !6
  %92 = icmp eq ptr %87, null
  br i1 %92, label %93, label %97

93:                                               ; preds = %85
  tail call void @no_mem_exit(ptr noundef nonnull @.str) #12
  %94 = load i32, ptr @number_of_slices, align 4, !tbaa !19
  %95 = sext i32 %94 to i64
  %96 = shl nsw i64 %95, 2
  br label %97

97:                                               ; preds = %93, %85
  %98 = phi i64 [ %96, %93 ], [ %86, %85 ]
  %99 = tail call noalias ptr @malloc(i64 noundef %98) #11
  %100 = load ptr, ptr @model_number, align 8, !tbaa !6
  %101 = getelementptr inbounds ptr, ptr %100, i64 %25
  %102 = load ptr, ptr %101, align 8, !tbaa !6
  %103 = getelementptr inbounds i8, ptr %102, i64 16
  store ptr %99, ptr %103, align 8, !tbaa !6
  %104 = icmp eq ptr %99, null
  br i1 %104, label %105, label %109

105:                                              ; preds = %97
  tail call void @no_mem_exit(ptr noundef nonnull @.str.1) #12
  %106 = load i32, ptr @number_of_slices, align 4, !tbaa !19
  %107 = sext i32 %106 to i64
  %108 = shl nsw i64 %107, 2
  br label %109

109:                                              ; preds = %105, %97
  %110 = phi i64 [ %108, %105 ], [ %98, %97 ]
  %111 = tail call noalias ptr @malloc(i64 noundef %110) #11
  %112 = load ptr, ptr @initialized, align 8, !tbaa !6
  %113 = getelementptr inbounds ptr, ptr %112, i64 %25
  %114 = load ptr, ptr %113, align 8, !tbaa !6
  %115 = getelementptr inbounds i8, ptr %114, i64 24
  store ptr %111, ptr %115, align 8, !tbaa !6
  %116 = icmp eq ptr %111, null
  br i1 %116, label %117, label %121

117:                                              ; preds = %109
  tail call void @no_mem_exit(ptr noundef nonnull @.str) #12
  %118 = load i32, ptr @number_of_slices, align 4, !tbaa !19
  %119 = sext i32 %118 to i64
  %120 = shl nsw i64 %119, 2
  br label %121

121:                                              ; preds = %117, %109
  %122 = phi i64 [ %120, %117 ], [ %110, %109 ]
  %123 = tail call noalias ptr @malloc(i64 noundef %122) #11
  %124 = load ptr, ptr @model_number, align 8, !tbaa !6
  %125 = getelementptr inbounds ptr, ptr %124, i64 %25
  %126 = load ptr, ptr %125, align 8, !tbaa !6
  %127 = getelementptr inbounds i8, ptr %126, i64 24
  store ptr %123, ptr %127, align 8, !tbaa !6
  %128 = icmp eq ptr %123, null
  br i1 %128, label %129, label %130

129:                                              ; preds = %121
  tail call void @no_mem_exit(ptr noundef nonnull @.str.1) #12
  br label %130

130:                                              ; preds = %129, %121
  %131 = add nuw nsw i64 %25, 1
  %132 = icmp eq i64 %131, 3
  br i1 %132, label %133, label %24

133:                                              ; preds = %130
  %134 = load i32, ptr @number_of_slices, align 4, !tbaa !19
  %135 = load ptr, ptr @initialized, align 8
  %136 = icmp sgt i32 %134, 0
  br i1 %136, label %137, label %188

137:                                              ; preds = %133
  %138 = load ptr, ptr %135, align 8, !tbaa !6
  %139 = load ptr, ptr %138, align 8, !tbaa !6
  br label %140

140:                                              ; preds = %137, %140
  %141 = phi i64 [ 0, %137 ], [ %143, %140 ]
  %142 = getelementptr inbounds i32, ptr %139, i64 %141
  store i32 0, ptr %142, align 4, !tbaa !19
  %143 = add nuw nsw i64 %141, 1
  %144 = load i32, ptr @number_of_slices, align 4, !tbaa !19
  %145 = sext i32 %144 to i64
  %146 = icmp slt i64 %143, %145
  br i1 %146, label %140, label %147

147:                                              ; preds = %140
  %148 = icmp sgt i32 %144, 0
  br i1 %148, label %149, label %188

149:                                              ; preds = %147
  %150 = load ptr, ptr %135, align 8, !tbaa !6
  %151 = getelementptr inbounds i8, ptr %150, i64 8
  %152 = load ptr, ptr %151, align 8, !tbaa !6
  br label %153

153:                                              ; preds = %153, %149
  %154 = phi i64 [ 0, %149 ], [ %156, %153 ]
  %155 = getelementptr inbounds i32, ptr %152, i64 %154
  store i32 0, ptr %155, align 4, !tbaa !19
  %156 = add nuw nsw i64 %154, 1
  %157 = load i32, ptr @number_of_slices, align 4, !tbaa !19
  %158 = sext i32 %157 to i64
  %159 = icmp slt i64 %156, %158
  br i1 %159, label %153, label %160

160:                                              ; preds = %153
  %161 = icmp sgt i32 %157, 0
  br i1 %161, label %162, label %188

162:                                              ; preds = %160
  %163 = load ptr, ptr %135, align 8, !tbaa !6
  %164 = getelementptr inbounds i8, ptr %163, i64 16
  %165 = load ptr, ptr %164, align 8, !tbaa !6
  br label %166

166:                                              ; preds = %166, %162
  %167 = phi i64 [ 0, %162 ], [ %169, %166 ]
  %168 = getelementptr inbounds i32, ptr %165, i64 %167
  store i32 0, ptr %168, align 4, !tbaa !19
  %169 = add nuw nsw i64 %167, 1
  %170 = load i32, ptr @number_of_slices, align 4, !tbaa !19
  %171 = sext i32 %170 to i64
  %172 = icmp slt i64 %169, %171
  br i1 %172, label %166, label %173

173:                                              ; preds = %166
  %174 = icmp sgt i32 %170, 0
  br i1 %174, label %175, label %188

175:                                              ; preds = %173
  %176 = load ptr, ptr %135, align 8, !tbaa !6
  %177 = getelementptr inbounds i8, ptr %176, i64 24
  %178 = load ptr, ptr %177, align 8, !tbaa !6
  br label %179

179:                                              ; preds = %179, %175
  %180 = phi i64 [ 0, %175 ], [ %182, %179 ]
  %181 = getelementptr inbounds i32, ptr %178, i64 %180
  store i32 0, ptr %181, align 4, !tbaa !19
  %182 = add nuw nsw i64 %180, 1
  %183 = load i32, ptr @number_of_slices, align 4, !tbaa !19
  %184 = sext i32 %183 to i64
  %185 = icmp slt i64 %182, %184
  br i1 %185, label %179, label %186

186:                                              ; preds = %179
  %187 = icmp sgt i32 %183, 0
  br label %188

188:                                              ; preds = %186, %133, %147, %160, %173
  %189 = phi i1 [ false, %173 ], [ false, %160 ], [ false, %147 ], [ false, %133 ], [ %187, %186 ]
  %190 = load ptr, ptr @initialized, align 8
  %191 = getelementptr inbounds i8, ptr %190, i64 8
  br i1 %189, label %192, label %243

192:                                              ; preds = %188
  %193 = load ptr, ptr %191, align 8, !tbaa !6
  %194 = load ptr, ptr %193, align 8, !tbaa !6
  br label %195

195:                                              ; preds = %195, %192
  %196 = phi i64 [ 0, %192 ], [ %198, %195 ]
  %197 = getelementptr inbounds i32, ptr %194, i64 %196
  store i32 0, ptr %197, align 4, !tbaa !19
  %198 = add nuw nsw i64 %196, 1
  %199 = load i32, ptr @number_of_slices, align 4, !tbaa !19
  %200 = sext i32 %199 to i64
  %201 = icmp slt i64 %198, %200
  br i1 %201, label %195, label %202

202:                                              ; preds = %195
  %203 = icmp sgt i32 %199, 0
  br i1 %203, label %204, label %243

204:                                              ; preds = %202
  %205 = load ptr, ptr %191, align 8, !tbaa !6
  %206 = getelementptr inbounds i8, ptr %205, i64 8
  %207 = load ptr, ptr %206, align 8, !tbaa !6
  br label %208

208:                                              ; preds = %208, %204
  %209 = phi i64 [ 0, %204 ], [ %211, %208 ]
  %210 = getelementptr inbounds i32, ptr %207, i64 %209
  store i32 0, ptr %210, align 4, !tbaa !19
  %211 = add nuw nsw i64 %209, 1
  %212 = load i32, ptr @number_of_slices, align 4, !tbaa !19
  %213 = sext i32 %212 to i64
  %214 = icmp slt i64 %211, %213
  br i1 %214, label %208, label %215

215:                                              ; preds = %208
  %216 = icmp sgt i32 %212, 0
  br i1 %216, label %217, label %243

217:                                              ; preds = %215
  %218 = load ptr, ptr %191, align 8, !tbaa !6
  %219 = getelementptr inbounds i8, ptr %218, i64 16
  %220 = load ptr, ptr %219, align 8, !tbaa !6
  br label %221

221:                                              ; preds = %221, %217
  %222 = phi i64 [ 0, %217 ], [ %224, %221 ]
  %223 = getelementptr inbounds i32, ptr %220, i64 %222
  store i32 0, ptr %223, align 4, !tbaa !19
  %224 = add nuw nsw i64 %222, 1
  %225 = load i32, ptr @number_of_slices, align 4, !tbaa !19
  %226 = sext i32 %225 to i64
  %227 = icmp slt i64 %224, %226
  br i1 %227, label %221, label %228

228:                                              ; preds = %221
  %229 = icmp sgt i32 %225, 0
  br i1 %229, label %230, label %243

230:                                              ; preds = %228
  %231 = load ptr, ptr %191, align 8, !tbaa !6
  %232 = getelementptr inbounds i8, ptr %231, i64 24
  %233 = load ptr, ptr %232, align 8, !tbaa !6
  br label %234

234:                                              ; preds = %234, %230
  %235 = phi i64 [ 0, %230 ], [ %237, %234 ]
  %236 = getelementptr inbounds i32, ptr %233, i64 %235
  store i32 0, ptr %236, align 4, !tbaa !19
  %237 = add nuw nsw i64 %235, 1
  %238 = load i32, ptr @number_of_slices, align 4, !tbaa !19
  %239 = sext i32 %238 to i64
  %240 = icmp slt i64 %237, %239
  br i1 %240, label %234, label %241

241:                                              ; preds = %234
  %242 = icmp sgt i32 %238, 0
  br label %243

243:                                              ; preds = %241, %228, %215, %202, %188
  %244 = phi i1 [ false, %228 ], [ false, %215 ], [ false, %202 ], [ false, %188 ], [ %242, %241 ]
  %245 = load ptr, ptr @initialized, align 8
  %246 = getelementptr inbounds i8, ptr %245, i64 16
  br i1 %244, label %247, label %296

247:                                              ; preds = %243
  %248 = load ptr, ptr %246, align 8, !tbaa !6
  %249 = load ptr, ptr %248, align 8, !tbaa !6
  br label %250

250:                                              ; preds = %250, %247
  %251 = phi i64 [ 0, %247 ], [ %253, %250 ]
  %252 = getelementptr inbounds i32, ptr %249, i64 %251
  store i32 0, ptr %252, align 4, !tbaa !19
  %253 = add nuw nsw i64 %251, 1
  %254 = load i32, ptr @number_of_slices, align 4, !tbaa !19
  %255 = sext i32 %254 to i64
  %256 = icmp slt i64 %253, %255
  br i1 %256, label %250, label %257

257:                                              ; preds = %250
  %258 = icmp sgt i32 %254, 0
  br i1 %258, label %259, label %296

259:                                              ; preds = %257
  %260 = load ptr, ptr %246, align 8, !tbaa !6
  %261 = getelementptr inbounds i8, ptr %260, i64 8
  %262 = load ptr, ptr %261, align 8, !tbaa !6
  br label %263

263:                                              ; preds = %263, %259
  %264 = phi i64 [ 0, %259 ], [ %266, %263 ]
  %265 = getelementptr inbounds i32, ptr %262, i64 %264
  store i32 0, ptr %265, align 4, !tbaa !19
  %266 = add nuw nsw i64 %264, 1
  %267 = load i32, ptr @number_of_slices, align 4, !tbaa !19
  %268 = sext i32 %267 to i64
  %269 = icmp slt i64 %266, %268
  br i1 %269, label %263, label %270

270:                                              ; preds = %263
  %271 = icmp sgt i32 %267, 0
  br i1 %271, label %272, label %296

272:                                              ; preds = %270
  %273 = load ptr, ptr %246, align 8, !tbaa !6
  %274 = getelementptr inbounds i8, ptr %273, i64 16
  %275 = load ptr, ptr %274, align 8, !tbaa !6
  br label %276

276:                                              ; preds = %276, %272
  %277 = phi i64 [ 0, %272 ], [ %279, %276 ]
  %278 = getelementptr inbounds i32, ptr %275, i64 %277
  store i32 0, ptr %278, align 4, !tbaa !19
  %279 = add nuw nsw i64 %277, 1
  %280 = load i32, ptr @number_of_slices, align 4, !tbaa !19
  %281 = sext i32 %280 to i64
  %282 = icmp slt i64 %279, %281
  br i1 %282, label %276, label %283

283:                                              ; preds = %276
  %284 = icmp sgt i32 %280, 0
  br i1 %284, label %285, label %296

285:                                              ; preds = %283
  %286 = load ptr, ptr %246, align 8, !tbaa !6
  %287 = getelementptr inbounds i8, ptr %286, i64 24
  %288 = load ptr, ptr %287, align 8, !tbaa !6
  br label %289

289:                                              ; preds = %289, %285
  %290 = phi i64 [ 0, %285 ], [ %292, %289 ]
  %291 = getelementptr inbounds i32, ptr %288, i64 %290
  store i32 0, ptr %291, align 4, !tbaa !19
  %292 = add nuw nsw i64 %290, 1
  %293 = load i32, ptr @number_of_slices, align 4, !tbaa !19
  %294 = sext i32 %293 to i64
  %295 = icmp slt i64 %292, %294
  br i1 %295, label %289, label %296

296:                                              ; preds = %289, %283, %270, %257, %243
  br label %297

297:                                              ; preds = %296, %297
  %298 = phi i64 [ %311, %297 ], [ 0, %296 ]
  %299 = sub nuw nsw i64 127, %298
  %300 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %299
  %301 = load double, ptr %300, align 8, !tbaa !20
  %302 = fsub double 1.000000e+00, %301
  %303 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %298
  store double %302, ptr %303, align 8, !tbaa !20
  %304 = tail call double @log10(double noundef %302) #12
  %305 = fdiv double %304, 0x3FD34413509F79FF
  %306 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %298
  store double %305, ptr %306, align 8, !tbaa !20
  %307 = load double, ptr %300, align 8, !tbaa !20
  %308 = tail call double @log10(double noundef %307) #12
  %309 = fdiv double %308, 0x3FD34413509F79FF
  %310 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %299
  store double %309, ptr %310, align 8, !tbaa !20
  %311 = add nuw nsw i64 %298, 1
  %312 = icmp eq i64 %311, 64
  br i1 %312, label %313, label %297

313:                                              ; preds = %297
  ret void
}

; Function Attrs: mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite)
declare dso_local noalias noundef ptr @malloc(i64 noundef) local_unnamed_addr #1

declare dso_local void @no_mem_exit(ptr noundef) local_unnamed_addr #2

; Function Attrs: mustprogress nofree nounwind willreturn memory(write)
declare dso_local double @log10(double noundef) local_unnamed_addr #3

; Function Attrs: nounwind
define dso_local void @free_context_memory() local_unnamed_addr #0 {
  br label %1

1:                                                ; preds = %0, %1
  %2 = phi i64 [ 0, %0 ], [ %47, %1 ]
  %3 = load ptr, ptr @initialized, align 8, !tbaa !6
  %4 = getelementptr inbounds ptr, ptr %3, i64 %2
  %5 = load ptr, ptr %4, align 8, !tbaa !6
  %6 = load ptr, ptr %5, align 8, !tbaa !6
  tail call void @free(ptr noundef %6) #12
  %7 = load ptr, ptr @model_number, align 8, !tbaa !6
  %8 = getelementptr inbounds ptr, ptr %7, i64 %2
  %9 = load ptr, ptr %8, align 8, !tbaa !6
  %10 = load ptr, ptr %9, align 8, !tbaa !6
  tail call void @free(ptr noundef %10) #12
  %11 = load ptr, ptr @initialized, align 8, !tbaa !6
  %12 = getelementptr inbounds ptr, ptr %11, i64 %2
  %13 = load ptr, ptr %12, align 8, !tbaa !6
  %14 = getelementptr inbounds i8, ptr %13, i64 8
  %15 = load ptr, ptr %14, align 8, !tbaa !6
  tail call void @free(ptr noundef %15) #12
  %16 = load ptr, ptr @model_number, align 8, !tbaa !6
  %17 = getelementptr inbounds ptr, ptr %16, i64 %2
  %18 = load ptr, ptr %17, align 8, !tbaa !6
  %19 = getelementptr inbounds i8, ptr %18, i64 8
  %20 = load ptr, ptr %19, align 8, !tbaa !6
  tail call void @free(ptr noundef %20) #12
  %21 = load ptr, ptr @initialized, align 8, !tbaa !6
  %22 = getelementptr inbounds ptr, ptr %21, i64 %2
  %23 = load ptr, ptr %22, align 8, !tbaa !6
  %24 = getelementptr inbounds i8, ptr %23, i64 16
  %25 = load ptr, ptr %24, align 8, !tbaa !6
  tail call void @free(ptr noundef %25) #12
  %26 = load ptr, ptr @model_number, align 8, !tbaa !6
  %27 = getelementptr inbounds ptr, ptr %26, i64 %2
  %28 = load ptr, ptr %27, align 8, !tbaa !6
  %29 = getelementptr inbounds i8, ptr %28, i64 16
  %30 = load ptr, ptr %29, align 8, !tbaa !6
  tail call void @free(ptr noundef %30) #12
  %31 = load ptr, ptr @initialized, align 8, !tbaa !6
  %32 = getelementptr inbounds ptr, ptr %31, i64 %2
  %33 = load ptr, ptr %32, align 8, !tbaa !6
  %34 = getelementptr inbounds i8, ptr %33, i64 24
  %35 = load ptr, ptr %34, align 8, !tbaa !6
  tail call void @free(ptr noundef %35) #12
  %36 = load ptr, ptr @model_number, align 8, !tbaa !6
  %37 = getelementptr inbounds ptr, ptr %36, i64 %2
  %38 = load ptr, ptr %37, align 8, !tbaa !6
  %39 = getelementptr inbounds i8, ptr %38, i64 24
  %40 = load ptr, ptr %39, align 8, !tbaa !6
  tail call void @free(ptr noundef %40) #12
  %41 = load ptr, ptr @initialized, align 8, !tbaa !6
  %42 = getelementptr inbounds ptr, ptr %41, i64 %2
  %43 = load ptr, ptr %42, align 8, !tbaa !6
  tail call void @free(ptr noundef %43) #12
  %44 = load ptr, ptr @model_number, align 8, !tbaa !6
  %45 = getelementptr inbounds ptr, ptr %44, i64 %2
  %46 = load ptr, ptr %45, align 8, !tbaa !6
  tail call void @free(ptr noundef %46) #12
  %47 = add nuw nsw i64 %2, 1
  %48 = icmp eq i64 %47, 3
  br i1 %48, label %49, label %1

49:                                               ; preds = %1
  %50 = load ptr, ptr @initialized, align 8, !tbaa !6
  tail call void @free(ptr noundef %50) #12
  %51 = load ptr, ptr @model_number, align 8, !tbaa !6
  tail call void @free(ptr noundef %51) #12
  ret void
}

; Function Attrs: mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite)
declare dso_local void @free(ptr allocptr nocapture noundef) local_unnamed_addr #4

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(readwrite, inaccessiblemem: none)
define dso_local void @SetCtxModelNumber() local_unnamed_addr #5 {
  %1 = load ptr, ptr @img, align 8, !tbaa !6
  %2 = getelementptr inbounds i8, ptr %1, i64 90264
  %3 = load i32, ptr %2, align 8, !tbaa !21
  %4 = getelementptr inbounds i8, ptr %1, i64 24
  %5 = load i32, ptr %4, align 8, !tbaa !22
  %6 = getelementptr inbounds i8, ptr %1, i64 31568
  %7 = load ptr, ptr %6, align 8, !tbaa !23
  %8 = getelementptr inbounds i8, ptr %7, i64 12
  %9 = load i32, ptr %8, align 4, !tbaa !24
  %10 = load i32, ptr @num_mb_per_slice, align 4, !tbaa !19
  %11 = sdiv i32 %9, %10
  %12 = icmp eq i32 %5, 2
  br i1 %12, label %57, label %13

13:                                               ; preds = %0
  %14 = load ptr, ptr @input, align 8, !tbaa !6
  %15 = getelementptr inbounds i8, ptr %14, i64 3884
  %16 = load i32, ptr %15, align 4, !tbaa !26
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %21

18:                                               ; preds = %13
  %19 = getelementptr inbounds i8, ptr %14, i64 3888
  %20 = load i32, ptr %19, align 8, !tbaa !27
  br label %57

21:                                               ; preds = %13
  %22 = load ptr, ptr @initialized, align 8, !tbaa !6
  %23 = sext i32 %3 to i64
  %24 = getelementptr inbounds ptr, ptr %22, i64 %23
  %25 = load ptr, ptr %24, align 8, !tbaa !6
  %26 = sext i32 %5 to i64
  %27 = getelementptr inbounds ptr, ptr %25, i64 %26
  %28 = load ptr, ptr %27, align 8, !tbaa !6
  %29 = sext i32 %11 to i64
  %30 = getelementptr inbounds i32, ptr %28, i64 %29
  %31 = load i32, ptr %30, align 4, !tbaa !19
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %41, label %33

33:                                               ; preds = %21
  %34 = load ptr, ptr @model_number, align 8, !tbaa !6
  %35 = getelementptr inbounds ptr, ptr %34, i64 %23
  %36 = load ptr, ptr %35, align 8, !tbaa !6
  %37 = getelementptr inbounds ptr, ptr %36, i64 %26
  %38 = load ptr, ptr %37, align 8, !tbaa !6
  %39 = getelementptr inbounds i32, ptr %38, i64 %29
  %40 = load i32, ptr %39, align 4, !tbaa !19
  br label %57

41:                                               ; preds = %21
  %42 = icmp eq i32 %11, 0
  br i1 %42, label %57, label %43

43:                                               ; preds = %41
  %44 = add nsw i32 %11, -1
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds i32, ptr %28, i64 %45
  %47 = load i32, ptr %46, align 4, !tbaa !19
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %57, label %49

49:                                               ; preds = %43
  %50 = load ptr, ptr @model_number, align 8, !tbaa !6
  %51 = getelementptr inbounds ptr, ptr %50, i64 %23
  %52 = load ptr, ptr %51, align 8, !tbaa !6
  %53 = getelementptr inbounds ptr, ptr %52, i64 %26
  %54 = load ptr, ptr %53, align 8, !tbaa !6
  %55 = getelementptr inbounds i32, ptr %54, i64 %45
  %56 = load i32, ptr %55, align 4, !tbaa !19
  br label %57

57:                                               ; preds = %41, %43, %0, %33, %49, %18
  %58 = phi i32 [ %40, %33 ], [ %56, %49 ], [ %20, %18 ], [ 0, %0 ], [ 0, %43 ], [ 0, %41 ]
  %59 = getelementptr inbounds i8, ptr %1, i64 90344
  store i32 %58, ptr %59, align 8, !tbaa !28
  ret void
}

; Function Attrs: nounwind
define dso_local void @init_contexts() local_unnamed_addr #0 {
  %1 = load ptr, ptr @img, align 8, !tbaa !6
  %2 = getelementptr inbounds i8, ptr %1, i64 31568
  %3 = load ptr, ptr %2, align 8, !tbaa !23
  %4 = getelementptr inbounds i8, ptr %3, i64 32
  %5 = load ptr, ptr %4, align 8, !tbaa !29
  %6 = getelementptr inbounds i8, ptr %3, i64 40
  %7 = load ptr, ptr %6, align 8, !tbaa !30
  %8 = load ptr, ptr @img, align 8, !tbaa !6
  %9 = getelementptr inbounds i8, ptr %8, i64 24
  %10 = load i32, ptr %9, align 8, !tbaa !22
  %11 = icmp eq i32 %10, 2
  %12 = getelementptr inbounds i8, ptr %8, i64 90344
  %13 = load i32, ptr %12, align 8, !tbaa !28
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %14, i64 0, i64 0
  %16 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %14, i64 0, i64 0
  %17 = select i1 %11, ptr %15, ptr %16
  tail call void @biari_init_context(ptr noundef %5, ptr noundef nonnull %17) #12
  %18 = load ptr, ptr @img, align 8, !tbaa !6
  %19 = getelementptr inbounds i8, ptr %18, i64 24
  %20 = load i32, ptr %19, align 8, !tbaa !22
  %21 = icmp eq i32 %20, 2
  %22 = getelementptr inbounds i8, ptr %5, i64 16
  %23 = getelementptr inbounds i8, ptr %18, i64 90344
  %24 = load i32, ptr %23, align 8, !tbaa !28
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %25, i64 0, i64 1
  %27 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %25, i64 0, i64 1
  %28 = select i1 %21, ptr %26, ptr %27
  tail call void @biari_init_context(ptr noundef nonnull %22, ptr noundef nonnull %28) #12
  %29 = load ptr, ptr @img, align 8, !tbaa !6
  %30 = getelementptr inbounds i8, ptr %29, i64 24
  %31 = load i32, ptr %30, align 8, !tbaa !22
  %32 = icmp eq i32 %31, 2
  %33 = getelementptr inbounds i8, ptr %5, i64 32
  %34 = getelementptr inbounds i8, ptr %29, i64 90344
  %35 = load i32, ptr %34, align 8, !tbaa !28
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %36, i64 0, i64 2
  %38 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %36, i64 0, i64 2
  %39 = select i1 %32, ptr %37, ptr %38
  tail call void @biari_init_context(ptr noundef nonnull %33, ptr noundef nonnull %39) #12
  %40 = load ptr, ptr @img, align 8, !tbaa !6
  %41 = getelementptr inbounds i8, ptr %40, i64 24
  %42 = load i32, ptr %41, align 8, !tbaa !22
  %43 = icmp eq i32 %42, 2
  %44 = getelementptr inbounds i8, ptr %5, i64 48
  %45 = getelementptr inbounds i8, ptr %40, i64 90344
  %46 = load i32, ptr %45, align 8, !tbaa !28
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %47, i64 0, i64 3
  %49 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %47, i64 0, i64 3
  %50 = select i1 %43, ptr %48, ptr %49
  tail call void @biari_init_context(ptr noundef nonnull %44, ptr noundef nonnull %50) #12
  %51 = load ptr, ptr @img, align 8, !tbaa !6
  %52 = getelementptr inbounds i8, ptr %51, i64 24
  %53 = load i32, ptr %52, align 8, !tbaa !22
  %54 = icmp eq i32 %53, 2
  %55 = getelementptr inbounds i8, ptr %5, i64 64
  %56 = getelementptr inbounds i8, ptr %51, i64 90344
  %57 = load i32, ptr %56, align 8, !tbaa !28
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %58, i64 0, i64 4
  %60 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %58, i64 0, i64 4
  %61 = select i1 %54, ptr %59, ptr %60
  tail call void @biari_init_context(ptr noundef nonnull %55, ptr noundef nonnull %61) #12
  %62 = load ptr, ptr @img, align 8, !tbaa !6
  %63 = getelementptr inbounds i8, ptr %62, i64 24
  %64 = load i32, ptr %63, align 8, !tbaa !22
  %65 = icmp eq i32 %64, 2
  %66 = getelementptr inbounds i8, ptr %5, i64 80
  %67 = getelementptr inbounds i8, ptr %62, i64 90344
  %68 = load i32, ptr %67, align 8, !tbaa !28
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %69, i64 0, i64 5
  %71 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %69, i64 0, i64 5
  %72 = select i1 %65, ptr %70, ptr %71
  tail call void @biari_init_context(ptr noundef nonnull %66, ptr noundef nonnull %72) #12
  %73 = load ptr, ptr @img, align 8, !tbaa !6
  %74 = getelementptr inbounds i8, ptr %73, i64 24
  %75 = load i32, ptr %74, align 8, !tbaa !22
  %76 = icmp eq i32 %75, 2
  %77 = getelementptr inbounds i8, ptr %5, i64 96
  %78 = getelementptr inbounds i8, ptr %73, i64 90344
  %79 = load i32, ptr %78, align 8, !tbaa !28
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %80, i64 0, i64 6
  %82 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %80, i64 0, i64 6
  %83 = select i1 %76, ptr %81, ptr %82
  tail call void @biari_init_context(ptr noundef nonnull %77, ptr noundef nonnull %83) #12
  %84 = load ptr, ptr @img, align 8, !tbaa !6
  %85 = getelementptr inbounds i8, ptr %84, i64 24
  %86 = load i32, ptr %85, align 8, !tbaa !22
  %87 = icmp eq i32 %86, 2
  %88 = getelementptr inbounds i8, ptr %5, i64 112
  %89 = getelementptr inbounds i8, ptr %84, i64 90344
  %90 = load i32, ptr %89, align 8, !tbaa !28
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %91, i64 0, i64 7
  %93 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %91, i64 0, i64 7
  %94 = select i1 %87, ptr %92, ptr %93
  tail call void @biari_init_context(ptr noundef nonnull %88, ptr noundef nonnull %94) #12
  %95 = load ptr, ptr @img, align 8, !tbaa !6
  %96 = getelementptr inbounds i8, ptr %95, i64 24
  %97 = load i32, ptr %96, align 8, !tbaa !22
  %98 = icmp eq i32 %97, 2
  %99 = getelementptr inbounds i8, ptr %5, i64 128
  %100 = getelementptr inbounds i8, ptr %95, i64 90344
  %101 = load i32, ptr %100, align 8, !tbaa !28
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %102, i64 0, i64 8
  %104 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %102, i64 0, i64 8
  %105 = select i1 %98, ptr %103, ptr %104
  tail call void @biari_init_context(ptr noundef nonnull %99, ptr noundef nonnull %105) #12
  %106 = load ptr, ptr @img, align 8, !tbaa !6
  %107 = getelementptr inbounds i8, ptr %106, i64 24
  %108 = load i32, ptr %107, align 8, !tbaa !22
  %109 = icmp eq i32 %108, 2
  %110 = getelementptr inbounds i8, ptr %5, i64 144
  %111 = getelementptr inbounds i8, ptr %106, i64 90344
  %112 = load i32, ptr %111, align 8, !tbaa !28
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %113, i64 0, i64 9
  %115 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %113, i64 0, i64 9
  %116 = select i1 %109, ptr %114, ptr %115
  tail call void @biari_init_context(ptr noundef nonnull %110, ptr noundef nonnull %116) #12
  %117 = load ptr, ptr @img, align 8, !tbaa !6
  %118 = getelementptr inbounds i8, ptr %117, i64 24
  %119 = load i32, ptr %118, align 8, !tbaa !22
  %120 = icmp eq i32 %119, 2
  %121 = getelementptr inbounds i8, ptr %5, i64 160
  %122 = getelementptr inbounds i8, ptr %117, i64 90344
  %123 = load i32, ptr %122, align 8, !tbaa !28
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %124, i64 0, i64 10
  %126 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %124, i64 0, i64 10
  %127 = select i1 %120, ptr %125, ptr %126
  tail call void @biari_init_context(ptr noundef nonnull %121, ptr noundef nonnull %127) #12
  %128 = load ptr, ptr @img, align 8, !tbaa !6
  %129 = getelementptr inbounds i8, ptr %128, i64 24
  %130 = load i32, ptr %129, align 8, !tbaa !22
  %131 = icmp eq i32 %130, 2
  %132 = getelementptr inbounds i8, ptr %5, i64 176
  %133 = getelementptr inbounds i8, ptr %128, i64 90344
  %134 = load i32, ptr %133, align 8, !tbaa !28
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %135, i64 1, i64 0
  %137 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %135, i64 1, i64 0
  %138 = select i1 %131, ptr %136, ptr %137
  tail call void @biari_init_context(ptr noundef nonnull %132, ptr noundef nonnull %138) #12
  %139 = load ptr, ptr @img, align 8, !tbaa !6
  %140 = getelementptr inbounds i8, ptr %139, i64 24
  %141 = load i32, ptr %140, align 8, !tbaa !22
  %142 = icmp eq i32 %141, 2
  %143 = getelementptr inbounds i8, ptr %5, i64 192
  %144 = getelementptr inbounds i8, ptr %139, i64 90344
  %145 = load i32, ptr %144, align 8, !tbaa !28
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %146, i64 1, i64 1
  %148 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %146, i64 1, i64 1
  %149 = select i1 %142, ptr %147, ptr %148
  tail call void @biari_init_context(ptr noundef nonnull %143, ptr noundef nonnull %149) #12
  %150 = load ptr, ptr @img, align 8, !tbaa !6
  %151 = getelementptr inbounds i8, ptr %150, i64 24
  %152 = load i32, ptr %151, align 8, !tbaa !22
  %153 = icmp eq i32 %152, 2
  %154 = getelementptr inbounds i8, ptr %5, i64 208
  %155 = getelementptr inbounds i8, ptr %150, i64 90344
  %156 = load i32, ptr %155, align 8, !tbaa !28
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %157, i64 1, i64 2
  %159 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %157, i64 1, i64 2
  %160 = select i1 %153, ptr %158, ptr %159
  tail call void @biari_init_context(ptr noundef nonnull %154, ptr noundef nonnull %160) #12
  %161 = load ptr, ptr @img, align 8, !tbaa !6
  %162 = getelementptr inbounds i8, ptr %161, i64 24
  %163 = load i32, ptr %162, align 8, !tbaa !22
  %164 = icmp eq i32 %163, 2
  %165 = getelementptr inbounds i8, ptr %5, i64 224
  %166 = getelementptr inbounds i8, ptr %161, i64 90344
  %167 = load i32, ptr %166, align 8, !tbaa !28
  %168 = sext i32 %167 to i64
  %169 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %168, i64 1, i64 3
  %170 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %168, i64 1, i64 3
  %171 = select i1 %164, ptr %169, ptr %170
  tail call void @biari_init_context(ptr noundef nonnull %165, ptr noundef nonnull %171) #12
  %172 = load ptr, ptr @img, align 8, !tbaa !6
  %173 = getelementptr inbounds i8, ptr %172, i64 24
  %174 = load i32, ptr %173, align 8, !tbaa !22
  %175 = icmp eq i32 %174, 2
  %176 = getelementptr inbounds i8, ptr %5, i64 240
  %177 = getelementptr inbounds i8, ptr %172, i64 90344
  %178 = load i32, ptr %177, align 8, !tbaa !28
  %179 = sext i32 %178 to i64
  %180 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %179, i64 1, i64 4
  %181 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %179, i64 1, i64 4
  %182 = select i1 %175, ptr %180, ptr %181
  tail call void @biari_init_context(ptr noundef nonnull %176, ptr noundef nonnull %182) #12
  %183 = load ptr, ptr @img, align 8, !tbaa !6
  %184 = getelementptr inbounds i8, ptr %183, i64 24
  %185 = load i32, ptr %184, align 8, !tbaa !22
  %186 = icmp eq i32 %185, 2
  %187 = getelementptr inbounds i8, ptr %5, i64 256
  %188 = getelementptr inbounds i8, ptr %183, i64 90344
  %189 = load i32, ptr %188, align 8, !tbaa !28
  %190 = sext i32 %189 to i64
  %191 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %190, i64 1, i64 5
  %192 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %190, i64 1, i64 5
  %193 = select i1 %186, ptr %191, ptr %192
  tail call void @biari_init_context(ptr noundef nonnull %187, ptr noundef nonnull %193) #12
  %194 = load ptr, ptr @img, align 8, !tbaa !6
  %195 = getelementptr inbounds i8, ptr %194, i64 24
  %196 = load i32, ptr %195, align 8, !tbaa !22
  %197 = icmp eq i32 %196, 2
  %198 = getelementptr inbounds i8, ptr %5, i64 272
  %199 = getelementptr inbounds i8, ptr %194, i64 90344
  %200 = load i32, ptr %199, align 8, !tbaa !28
  %201 = sext i32 %200 to i64
  %202 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %201, i64 1, i64 6
  %203 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %201, i64 1, i64 6
  %204 = select i1 %197, ptr %202, ptr %203
  tail call void @biari_init_context(ptr noundef nonnull %198, ptr noundef nonnull %204) #12
  %205 = load ptr, ptr @img, align 8, !tbaa !6
  %206 = getelementptr inbounds i8, ptr %205, i64 24
  %207 = load i32, ptr %206, align 8, !tbaa !22
  %208 = icmp eq i32 %207, 2
  %209 = getelementptr inbounds i8, ptr %5, i64 288
  %210 = getelementptr inbounds i8, ptr %205, i64 90344
  %211 = load i32, ptr %210, align 8, !tbaa !28
  %212 = sext i32 %211 to i64
  %213 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %212, i64 1, i64 7
  %214 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %212, i64 1, i64 7
  %215 = select i1 %208, ptr %213, ptr %214
  tail call void @biari_init_context(ptr noundef nonnull %209, ptr noundef nonnull %215) #12
  %216 = load ptr, ptr @img, align 8, !tbaa !6
  %217 = getelementptr inbounds i8, ptr %216, i64 24
  %218 = load i32, ptr %217, align 8, !tbaa !22
  %219 = icmp eq i32 %218, 2
  %220 = getelementptr inbounds i8, ptr %5, i64 304
  %221 = getelementptr inbounds i8, ptr %216, i64 90344
  %222 = load i32, ptr %221, align 8, !tbaa !28
  %223 = sext i32 %222 to i64
  %224 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %223, i64 1, i64 8
  %225 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %223, i64 1, i64 8
  %226 = select i1 %219, ptr %224, ptr %225
  tail call void @biari_init_context(ptr noundef nonnull %220, ptr noundef nonnull %226) #12
  %227 = load ptr, ptr @img, align 8, !tbaa !6
  %228 = getelementptr inbounds i8, ptr %227, i64 24
  %229 = load i32, ptr %228, align 8, !tbaa !22
  %230 = icmp eq i32 %229, 2
  %231 = getelementptr inbounds i8, ptr %5, i64 320
  %232 = getelementptr inbounds i8, ptr %227, i64 90344
  %233 = load i32, ptr %232, align 8, !tbaa !28
  %234 = sext i32 %233 to i64
  %235 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %234, i64 1, i64 9
  %236 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %234, i64 1, i64 9
  %237 = select i1 %230, ptr %235, ptr %236
  tail call void @biari_init_context(ptr noundef nonnull %231, ptr noundef nonnull %237) #12
  %238 = load ptr, ptr @img, align 8, !tbaa !6
  %239 = getelementptr inbounds i8, ptr %238, i64 24
  %240 = load i32, ptr %239, align 8, !tbaa !22
  %241 = icmp eq i32 %240, 2
  %242 = getelementptr inbounds i8, ptr %5, i64 336
  %243 = getelementptr inbounds i8, ptr %238, i64 90344
  %244 = load i32, ptr %243, align 8, !tbaa !28
  %245 = sext i32 %244 to i64
  %246 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %245, i64 1, i64 10
  %247 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %245, i64 1, i64 10
  %248 = select i1 %241, ptr %246, ptr %247
  tail call void @biari_init_context(ptr noundef nonnull %242, ptr noundef nonnull %248) #12
  %249 = load ptr, ptr @img, align 8, !tbaa !6
  %250 = getelementptr inbounds i8, ptr %249, i64 24
  %251 = load i32, ptr %250, align 8, !tbaa !22
  %252 = icmp eq i32 %251, 2
  %253 = getelementptr inbounds i8, ptr %5, i64 352
  %254 = getelementptr inbounds i8, ptr %249, i64 90344
  %255 = load i32, ptr %254, align 8, !tbaa !28
  %256 = sext i32 %255 to i64
  %257 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %256, i64 2, i64 0
  %258 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %256, i64 2, i64 0
  %259 = select i1 %252, ptr %257, ptr %258
  tail call void @biari_init_context(ptr noundef nonnull %253, ptr noundef nonnull %259) #12
  %260 = load ptr, ptr @img, align 8, !tbaa !6
  %261 = getelementptr inbounds i8, ptr %260, i64 24
  %262 = load i32, ptr %261, align 8, !tbaa !22
  %263 = icmp eq i32 %262, 2
  %264 = getelementptr inbounds i8, ptr %5, i64 368
  %265 = getelementptr inbounds i8, ptr %260, i64 90344
  %266 = load i32, ptr %265, align 8, !tbaa !28
  %267 = sext i32 %266 to i64
  %268 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %267, i64 2, i64 1
  %269 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %267, i64 2, i64 1
  %270 = select i1 %263, ptr %268, ptr %269
  tail call void @biari_init_context(ptr noundef nonnull %264, ptr noundef nonnull %270) #12
  %271 = load ptr, ptr @img, align 8, !tbaa !6
  %272 = getelementptr inbounds i8, ptr %271, i64 24
  %273 = load i32, ptr %272, align 8, !tbaa !22
  %274 = icmp eq i32 %273, 2
  %275 = getelementptr inbounds i8, ptr %5, i64 384
  %276 = getelementptr inbounds i8, ptr %271, i64 90344
  %277 = load i32, ptr %276, align 8, !tbaa !28
  %278 = sext i32 %277 to i64
  %279 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %278, i64 2, i64 2
  %280 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %278, i64 2, i64 2
  %281 = select i1 %274, ptr %279, ptr %280
  tail call void @biari_init_context(ptr noundef nonnull %275, ptr noundef nonnull %281) #12
  %282 = load ptr, ptr @img, align 8, !tbaa !6
  %283 = getelementptr inbounds i8, ptr %282, i64 24
  %284 = load i32, ptr %283, align 8, !tbaa !22
  %285 = icmp eq i32 %284, 2
  %286 = getelementptr inbounds i8, ptr %5, i64 400
  %287 = getelementptr inbounds i8, ptr %282, i64 90344
  %288 = load i32, ptr %287, align 8, !tbaa !28
  %289 = sext i32 %288 to i64
  %290 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %289, i64 2, i64 3
  %291 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %289, i64 2, i64 3
  %292 = select i1 %285, ptr %290, ptr %291
  tail call void @biari_init_context(ptr noundef nonnull %286, ptr noundef nonnull %292) #12
  %293 = load ptr, ptr @img, align 8, !tbaa !6
  %294 = getelementptr inbounds i8, ptr %293, i64 24
  %295 = load i32, ptr %294, align 8, !tbaa !22
  %296 = icmp eq i32 %295, 2
  %297 = getelementptr inbounds i8, ptr %5, i64 416
  %298 = getelementptr inbounds i8, ptr %293, i64 90344
  %299 = load i32, ptr %298, align 8, !tbaa !28
  %300 = sext i32 %299 to i64
  %301 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %300, i64 2, i64 4
  %302 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %300, i64 2, i64 4
  %303 = select i1 %296, ptr %301, ptr %302
  tail call void @biari_init_context(ptr noundef nonnull %297, ptr noundef nonnull %303) #12
  %304 = load ptr, ptr @img, align 8, !tbaa !6
  %305 = getelementptr inbounds i8, ptr %304, i64 24
  %306 = load i32, ptr %305, align 8, !tbaa !22
  %307 = icmp eq i32 %306, 2
  %308 = getelementptr inbounds i8, ptr %5, i64 432
  %309 = getelementptr inbounds i8, ptr %304, i64 90344
  %310 = load i32, ptr %309, align 8, !tbaa !28
  %311 = sext i32 %310 to i64
  %312 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %311, i64 2, i64 5
  %313 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %311, i64 2, i64 5
  %314 = select i1 %307, ptr %312, ptr %313
  tail call void @biari_init_context(ptr noundef nonnull %308, ptr noundef nonnull %314) #12
  %315 = load ptr, ptr @img, align 8, !tbaa !6
  %316 = getelementptr inbounds i8, ptr %315, i64 24
  %317 = load i32, ptr %316, align 8, !tbaa !22
  %318 = icmp eq i32 %317, 2
  %319 = getelementptr inbounds i8, ptr %5, i64 448
  %320 = getelementptr inbounds i8, ptr %315, i64 90344
  %321 = load i32, ptr %320, align 8, !tbaa !28
  %322 = sext i32 %321 to i64
  %323 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %322, i64 2, i64 6
  %324 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %322, i64 2, i64 6
  %325 = select i1 %318, ptr %323, ptr %324
  tail call void @biari_init_context(ptr noundef nonnull %319, ptr noundef nonnull %325) #12
  %326 = load ptr, ptr @img, align 8, !tbaa !6
  %327 = getelementptr inbounds i8, ptr %326, i64 24
  %328 = load i32, ptr %327, align 8, !tbaa !22
  %329 = icmp eq i32 %328, 2
  %330 = getelementptr inbounds i8, ptr %5, i64 464
  %331 = getelementptr inbounds i8, ptr %326, i64 90344
  %332 = load i32, ptr %331, align 8, !tbaa !28
  %333 = sext i32 %332 to i64
  %334 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %333, i64 2, i64 7
  %335 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %333, i64 2, i64 7
  %336 = select i1 %329, ptr %334, ptr %335
  tail call void @biari_init_context(ptr noundef nonnull %330, ptr noundef nonnull %336) #12
  %337 = load ptr, ptr @img, align 8, !tbaa !6
  %338 = getelementptr inbounds i8, ptr %337, i64 24
  %339 = load i32, ptr %338, align 8, !tbaa !22
  %340 = icmp eq i32 %339, 2
  %341 = getelementptr inbounds i8, ptr %5, i64 480
  %342 = getelementptr inbounds i8, ptr %337, i64 90344
  %343 = load i32, ptr %342, align 8, !tbaa !28
  %344 = sext i32 %343 to i64
  %345 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %344, i64 2, i64 8
  %346 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %344, i64 2, i64 8
  %347 = select i1 %340, ptr %345, ptr %346
  tail call void @biari_init_context(ptr noundef nonnull %341, ptr noundef nonnull %347) #12
  %348 = load ptr, ptr @img, align 8, !tbaa !6
  %349 = getelementptr inbounds i8, ptr %348, i64 24
  %350 = load i32, ptr %349, align 8, !tbaa !22
  %351 = icmp eq i32 %350, 2
  %352 = getelementptr inbounds i8, ptr %5, i64 496
  %353 = getelementptr inbounds i8, ptr %348, i64 90344
  %354 = load i32, ptr %353, align 8, !tbaa !28
  %355 = sext i32 %354 to i64
  %356 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %355, i64 2, i64 9
  %357 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %355, i64 2, i64 9
  %358 = select i1 %351, ptr %356, ptr %357
  tail call void @biari_init_context(ptr noundef nonnull %352, ptr noundef nonnull %358) #12
  %359 = load ptr, ptr @img, align 8, !tbaa !6
  %360 = getelementptr inbounds i8, ptr %359, i64 24
  %361 = load i32, ptr %360, align 8, !tbaa !22
  %362 = icmp eq i32 %361, 2
  %363 = getelementptr inbounds i8, ptr %5, i64 512
  %364 = getelementptr inbounds i8, ptr %359, i64 90344
  %365 = load i32, ptr %364, align 8, !tbaa !28
  %366 = sext i32 %365 to i64
  %367 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 %366, i64 2, i64 10
  %368 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %366, i64 2, i64 10
  %369 = select i1 %362, ptr %367, ptr %368
  tail call void @biari_init_context(ptr noundef nonnull %363, ptr noundef nonnull %369) #12
  %370 = getelementptr inbounds i8, ptr %5, i64 528
  %371 = load ptr, ptr @img, align 8, !tbaa !6
  %372 = getelementptr inbounds i8, ptr %371, i64 24
  %373 = load i32, ptr %372, align 8, !tbaa !22
  %374 = icmp eq i32 %373, 2
  %375 = getelementptr inbounds i8, ptr %371, i64 90344
  %376 = load i32, ptr %375, align 8, !tbaa !28
  %377 = sext i32 %376 to i64
  %378 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_I, i64 0, i64 %377, i64 0, i64 0
  %379 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %377, i64 0, i64 0
  %380 = select i1 %374, ptr %378, ptr %379
  tail call void @biari_init_context(ptr noundef nonnull %370, ptr noundef nonnull %380) #12
  %381 = load ptr, ptr @img, align 8, !tbaa !6
  %382 = getelementptr inbounds i8, ptr %381, i64 24
  %383 = load i32, ptr %382, align 8, !tbaa !22
  %384 = icmp eq i32 %383, 2
  %385 = getelementptr inbounds i8, ptr %5, i64 544
  %386 = getelementptr inbounds i8, ptr %381, i64 90344
  %387 = load i32, ptr %386, align 8, !tbaa !28
  %388 = sext i32 %387 to i64
  %389 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_I, i64 0, i64 %388, i64 0, i64 1
  %390 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %388, i64 0, i64 1
  %391 = select i1 %384, ptr %389, ptr %390
  tail call void @biari_init_context(ptr noundef nonnull %385, ptr noundef nonnull %391) #12
  %392 = load ptr, ptr @img, align 8, !tbaa !6
  %393 = getelementptr inbounds i8, ptr %392, i64 24
  %394 = load i32, ptr %393, align 8, !tbaa !22
  %395 = icmp eq i32 %394, 2
  %396 = getelementptr inbounds i8, ptr %5, i64 560
  %397 = getelementptr inbounds i8, ptr %392, i64 90344
  %398 = load i32, ptr %397, align 8, !tbaa !28
  %399 = sext i32 %398 to i64
  %400 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_I, i64 0, i64 %399, i64 0, i64 2
  %401 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %399, i64 0, i64 2
  %402 = select i1 %395, ptr %400, ptr %401
  tail call void @biari_init_context(ptr noundef nonnull %396, ptr noundef nonnull %402) #12
  %403 = load ptr, ptr @img, align 8, !tbaa !6
  %404 = getelementptr inbounds i8, ptr %403, i64 24
  %405 = load i32, ptr %404, align 8, !tbaa !22
  %406 = icmp eq i32 %405, 2
  %407 = getelementptr inbounds i8, ptr %5, i64 576
  %408 = getelementptr inbounds i8, ptr %403, i64 90344
  %409 = load i32, ptr %408, align 8, !tbaa !28
  %410 = sext i32 %409 to i64
  %411 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_I, i64 0, i64 %410, i64 0, i64 3
  %412 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %410, i64 0, i64 3
  %413 = select i1 %406, ptr %411, ptr %412
  tail call void @biari_init_context(ptr noundef nonnull %407, ptr noundef nonnull %413) #12
  %414 = load ptr, ptr @img, align 8, !tbaa !6
  %415 = getelementptr inbounds i8, ptr %414, i64 24
  %416 = load i32, ptr %415, align 8, !tbaa !22
  %417 = icmp eq i32 %416, 2
  %418 = getelementptr inbounds i8, ptr %5, i64 592
  %419 = getelementptr inbounds i8, ptr %414, i64 90344
  %420 = load i32, ptr %419, align 8, !tbaa !28
  %421 = sext i32 %420 to i64
  %422 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_I, i64 0, i64 %421, i64 0, i64 4
  %423 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %421, i64 0, i64 4
  %424 = select i1 %417, ptr %422, ptr %423
  tail call void @biari_init_context(ptr noundef nonnull %418, ptr noundef nonnull %424) #12
  %425 = load ptr, ptr @img, align 8, !tbaa !6
  %426 = getelementptr inbounds i8, ptr %425, i64 24
  %427 = load i32, ptr %426, align 8, !tbaa !22
  %428 = icmp eq i32 %427, 2
  %429 = getelementptr inbounds i8, ptr %5, i64 608
  %430 = getelementptr inbounds i8, ptr %425, i64 90344
  %431 = load i32, ptr %430, align 8, !tbaa !28
  %432 = sext i32 %431 to i64
  %433 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_I, i64 0, i64 %432, i64 0, i64 5
  %434 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %432, i64 0, i64 5
  %435 = select i1 %428, ptr %433, ptr %434
  tail call void @biari_init_context(ptr noundef nonnull %429, ptr noundef nonnull %435) #12
  %436 = load ptr, ptr @img, align 8, !tbaa !6
  %437 = getelementptr inbounds i8, ptr %436, i64 24
  %438 = load i32, ptr %437, align 8, !tbaa !22
  %439 = icmp eq i32 %438, 2
  %440 = getelementptr inbounds i8, ptr %5, i64 624
  %441 = getelementptr inbounds i8, ptr %436, i64 90344
  %442 = load i32, ptr %441, align 8, !tbaa !28
  %443 = sext i32 %442 to i64
  %444 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_I, i64 0, i64 %443, i64 0, i64 6
  %445 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %443, i64 0, i64 6
  %446 = select i1 %439, ptr %444, ptr %445
  tail call void @biari_init_context(ptr noundef nonnull %440, ptr noundef nonnull %446) #12
  %447 = load ptr, ptr @img, align 8, !tbaa !6
  %448 = getelementptr inbounds i8, ptr %447, i64 24
  %449 = load i32, ptr %448, align 8, !tbaa !22
  %450 = icmp eq i32 %449, 2
  %451 = getelementptr inbounds i8, ptr %5, i64 640
  %452 = getelementptr inbounds i8, ptr %447, i64 90344
  %453 = load i32, ptr %452, align 8, !tbaa !28
  %454 = sext i32 %453 to i64
  %455 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_I, i64 0, i64 %454, i64 0, i64 7
  %456 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %454, i64 0, i64 7
  %457 = select i1 %450, ptr %455, ptr %456
  tail call void @biari_init_context(ptr noundef nonnull %451, ptr noundef nonnull %457) #12
  %458 = load ptr, ptr @img, align 8, !tbaa !6
  %459 = getelementptr inbounds i8, ptr %458, i64 24
  %460 = load i32, ptr %459, align 8, !tbaa !22
  %461 = icmp eq i32 %460, 2
  %462 = getelementptr inbounds i8, ptr %5, i64 656
  %463 = getelementptr inbounds i8, ptr %458, i64 90344
  %464 = load i32, ptr %463, align 8, !tbaa !28
  %465 = sext i32 %464 to i64
  %466 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_I, i64 0, i64 %465, i64 0, i64 8
  %467 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %465, i64 0, i64 8
  %468 = select i1 %461, ptr %466, ptr %467
  tail call void @biari_init_context(ptr noundef nonnull %462, ptr noundef nonnull %468) #12
  %469 = load ptr, ptr @img, align 8, !tbaa !6
  %470 = getelementptr inbounds i8, ptr %469, i64 24
  %471 = load i32, ptr %470, align 8, !tbaa !22
  %472 = icmp eq i32 %471, 2
  %473 = getelementptr inbounds i8, ptr %5, i64 672
  %474 = getelementptr inbounds i8, ptr %469, i64 90344
  %475 = load i32, ptr %474, align 8, !tbaa !28
  %476 = sext i32 %475 to i64
  %477 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_I, i64 0, i64 %476, i64 1, i64 0
  %478 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %476, i64 1, i64 0
  %479 = select i1 %472, ptr %477, ptr %478
  tail call void @biari_init_context(ptr noundef nonnull %473, ptr noundef nonnull %479) #12
  %480 = load ptr, ptr @img, align 8, !tbaa !6
  %481 = getelementptr inbounds i8, ptr %480, i64 24
  %482 = load i32, ptr %481, align 8, !tbaa !22
  %483 = icmp eq i32 %482, 2
  %484 = getelementptr inbounds i8, ptr %5, i64 688
  %485 = getelementptr inbounds i8, ptr %480, i64 90344
  %486 = load i32, ptr %485, align 8, !tbaa !28
  %487 = sext i32 %486 to i64
  %488 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_I, i64 0, i64 %487, i64 1, i64 1
  %489 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %487, i64 1, i64 1
  %490 = select i1 %483, ptr %488, ptr %489
  tail call void @biari_init_context(ptr noundef nonnull %484, ptr noundef nonnull %490) #12
  %491 = load ptr, ptr @img, align 8, !tbaa !6
  %492 = getelementptr inbounds i8, ptr %491, i64 24
  %493 = load i32, ptr %492, align 8, !tbaa !22
  %494 = icmp eq i32 %493, 2
  %495 = getelementptr inbounds i8, ptr %5, i64 704
  %496 = getelementptr inbounds i8, ptr %491, i64 90344
  %497 = load i32, ptr %496, align 8, !tbaa !28
  %498 = sext i32 %497 to i64
  %499 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_I, i64 0, i64 %498, i64 1, i64 2
  %500 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %498, i64 1, i64 2
  %501 = select i1 %494, ptr %499, ptr %500
  tail call void @biari_init_context(ptr noundef nonnull %495, ptr noundef nonnull %501) #12
  %502 = load ptr, ptr @img, align 8, !tbaa !6
  %503 = getelementptr inbounds i8, ptr %502, i64 24
  %504 = load i32, ptr %503, align 8, !tbaa !22
  %505 = icmp eq i32 %504, 2
  %506 = getelementptr inbounds i8, ptr %5, i64 720
  %507 = getelementptr inbounds i8, ptr %502, i64 90344
  %508 = load i32, ptr %507, align 8, !tbaa !28
  %509 = sext i32 %508 to i64
  %510 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_I, i64 0, i64 %509, i64 1, i64 3
  %511 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %509, i64 1, i64 3
  %512 = select i1 %505, ptr %510, ptr %511
  tail call void @biari_init_context(ptr noundef nonnull %506, ptr noundef nonnull %512) #12
  %513 = load ptr, ptr @img, align 8, !tbaa !6
  %514 = getelementptr inbounds i8, ptr %513, i64 24
  %515 = load i32, ptr %514, align 8, !tbaa !22
  %516 = icmp eq i32 %515, 2
  %517 = getelementptr inbounds i8, ptr %5, i64 736
  %518 = getelementptr inbounds i8, ptr %513, i64 90344
  %519 = load i32, ptr %518, align 8, !tbaa !28
  %520 = sext i32 %519 to i64
  %521 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_I, i64 0, i64 %520, i64 1, i64 4
  %522 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %520, i64 1, i64 4
  %523 = select i1 %516, ptr %521, ptr %522
  tail call void @biari_init_context(ptr noundef nonnull %517, ptr noundef nonnull %523) #12
  %524 = load ptr, ptr @img, align 8, !tbaa !6
  %525 = getelementptr inbounds i8, ptr %524, i64 24
  %526 = load i32, ptr %525, align 8, !tbaa !22
  %527 = icmp eq i32 %526, 2
  %528 = getelementptr inbounds i8, ptr %5, i64 752
  %529 = getelementptr inbounds i8, ptr %524, i64 90344
  %530 = load i32, ptr %529, align 8, !tbaa !28
  %531 = sext i32 %530 to i64
  %532 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_I, i64 0, i64 %531, i64 1, i64 5
  %533 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %531, i64 1, i64 5
  %534 = select i1 %527, ptr %532, ptr %533
  tail call void @biari_init_context(ptr noundef nonnull %528, ptr noundef nonnull %534) #12
  %535 = load ptr, ptr @img, align 8, !tbaa !6
  %536 = getelementptr inbounds i8, ptr %535, i64 24
  %537 = load i32, ptr %536, align 8, !tbaa !22
  %538 = icmp eq i32 %537, 2
  %539 = getelementptr inbounds i8, ptr %5, i64 768
  %540 = getelementptr inbounds i8, ptr %535, i64 90344
  %541 = load i32, ptr %540, align 8, !tbaa !28
  %542 = sext i32 %541 to i64
  %543 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_I, i64 0, i64 %542, i64 1, i64 6
  %544 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %542, i64 1, i64 6
  %545 = select i1 %538, ptr %543, ptr %544
  tail call void @biari_init_context(ptr noundef nonnull %539, ptr noundef nonnull %545) #12
  %546 = load ptr, ptr @img, align 8, !tbaa !6
  %547 = getelementptr inbounds i8, ptr %546, i64 24
  %548 = load i32, ptr %547, align 8, !tbaa !22
  %549 = icmp eq i32 %548, 2
  %550 = getelementptr inbounds i8, ptr %5, i64 784
  %551 = getelementptr inbounds i8, ptr %546, i64 90344
  %552 = load i32, ptr %551, align 8, !tbaa !28
  %553 = sext i32 %552 to i64
  %554 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_I, i64 0, i64 %553, i64 1, i64 7
  %555 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %553, i64 1, i64 7
  %556 = select i1 %549, ptr %554, ptr %555
  tail call void @biari_init_context(ptr noundef nonnull %550, ptr noundef nonnull %556) #12
  %557 = load ptr, ptr @img, align 8, !tbaa !6
  %558 = getelementptr inbounds i8, ptr %557, i64 24
  %559 = load i32, ptr %558, align 8, !tbaa !22
  %560 = icmp eq i32 %559, 2
  %561 = getelementptr inbounds i8, ptr %5, i64 800
  %562 = getelementptr inbounds i8, ptr %557, i64 90344
  %563 = load i32, ptr %562, align 8, !tbaa !28
  %564 = sext i32 %563 to i64
  %565 = getelementptr inbounds [1 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_I, i64 0, i64 %564, i64 1, i64 8
  %566 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %564, i64 1, i64 8
  %567 = select i1 %560, ptr %565, ptr %566
  tail call void @biari_init_context(ptr noundef nonnull %561, ptr noundef nonnull %567) #12
  %568 = getelementptr inbounds i8, ptr %5, i64 816
  %569 = load ptr, ptr @img, align 8, !tbaa !6
  %570 = getelementptr inbounds i8, ptr %569, i64 24
  %571 = load i32, ptr %570, align 8, !tbaa !22
  %572 = icmp eq i32 %571, 2
  %573 = getelementptr inbounds i8, ptr %569, i64 90344
  %574 = load i32, ptr %573, align 8, !tbaa !28
  %575 = sext i32 %574 to i64
  %576 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %575, i64 0, i64 0
  %577 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %575, i64 0, i64 0
  %578 = select i1 %572, ptr %576, ptr %577
  tail call void @biari_init_context(ptr noundef nonnull %568, ptr noundef nonnull %578) #12
  %579 = load ptr, ptr @img, align 8, !tbaa !6
  %580 = getelementptr inbounds i8, ptr %579, i64 24
  %581 = load i32, ptr %580, align 8, !tbaa !22
  %582 = icmp eq i32 %581, 2
  %583 = getelementptr inbounds i8, ptr %5, i64 832
  %584 = getelementptr inbounds i8, ptr %579, i64 90344
  %585 = load i32, ptr %584, align 8, !tbaa !28
  %586 = sext i32 %585 to i64
  %587 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %586, i64 0, i64 1
  %588 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %586, i64 0, i64 1
  %589 = select i1 %582, ptr %587, ptr %588
  tail call void @biari_init_context(ptr noundef nonnull %583, ptr noundef nonnull %589) #12
  %590 = load ptr, ptr @img, align 8, !tbaa !6
  %591 = getelementptr inbounds i8, ptr %590, i64 24
  %592 = load i32, ptr %591, align 8, !tbaa !22
  %593 = icmp eq i32 %592, 2
  %594 = getelementptr inbounds i8, ptr %5, i64 848
  %595 = getelementptr inbounds i8, ptr %590, i64 90344
  %596 = load i32, ptr %595, align 8, !tbaa !28
  %597 = sext i32 %596 to i64
  %598 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %597, i64 0, i64 2
  %599 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %597, i64 0, i64 2
  %600 = select i1 %593, ptr %598, ptr %599
  tail call void @biari_init_context(ptr noundef nonnull %594, ptr noundef nonnull %600) #12
  %601 = load ptr, ptr @img, align 8, !tbaa !6
  %602 = getelementptr inbounds i8, ptr %601, i64 24
  %603 = load i32, ptr %602, align 8, !tbaa !22
  %604 = icmp eq i32 %603, 2
  %605 = getelementptr inbounds i8, ptr %5, i64 864
  %606 = getelementptr inbounds i8, ptr %601, i64 90344
  %607 = load i32, ptr %606, align 8, !tbaa !28
  %608 = sext i32 %607 to i64
  %609 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %608, i64 0, i64 3
  %610 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %608, i64 0, i64 3
  %611 = select i1 %604, ptr %609, ptr %610
  tail call void @biari_init_context(ptr noundef nonnull %605, ptr noundef nonnull %611) #12
  %612 = load ptr, ptr @img, align 8, !tbaa !6
  %613 = getelementptr inbounds i8, ptr %612, i64 24
  %614 = load i32, ptr %613, align 8, !tbaa !22
  %615 = icmp eq i32 %614, 2
  %616 = getelementptr inbounds i8, ptr %5, i64 880
  %617 = getelementptr inbounds i8, ptr %612, i64 90344
  %618 = load i32, ptr %617, align 8, !tbaa !28
  %619 = sext i32 %618 to i64
  %620 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %619, i64 0, i64 4
  %621 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %619, i64 0, i64 4
  %622 = select i1 %615, ptr %620, ptr %621
  tail call void @biari_init_context(ptr noundef nonnull %616, ptr noundef nonnull %622) #12
  %623 = load ptr, ptr @img, align 8, !tbaa !6
  %624 = getelementptr inbounds i8, ptr %623, i64 24
  %625 = load i32, ptr %624, align 8, !tbaa !22
  %626 = icmp eq i32 %625, 2
  %627 = getelementptr inbounds i8, ptr %5, i64 896
  %628 = getelementptr inbounds i8, ptr %623, i64 90344
  %629 = load i32, ptr %628, align 8, !tbaa !28
  %630 = sext i32 %629 to i64
  %631 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %630, i64 0, i64 5
  %632 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %630, i64 0, i64 5
  %633 = select i1 %626, ptr %631, ptr %632
  tail call void @biari_init_context(ptr noundef nonnull %627, ptr noundef nonnull %633) #12
  %634 = load ptr, ptr @img, align 8, !tbaa !6
  %635 = getelementptr inbounds i8, ptr %634, i64 24
  %636 = load i32, ptr %635, align 8, !tbaa !22
  %637 = icmp eq i32 %636, 2
  %638 = getelementptr inbounds i8, ptr %5, i64 912
  %639 = getelementptr inbounds i8, ptr %634, i64 90344
  %640 = load i32, ptr %639, align 8, !tbaa !28
  %641 = sext i32 %640 to i64
  %642 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %641, i64 0, i64 6
  %643 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %641, i64 0, i64 6
  %644 = select i1 %637, ptr %642, ptr %643
  tail call void @biari_init_context(ptr noundef nonnull %638, ptr noundef nonnull %644) #12
  %645 = load ptr, ptr @img, align 8, !tbaa !6
  %646 = getelementptr inbounds i8, ptr %645, i64 24
  %647 = load i32, ptr %646, align 8, !tbaa !22
  %648 = icmp eq i32 %647, 2
  %649 = getelementptr inbounds i8, ptr %5, i64 928
  %650 = getelementptr inbounds i8, ptr %645, i64 90344
  %651 = load i32, ptr %650, align 8, !tbaa !28
  %652 = sext i32 %651 to i64
  %653 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %652, i64 0, i64 7
  %654 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %652, i64 0, i64 7
  %655 = select i1 %648, ptr %653, ptr %654
  tail call void @biari_init_context(ptr noundef nonnull %649, ptr noundef nonnull %655) #12
  %656 = load ptr, ptr @img, align 8, !tbaa !6
  %657 = getelementptr inbounds i8, ptr %656, i64 24
  %658 = load i32, ptr %657, align 8, !tbaa !22
  %659 = icmp eq i32 %658, 2
  %660 = getelementptr inbounds i8, ptr %5, i64 944
  %661 = getelementptr inbounds i8, ptr %656, i64 90344
  %662 = load i32, ptr %661, align 8, !tbaa !28
  %663 = sext i32 %662 to i64
  %664 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %663, i64 0, i64 8
  %665 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %663, i64 0, i64 8
  %666 = select i1 %659, ptr %664, ptr %665
  tail call void @biari_init_context(ptr noundef nonnull %660, ptr noundef nonnull %666) #12
  %667 = load ptr, ptr @img, align 8, !tbaa !6
  %668 = getelementptr inbounds i8, ptr %667, i64 24
  %669 = load i32, ptr %668, align 8, !tbaa !22
  %670 = icmp eq i32 %669, 2
  %671 = getelementptr inbounds i8, ptr %5, i64 960
  %672 = getelementptr inbounds i8, ptr %667, i64 90344
  %673 = load i32, ptr %672, align 8, !tbaa !28
  %674 = sext i32 %673 to i64
  %675 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %674, i64 0, i64 9
  %676 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %674, i64 0, i64 9
  %677 = select i1 %670, ptr %675, ptr %676
  tail call void @biari_init_context(ptr noundef nonnull %671, ptr noundef nonnull %677) #12
  %678 = load ptr, ptr @img, align 8, !tbaa !6
  %679 = getelementptr inbounds i8, ptr %678, i64 24
  %680 = load i32, ptr %679, align 8, !tbaa !22
  %681 = icmp eq i32 %680, 2
  %682 = getelementptr inbounds i8, ptr %5, i64 976
  %683 = getelementptr inbounds i8, ptr %678, i64 90344
  %684 = load i32, ptr %683, align 8, !tbaa !28
  %685 = sext i32 %684 to i64
  %686 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %685, i64 1, i64 0
  %687 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %685, i64 1, i64 0
  %688 = select i1 %681, ptr %686, ptr %687
  tail call void @biari_init_context(ptr noundef nonnull %682, ptr noundef nonnull %688) #12
  %689 = load ptr, ptr @img, align 8, !tbaa !6
  %690 = getelementptr inbounds i8, ptr %689, i64 24
  %691 = load i32, ptr %690, align 8, !tbaa !22
  %692 = icmp eq i32 %691, 2
  %693 = getelementptr inbounds i8, ptr %5, i64 992
  %694 = getelementptr inbounds i8, ptr %689, i64 90344
  %695 = load i32, ptr %694, align 8, !tbaa !28
  %696 = sext i32 %695 to i64
  %697 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %696, i64 1, i64 1
  %698 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %696, i64 1, i64 1
  %699 = select i1 %692, ptr %697, ptr %698
  tail call void @biari_init_context(ptr noundef nonnull %693, ptr noundef nonnull %699) #12
  %700 = load ptr, ptr @img, align 8, !tbaa !6
  %701 = getelementptr inbounds i8, ptr %700, i64 24
  %702 = load i32, ptr %701, align 8, !tbaa !22
  %703 = icmp eq i32 %702, 2
  %704 = getelementptr inbounds i8, ptr %5, i64 1008
  %705 = getelementptr inbounds i8, ptr %700, i64 90344
  %706 = load i32, ptr %705, align 8, !tbaa !28
  %707 = sext i32 %706 to i64
  %708 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %707, i64 1, i64 2
  %709 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %707, i64 1, i64 2
  %710 = select i1 %703, ptr %708, ptr %709
  tail call void @biari_init_context(ptr noundef nonnull %704, ptr noundef nonnull %710) #12
  %711 = load ptr, ptr @img, align 8, !tbaa !6
  %712 = getelementptr inbounds i8, ptr %711, i64 24
  %713 = load i32, ptr %712, align 8, !tbaa !22
  %714 = icmp eq i32 %713, 2
  %715 = getelementptr inbounds i8, ptr %5, i64 1024
  %716 = getelementptr inbounds i8, ptr %711, i64 90344
  %717 = load i32, ptr %716, align 8, !tbaa !28
  %718 = sext i32 %717 to i64
  %719 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %718, i64 1, i64 3
  %720 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %718, i64 1, i64 3
  %721 = select i1 %714, ptr %719, ptr %720
  tail call void @biari_init_context(ptr noundef nonnull %715, ptr noundef nonnull %721) #12
  %722 = load ptr, ptr @img, align 8, !tbaa !6
  %723 = getelementptr inbounds i8, ptr %722, i64 24
  %724 = load i32, ptr %723, align 8, !tbaa !22
  %725 = icmp eq i32 %724, 2
  %726 = getelementptr inbounds i8, ptr %5, i64 1040
  %727 = getelementptr inbounds i8, ptr %722, i64 90344
  %728 = load i32, ptr %727, align 8, !tbaa !28
  %729 = sext i32 %728 to i64
  %730 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %729, i64 1, i64 4
  %731 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %729, i64 1, i64 4
  %732 = select i1 %725, ptr %730, ptr %731
  tail call void @biari_init_context(ptr noundef nonnull %726, ptr noundef nonnull %732) #12
  %733 = load ptr, ptr @img, align 8, !tbaa !6
  %734 = getelementptr inbounds i8, ptr %733, i64 24
  %735 = load i32, ptr %734, align 8, !tbaa !22
  %736 = icmp eq i32 %735, 2
  %737 = getelementptr inbounds i8, ptr %5, i64 1056
  %738 = getelementptr inbounds i8, ptr %733, i64 90344
  %739 = load i32, ptr %738, align 8, !tbaa !28
  %740 = sext i32 %739 to i64
  %741 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %740, i64 1, i64 5
  %742 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %740, i64 1, i64 5
  %743 = select i1 %736, ptr %741, ptr %742
  tail call void @biari_init_context(ptr noundef nonnull %737, ptr noundef nonnull %743) #12
  %744 = load ptr, ptr @img, align 8, !tbaa !6
  %745 = getelementptr inbounds i8, ptr %744, i64 24
  %746 = load i32, ptr %745, align 8, !tbaa !22
  %747 = icmp eq i32 %746, 2
  %748 = getelementptr inbounds i8, ptr %5, i64 1072
  %749 = getelementptr inbounds i8, ptr %744, i64 90344
  %750 = load i32, ptr %749, align 8, !tbaa !28
  %751 = sext i32 %750 to i64
  %752 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %751, i64 1, i64 6
  %753 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %751, i64 1, i64 6
  %754 = select i1 %747, ptr %752, ptr %753
  tail call void @biari_init_context(ptr noundef nonnull %748, ptr noundef nonnull %754) #12
  %755 = load ptr, ptr @img, align 8, !tbaa !6
  %756 = getelementptr inbounds i8, ptr %755, i64 24
  %757 = load i32, ptr %756, align 8, !tbaa !22
  %758 = icmp eq i32 %757, 2
  %759 = getelementptr inbounds i8, ptr %5, i64 1088
  %760 = getelementptr inbounds i8, ptr %755, i64 90344
  %761 = load i32, ptr %760, align 8, !tbaa !28
  %762 = sext i32 %761 to i64
  %763 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %762, i64 1, i64 7
  %764 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %762, i64 1, i64 7
  %765 = select i1 %758, ptr %763, ptr %764
  tail call void @biari_init_context(ptr noundef nonnull %759, ptr noundef nonnull %765) #12
  %766 = load ptr, ptr @img, align 8, !tbaa !6
  %767 = getelementptr inbounds i8, ptr %766, i64 24
  %768 = load i32, ptr %767, align 8, !tbaa !22
  %769 = icmp eq i32 %768, 2
  %770 = getelementptr inbounds i8, ptr %5, i64 1104
  %771 = getelementptr inbounds i8, ptr %766, i64 90344
  %772 = load i32, ptr %771, align 8, !tbaa !28
  %773 = sext i32 %772 to i64
  %774 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %773, i64 1, i64 8
  %775 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %773, i64 1, i64 8
  %776 = select i1 %769, ptr %774, ptr %775
  tail call void @biari_init_context(ptr noundef nonnull %770, ptr noundef nonnull %776) #12
  %777 = load ptr, ptr @img, align 8, !tbaa !6
  %778 = getelementptr inbounds i8, ptr %777, i64 24
  %779 = load i32, ptr %778, align 8, !tbaa !22
  %780 = icmp eq i32 %779, 2
  %781 = getelementptr inbounds i8, ptr %5, i64 1120
  %782 = getelementptr inbounds i8, ptr %777, i64 90344
  %783 = load i32, ptr %782, align 8, !tbaa !28
  %784 = sext i32 %783 to i64
  %785 = getelementptr inbounds [1 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_I, i64 0, i64 %784, i64 1, i64 9
  %786 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %784, i64 1, i64 9
  %787 = select i1 %780, ptr %785, ptr %786
  tail call void @biari_init_context(ptr noundef nonnull %781, ptr noundef nonnull %787) #12
  %788 = getelementptr inbounds i8, ptr %5, i64 1136
  %789 = load ptr, ptr @img, align 8, !tbaa !6
  %790 = getelementptr inbounds i8, ptr %789, i64 24
  %791 = load i32, ptr %790, align 8, !tbaa !22
  %792 = icmp eq i32 %791, 2
  %793 = getelementptr inbounds i8, ptr %789, i64 90344
  %794 = load i32, ptr %793, align 8, !tbaa !28
  %795 = sext i32 %794 to i64
  %796 = getelementptr inbounds [1 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_I, i64 0, i64 %795, i64 0, i64 0
  %797 = getelementptr inbounds [3 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_P, i64 0, i64 %795, i64 0, i64 0
  %798 = select i1 %792, ptr %796, ptr %797
  tail call void @biari_init_context(ptr noundef nonnull %788, ptr noundef nonnull %798) #12
  %799 = load ptr, ptr @img, align 8, !tbaa !6
  %800 = getelementptr inbounds i8, ptr %799, i64 24
  %801 = load i32, ptr %800, align 8, !tbaa !22
  %802 = icmp eq i32 %801, 2
  %803 = getelementptr inbounds i8, ptr %5, i64 1152
  %804 = getelementptr inbounds i8, ptr %799, i64 90344
  %805 = load i32, ptr %804, align 8, !tbaa !28
  %806 = sext i32 %805 to i64
  %807 = getelementptr inbounds [1 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_I, i64 0, i64 %806, i64 0, i64 1
  %808 = getelementptr inbounds [3 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_P, i64 0, i64 %806, i64 0, i64 1
  %809 = select i1 %802, ptr %807, ptr %808
  tail call void @biari_init_context(ptr noundef nonnull %803, ptr noundef nonnull %809) #12
  %810 = load ptr, ptr @img, align 8, !tbaa !6
  %811 = getelementptr inbounds i8, ptr %810, i64 24
  %812 = load i32, ptr %811, align 8, !tbaa !22
  %813 = icmp eq i32 %812, 2
  %814 = getelementptr inbounds i8, ptr %5, i64 1168
  %815 = getelementptr inbounds i8, ptr %810, i64 90344
  %816 = load i32, ptr %815, align 8, !tbaa !28
  %817 = sext i32 %816 to i64
  %818 = getelementptr inbounds [1 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_I, i64 0, i64 %817, i64 0, i64 2
  %819 = getelementptr inbounds [3 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_P, i64 0, i64 %817, i64 0, i64 2
  %820 = select i1 %813, ptr %818, ptr %819
  tail call void @biari_init_context(ptr noundef nonnull %814, ptr noundef nonnull %820) #12
  %821 = load ptr, ptr @img, align 8, !tbaa !6
  %822 = getelementptr inbounds i8, ptr %821, i64 24
  %823 = load i32, ptr %822, align 8, !tbaa !22
  %824 = icmp eq i32 %823, 2
  %825 = getelementptr inbounds i8, ptr %5, i64 1184
  %826 = getelementptr inbounds i8, ptr %821, i64 90344
  %827 = load i32, ptr %826, align 8, !tbaa !28
  %828 = sext i32 %827 to i64
  %829 = getelementptr inbounds [1 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_I, i64 0, i64 %828, i64 0, i64 3
  %830 = getelementptr inbounds [3 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_P, i64 0, i64 %828, i64 0, i64 3
  %831 = select i1 %824, ptr %829, ptr %830
  tail call void @biari_init_context(ptr noundef nonnull %825, ptr noundef nonnull %831) #12
  %832 = load ptr, ptr @img, align 8, !tbaa !6
  %833 = getelementptr inbounds i8, ptr %832, i64 24
  %834 = load i32, ptr %833, align 8, !tbaa !22
  %835 = icmp eq i32 %834, 2
  %836 = getelementptr inbounds i8, ptr %5, i64 1200
  %837 = getelementptr inbounds i8, ptr %832, i64 90344
  %838 = load i32, ptr %837, align 8, !tbaa !28
  %839 = sext i32 %838 to i64
  %840 = getelementptr inbounds [1 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_I, i64 0, i64 %839, i64 0, i64 4
  %841 = getelementptr inbounds [3 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_P, i64 0, i64 %839, i64 0, i64 4
  %842 = select i1 %835, ptr %840, ptr %841
  tail call void @biari_init_context(ptr noundef nonnull %836, ptr noundef nonnull %842) #12
  %843 = load ptr, ptr @img, align 8, !tbaa !6
  %844 = getelementptr inbounds i8, ptr %843, i64 24
  %845 = load i32, ptr %844, align 8, !tbaa !22
  %846 = icmp eq i32 %845, 2
  %847 = getelementptr inbounds i8, ptr %5, i64 1216
  %848 = getelementptr inbounds i8, ptr %843, i64 90344
  %849 = load i32, ptr %848, align 8, !tbaa !28
  %850 = sext i32 %849 to i64
  %851 = getelementptr inbounds [1 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_I, i64 0, i64 %850, i64 0, i64 5
  %852 = getelementptr inbounds [3 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_P, i64 0, i64 %850, i64 0, i64 5
  %853 = select i1 %846, ptr %851, ptr %852
  tail call void @biari_init_context(ptr noundef nonnull %847, ptr noundef nonnull %853) #12
  %854 = load ptr, ptr @img, align 8, !tbaa !6
  %855 = getelementptr inbounds i8, ptr %854, i64 24
  %856 = load i32, ptr %855, align 8, !tbaa !22
  %857 = icmp eq i32 %856, 2
  %858 = getelementptr inbounds i8, ptr %5, i64 1232
  %859 = getelementptr inbounds i8, ptr %854, i64 90344
  %860 = load i32, ptr %859, align 8, !tbaa !28
  %861 = sext i32 %860 to i64
  %862 = getelementptr inbounds [1 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_I, i64 0, i64 %861, i64 1, i64 0
  %863 = getelementptr inbounds [3 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_P, i64 0, i64 %861, i64 1, i64 0
  %864 = select i1 %857, ptr %862, ptr %863
  tail call void @biari_init_context(ptr noundef nonnull %858, ptr noundef nonnull %864) #12
  %865 = load ptr, ptr @img, align 8, !tbaa !6
  %866 = getelementptr inbounds i8, ptr %865, i64 24
  %867 = load i32, ptr %866, align 8, !tbaa !22
  %868 = icmp eq i32 %867, 2
  %869 = getelementptr inbounds i8, ptr %5, i64 1248
  %870 = getelementptr inbounds i8, ptr %865, i64 90344
  %871 = load i32, ptr %870, align 8, !tbaa !28
  %872 = sext i32 %871 to i64
  %873 = getelementptr inbounds [1 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_I, i64 0, i64 %872, i64 1, i64 1
  %874 = getelementptr inbounds [3 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_P, i64 0, i64 %872, i64 1, i64 1
  %875 = select i1 %868, ptr %873, ptr %874
  tail call void @biari_init_context(ptr noundef nonnull %869, ptr noundef nonnull %875) #12
  %876 = load ptr, ptr @img, align 8, !tbaa !6
  %877 = getelementptr inbounds i8, ptr %876, i64 24
  %878 = load i32, ptr %877, align 8, !tbaa !22
  %879 = icmp eq i32 %878, 2
  %880 = getelementptr inbounds i8, ptr %5, i64 1264
  %881 = getelementptr inbounds i8, ptr %876, i64 90344
  %882 = load i32, ptr %881, align 8, !tbaa !28
  %883 = sext i32 %882 to i64
  %884 = getelementptr inbounds [1 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_I, i64 0, i64 %883, i64 1, i64 2
  %885 = getelementptr inbounds [3 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_P, i64 0, i64 %883, i64 1, i64 2
  %886 = select i1 %879, ptr %884, ptr %885
  tail call void @biari_init_context(ptr noundef nonnull %880, ptr noundef nonnull %886) #12
  %887 = load ptr, ptr @img, align 8, !tbaa !6
  %888 = getelementptr inbounds i8, ptr %887, i64 24
  %889 = load i32, ptr %888, align 8, !tbaa !22
  %890 = icmp eq i32 %889, 2
  %891 = getelementptr inbounds i8, ptr %5, i64 1280
  %892 = getelementptr inbounds i8, ptr %887, i64 90344
  %893 = load i32, ptr %892, align 8, !tbaa !28
  %894 = sext i32 %893 to i64
  %895 = getelementptr inbounds [1 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_I, i64 0, i64 %894, i64 1, i64 3
  %896 = getelementptr inbounds [3 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_P, i64 0, i64 %894, i64 1, i64 3
  %897 = select i1 %890, ptr %895, ptr %896
  tail call void @biari_init_context(ptr noundef nonnull %891, ptr noundef nonnull %897) #12
  %898 = load ptr, ptr @img, align 8, !tbaa !6
  %899 = getelementptr inbounds i8, ptr %898, i64 24
  %900 = load i32, ptr %899, align 8, !tbaa !22
  %901 = icmp eq i32 %900, 2
  %902 = getelementptr inbounds i8, ptr %5, i64 1296
  %903 = getelementptr inbounds i8, ptr %898, i64 90344
  %904 = load i32, ptr %903, align 8, !tbaa !28
  %905 = sext i32 %904 to i64
  %906 = getelementptr inbounds [1 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_I, i64 0, i64 %905, i64 1, i64 4
  %907 = getelementptr inbounds [3 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_P, i64 0, i64 %905, i64 1, i64 4
  %908 = select i1 %901, ptr %906, ptr %907
  tail call void @biari_init_context(ptr noundef nonnull %902, ptr noundef nonnull %908) #12
  %909 = load ptr, ptr @img, align 8, !tbaa !6
  %910 = getelementptr inbounds i8, ptr %909, i64 24
  %911 = load i32, ptr %910, align 8, !tbaa !22
  %912 = icmp eq i32 %911, 2
  %913 = getelementptr inbounds i8, ptr %5, i64 1312
  %914 = getelementptr inbounds i8, ptr %909, i64 90344
  %915 = load i32, ptr %914, align 8, !tbaa !28
  %916 = sext i32 %915 to i64
  %917 = getelementptr inbounds [1 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_I, i64 0, i64 %916, i64 1, i64 5
  %918 = getelementptr inbounds [3 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_P, i64 0, i64 %916, i64 1, i64 5
  %919 = select i1 %912, ptr %917, ptr %918
  tail call void @biari_init_context(ptr noundef nonnull %913, ptr noundef nonnull %919) #12
  %920 = getelementptr inbounds i8, ptr %5, i64 1328
  %921 = load ptr, ptr @img, align 8, !tbaa !6
  %922 = getelementptr inbounds i8, ptr %921, i64 24
  %923 = load i32, ptr %922, align 8, !tbaa !22
  %924 = icmp eq i32 %923, 2
  %925 = getelementptr inbounds i8, ptr %921, i64 90344
  %926 = load i32, ptr %925, align 8, !tbaa !28
  %927 = sext i32 %926 to i64
  %928 = getelementptr inbounds [1 x [1 x [4 x [2 x i32]]]], ptr @INIT_DELTA_QP_I, i64 0, i64 %927
  %929 = getelementptr inbounds [3 x [1 x [4 x [2 x i32]]]], ptr @INIT_DELTA_QP_P, i64 0, i64 %927
  %930 = select i1 %924, ptr %928, ptr %929
  tail call void @biari_init_context(ptr noundef nonnull %920, ptr noundef nonnull %930) #12
  %931 = load ptr, ptr @img, align 8, !tbaa !6
  %932 = getelementptr inbounds i8, ptr %931, i64 24
  %933 = load i32, ptr %932, align 8, !tbaa !22
  %934 = icmp eq i32 %933, 2
  %935 = getelementptr inbounds i8, ptr %5, i64 1344
  %936 = getelementptr inbounds i8, ptr %931, i64 90344
  %937 = load i32, ptr %936, align 8, !tbaa !28
  %938 = sext i32 %937 to i64
  %939 = getelementptr inbounds [1 x [1 x [4 x [2 x i32]]]], ptr @INIT_DELTA_QP_I, i64 0, i64 %938, i64 0, i64 1
  %940 = getelementptr inbounds [3 x [1 x [4 x [2 x i32]]]], ptr @INIT_DELTA_QP_P, i64 0, i64 %938, i64 0, i64 1
  %941 = select i1 %934, ptr %939, ptr %940
  tail call void @biari_init_context(ptr noundef nonnull %935, ptr noundef nonnull %941) #12
  %942 = load ptr, ptr @img, align 8, !tbaa !6
  %943 = getelementptr inbounds i8, ptr %942, i64 24
  %944 = load i32, ptr %943, align 8, !tbaa !22
  %945 = icmp eq i32 %944, 2
  %946 = getelementptr inbounds i8, ptr %5, i64 1360
  %947 = getelementptr inbounds i8, ptr %942, i64 90344
  %948 = load i32, ptr %947, align 8, !tbaa !28
  %949 = sext i32 %948 to i64
  %950 = getelementptr inbounds [1 x [1 x [4 x [2 x i32]]]], ptr @INIT_DELTA_QP_I, i64 0, i64 %949, i64 0, i64 2
  %951 = getelementptr inbounds [3 x [1 x [4 x [2 x i32]]]], ptr @INIT_DELTA_QP_P, i64 0, i64 %949, i64 0, i64 2
  %952 = select i1 %945, ptr %950, ptr %951
  tail call void @biari_init_context(ptr noundef nonnull %946, ptr noundef nonnull %952) #12
  %953 = load ptr, ptr @img, align 8, !tbaa !6
  %954 = getelementptr inbounds i8, ptr %953, i64 24
  %955 = load i32, ptr %954, align 8, !tbaa !22
  %956 = icmp eq i32 %955, 2
  %957 = getelementptr inbounds i8, ptr %5, i64 1376
  %958 = getelementptr inbounds i8, ptr %953, i64 90344
  %959 = load i32, ptr %958, align 8, !tbaa !28
  %960 = sext i32 %959 to i64
  %961 = getelementptr inbounds [1 x [1 x [4 x [2 x i32]]]], ptr @INIT_DELTA_QP_I, i64 0, i64 %960, i64 0, i64 3
  %962 = getelementptr inbounds [3 x [1 x [4 x [2 x i32]]]], ptr @INIT_DELTA_QP_P, i64 0, i64 %960, i64 0, i64 3
  %963 = select i1 %956, ptr %961, ptr %962
  tail call void @biari_init_context(ptr noundef nonnull %957, ptr noundef nonnull %963) #12
  %964 = getelementptr inbounds i8, ptr %5, i64 1392
  %965 = load ptr, ptr @img, align 8, !tbaa !6
  %966 = getelementptr inbounds i8, ptr %965, i64 24
  %967 = load i32, ptr %966, align 8, !tbaa !22
  %968 = icmp eq i32 %967, 2
  %969 = getelementptr inbounds i8, ptr %965, i64 90344
  %970 = load i32, ptr %969, align 8, !tbaa !28
  %971 = sext i32 %970 to i64
  %972 = getelementptr inbounds [1 x [1 x [4 x [2 x i32]]]], ptr @INIT_MB_AFF_I, i64 0, i64 %971
  %973 = getelementptr inbounds [3 x [1 x [4 x [2 x i32]]]], ptr @INIT_MB_AFF_P, i64 0, i64 %971
  %974 = select i1 %968, ptr %972, ptr %973
  tail call void @biari_init_context(ptr noundef nonnull %964, ptr noundef nonnull %974) #12
  %975 = load ptr, ptr @img, align 8, !tbaa !6
  %976 = getelementptr inbounds i8, ptr %975, i64 24
  %977 = load i32, ptr %976, align 8, !tbaa !22
  %978 = icmp eq i32 %977, 2
  %979 = getelementptr inbounds i8, ptr %5, i64 1408
  %980 = getelementptr inbounds i8, ptr %975, i64 90344
  %981 = load i32, ptr %980, align 8, !tbaa !28
  %982 = sext i32 %981 to i64
  %983 = getelementptr inbounds [1 x [1 x [4 x [2 x i32]]]], ptr @INIT_MB_AFF_I, i64 0, i64 %982, i64 0, i64 1
  %984 = getelementptr inbounds [3 x [1 x [4 x [2 x i32]]]], ptr @INIT_MB_AFF_P, i64 0, i64 %982, i64 0, i64 1
  %985 = select i1 %978, ptr %983, ptr %984
  tail call void @biari_init_context(ptr noundef nonnull %979, ptr noundef nonnull %985) #12
  %986 = load ptr, ptr @img, align 8, !tbaa !6
  %987 = getelementptr inbounds i8, ptr %986, i64 24
  %988 = load i32, ptr %987, align 8, !tbaa !22
  %989 = icmp eq i32 %988, 2
  %990 = getelementptr inbounds i8, ptr %5, i64 1424
  %991 = getelementptr inbounds i8, ptr %986, i64 90344
  %992 = load i32, ptr %991, align 8, !tbaa !28
  %993 = sext i32 %992 to i64
  %994 = getelementptr inbounds [1 x [1 x [4 x [2 x i32]]]], ptr @INIT_MB_AFF_I, i64 0, i64 %993, i64 0, i64 2
  %995 = getelementptr inbounds [3 x [1 x [4 x [2 x i32]]]], ptr @INIT_MB_AFF_P, i64 0, i64 %993, i64 0, i64 2
  %996 = select i1 %989, ptr %994, ptr %995
  tail call void @biari_init_context(ptr noundef nonnull %990, ptr noundef nonnull %996) #12
  %997 = load ptr, ptr @img, align 8, !tbaa !6
  %998 = getelementptr inbounds i8, ptr %997, i64 24
  %999 = load i32, ptr %998, align 8, !tbaa !22
  %1000 = icmp eq i32 %999, 2
  %1001 = getelementptr inbounds i8, ptr %5, i64 1440
  %1002 = getelementptr inbounds i8, ptr %997, i64 90344
  %1003 = load i32, ptr %1002, align 8, !tbaa !28
  %1004 = sext i32 %1003 to i64
  %1005 = getelementptr inbounds [1 x [1 x [4 x [2 x i32]]]], ptr @INIT_MB_AFF_I, i64 0, i64 %1004, i64 0, i64 3
  %1006 = getelementptr inbounds [3 x [1 x [4 x [2 x i32]]]], ptr @INIT_MB_AFF_P, i64 0, i64 %1004, i64 0, i64 3
  %1007 = select i1 %1000, ptr %1005, ptr %1006
  tail call void @biari_init_context(ptr noundef nonnull %1001, ptr noundef nonnull %1007) #12
  %1008 = getelementptr inbounds i8, ptr %5, i64 1456
  %1009 = load ptr, ptr @img, align 8, !tbaa !6
  %1010 = getelementptr inbounds i8, ptr %1009, i64 24
  %1011 = load i32, ptr %1010, align 8, !tbaa !22
  %1012 = icmp eq i32 %1011, 2
  %1013 = getelementptr inbounds i8, ptr %1009, i64 90344
  %1014 = load i32, ptr %1013, align 8, !tbaa !28
  %1015 = sext i32 %1014 to i64
  %1016 = getelementptr inbounds [1 x [1 x [3 x [2 x i32]]]], ptr @INIT_TRANSFORM_SIZE_I, i64 0, i64 %1015
  %1017 = getelementptr inbounds [3 x [1 x [3 x [2 x i32]]]], ptr @INIT_TRANSFORM_SIZE_P, i64 0, i64 %1015
  %1018 = select i1 %1012, ptr %1016, ptr %1017
  tail call void @biari_init_context(ptr noundef nonnull %1008, ptr noundef nonnull %1018) #12
  %1019 = load ptr, ptr @img, align 8, !tbaa !6
  %1020 = getelementptr inbounds i8, ptr %1019, i64 24
  %1021 = load i32, ptr %1020, align 8, !tbaa !22
  %1022 = icmp eq i32 %1021, 2
  %1023 = getelementptr inbounds i8, ptr %5, i64 1472
  %1024 = getelementptr inbounds i8, ptr %1019, i64 90344
  %1025 = load i32, ptr %1024, align 8, !tbaa !28
  %1026 = sext i32 %1025 to i64
  %1027 = getelementptr inbounds [1 x [1 x [3 x [2 x i32]]]], ptr @INIT_TRANSFORM_SIZE_I, i64 0, i64 %1026, i64 0, i64 1
  %1028 = getelementptr inbounds [3 x [1 x [3 x [2 x i32]]]], ptr @INIT_TRANSFORM_SIZE_P, i64 0, i64 %1026, i64 0, i64 1
  %1029 = select i1 %1022, ptr %1027, ptr %1028
  tail call void @biari_init_context(ptr noundef nonnull %1023, ptr noundef nonnull %1029) #12
  %1030 = load ptr, ptr @img, align 8, !tbaa !6
  %1031 = getelementptr inbounds i8, ptr %1030, i64 24
  %1032 = load i32, ptr %1031, align 8, !tbaa !22
  %1033 = icmp eq i32 %1032, 2
  %1034 = getelementptr inbounds i8, ptr %5, i64 1488
  %1035 = getelementptr inbounds i8, ptr %1030, i64 90344
  %1036 = load i32, ptr %1035, align 8, !tbaa !28
  %1037 = sext i32 %1036 to i64
  %1038 = getelementptr inbounds [1 x [1 x [3 x [2 x i32]]]], ptr @INIT_TRANSFORM_SIZE_I, i64 0, i64 %1037, i64 0, i64 2
  %1039 = getelementptr inbounds [3 x [1 x [3 x [2 x i32]]]], ptr @INIT_TRANSFORM_SIZE_P, i64 0, i64 %1037, i64 0, i64 2
  %1040 = select i1 %1033, ptr %1038, ptr %1039
  tail call void @biari_init_context(ptr noundef nonnull %1034, ptr noundef nonnull %1040) #12
  %1041 = load ptr, ptr @img, align 8, !tbaa !6
  %1042 = getelementptr inbounds i8, ptr %1041, i64 24
  %1043 = load i32, ptr %1042, align 8, !tbaa !22
  %1044 = icmp eq i32 %1043, 2
  %1045 = getelementptr inbounds i8, ptr %1041, i64 90344
  %1046 = load i32, ptr %1045, align 8, !tbaa !28
  %1047 = sext i32 %1046 to i64
  %1048 = getelementptr inbounds [1 x [1 x [2 x [2 x i32]]]], ptr @INIT_IPR_I, i64 0, i64 %1047
  %1049 = getelementptr inbounds [3 x [1 x [2 x [2 x i32]]]], ptr @INIT_IPR_P, i64 0, i64 %1047
  %1050 = select i1 %1044, ptr %1048, ptr %1049
  tail call void @biari_init_context(ptr noundef %7, ptr noundef nonnull %1050) #12
  %1051 = load ptr, ptr @img, align 8, !tbaa !6
  %1052 = getelementptr inbounds i8, ptr %1051, i64 24
  %1053 = load i32, ptr %1052, align 8, !tbaa !22
  %1054 = icmp eq i32 %1053, 2
  %1055 = getelementptr inbounds i8, ptr %7, i64 16
  %1056 = getelementptr inbounds i8, ptr %1051, i64 90344
  %1057 = load i32, ptr %1056, align 8, !tbaa !28
  %1058 = sext i32 %1057 to i64
  %1059 = getelementptr inbounds [1 x [1 x [2 x [2 x i32]]]], ptr @INIT_IPR_I, i64 0, i64 %1058, i64 0, i64 1
  %1060 = getelementptr inbounds [3 x [1 x [2 x [2 x i32]]]], ptr @INIT_IPR_P, i64 0, i64 %1058, i64 0, i64 1
  %1061 = select i1 %1054, ptr %1059, ptr %1060
  tail call void @biari_init_context(ptr noundef nonnull %1055, ptr noundef nonnull %1061) #12
  %1062 = getelementptr inbounds i8, ptr %7, i64 32
  %1063 = load ptr, ptr @img, align 8, !tbaa !6
  %1064 = getelementptr inbounds i8, ptr %1063, i64 24
  %1065 = load i32, ptr %1064, align 8, !tbaa !22
  %1066 = icmp eq i32 %1065, 2
  %1067 = getelementptr inbounds i8, ptr %1063, i64 90344
  %1068 = load i32, ptr %1067, align 8, !tbaa !28
  %1069 = sext i32 %1068 to i64
  %1070 = getelementptr inbounds [1 x [1 x [4 x [2 x i32]]]], ptr @INIT_CIPR_I, i64 0, i64 %1069
  %1071 = getelementptr inbounds [3 x [1 x [4 x [2 x i32]]]], ptr @INIT_CIPR_P, i64 0, i64 %1069
  %1072 = select i1 %1066, ptr %1070, ptr %1071
  tail call void @biari_init_context(ptr noundef nonnull %1062, ptr noundef nonnull %1072) #12
  %1073 = load ptr, ptr @img, align 8, !tbaa !6
  %1074 = getelementptr inbounds i8, ptr %1073, i64 24
  %1075 = load i32, ptr %1074, align 8, !tbaa !22
  %1076 = icmp eq i32 %1075, 2
  %1077 = getelementptr inbounds i8, ptr %7, i64 48
  %1078 = getelementptr inbounds i8, ptr %1073, i64 90344
  %1079 = load i32, ptr %1078, align 8, !tbaa !28
  %1080 = sext i32 %1079 to i64
  %1081 = getelementptr inbounds [1 x [1 x [4 x [2 x i32]]]], ptr @INIT_CIPR_I, i64 0, i64 %1080, i64 0, i64 1
  %1082 = getelementptr inbounds [3 x [1 x [4 x [2 x i32]]]], ptr @INIT_CIPR_P, i64 0, i64 %1080, i64 0, i64 1
  %1083 = select i1 %1076, ptr %1081, ptr %1082
  tail call void @biari_init_context(ptr noundef nonnull %1077, ptr noundef nonnull %1083) #12
  %1084 = load ptr, ptr @img, align 8, !tbaa !6
  %1085 = getelementptr inbounds i8, ptr %1084, i64 24
  %1086 = load i32, ptr %1085, align 8, !tbaa !22
  %1087 = icmp eq i32 %1086, 2
  %1088 = getelementptr inbounds i8, ptr %7, i64 64
  %1089 = getelementptr inbounds i8, ptr %1084, i64 90344
  %1090 = load i32, ptr %1089, align 8, !tbaa !28
  %1091 = sext i32 %1090 to i64
  %1092 = getelementptr inbounds [1 x [1 x [4 x [2 x i32]]]], ptr @INIT_CIPR_I, i64 0, i64 %1091, i64 0, i64 2
  %1093 = getelementptr inbounds [3 x [1 x [4 x [2 x i32]]]], ptr @INIT_CIPR_P, i64 0, i64 %1091, i64 0, i64 2
  %1094 = select i1 %1087, ptr %1092, ptr %1093
  tail call void @biari_init_context(ptr noundef nonnull %1088, ptr noundef nonnull %1094) #12
  %1095 = load ptr, ptr @img, align 8, !tbaa !6
  %1096 = getelementptr inbounds i8, ptr %1095, i64 24
  %1097 = load i32, ptr %1096, align 8, !tbaa !22
  %1098 = icmp eq i32 %1097, 2
  %1099 = getelementptr inbounds i8, ptr %7, i64 80
  %1100 = getelementptr inbounds i8, ptr %1095, i64 90344
  %1101 = load i32, ptr %1100, align 8, !tbaa !28
  %1102 = sext i32 %1101 to i64
  %1103 = getelementptr inbounds [1 x [1 x [4 x [2 x i32]]]], ptr @INIT_CIPR_I, i64 0, i64 %1102, i64 0, i64 3
  %1104 = getelementptr inbounds [3 x [1 x [4 x [2 x i32]]]], ptr @INIT_CIPR_P, i64 0, i64 %1102, i64 0, i64 3
  %1105 = select i1 %1098, ptr %1103, ptr %1104
  tail call void @biari_init_context(ptr noundef nonnull %1099, ptr noundef nonnull %1105) #12
  %1106 = getelementptr inbounds i8, ptr %7, i64 96
  %1107 = load ptr, ptr @img, align 8, !tbaa !6
  %1108 = getelementptr inbounds i8, ptr %1107, i64 24
  %1109 = load i32, ptr %1108, align 8, !tbaa !22
  %1110 = icmp eq i32 %1109, 2
  %1111 = getelementptr inbounds i8, ptr %1107, i64 90344
  %1112 = load i32, ptr %1111, align 8, !tbaa !28
  %1113 = sext i32 %1112 to i64
  %1114 = getelementptr inbounds [1 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_I, i64 0, i64 %1113, i64 0, i64 0
  %1115 = getelementptr inbounds [3 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_P, i64 0, i64 %1113, i64 0, i64 0
  %1116 = select i1 %1110, ptr %1114, ptr %1115
  tail call void @biari_init_context(ptr noundef nonnull %1106, ptr noundef nonnull %1116) #12
  %1117 = load ptr, ptr @img, align 8, !tbaa !6
  %1118 = getelementptr inbounds i8, ptr %1117, i64 24
  %1119 = load i32, ptr %1118, align 8, !tbaa !22
  %1120 = icmp eq i32 %1119, 2
  %1121 = getelementptr inbounds i8, ptr %7, i64 112
  %1122 = getelementptr inbounds i8, ptr %1117, i64 90344
  %1123 = load i32, ptr %1122, align 8, !tbaa !28
  %1124 = sext i32 %1123 to i64
  %1125 = getelementptr inbounds [1 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_I, i64 0, i64 %1124, i64 0, i64 1
  %1126 = getelementptr inbounds [3 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_P, i64 0, i64 %1124, i64 0, i64 1
  %1127 = select i1 %1120, ptr %1125, ptr %1126
  tail call void @biari_init_context(ptr noundef nonnull %1121, ptr noundef nonnull %1127) #12
  %1128 = load ptr, ptr @img, align 8, !tbaa !6
  %1129 = getelementptr inbounds i8, ptr %1128, i64 24
  %1130 = load i32, ptr %1129, align 8, !tbaa !22
  %1131 = icmp eq i32 %1130, 2
  %1132 = getelementptr inbounds i8, ptr %7, i64 128
  %1133 = getelementptr inbounds i8, ptr %1128, i64 90344
  %1134 = load i32, ptr %1133, align 8, !tbaa !28
  %1135 = sext i32 %1134 to i64
  %1136 = getelementptr inbounds [1 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_I, i64 0, i64 %1135, i64 0, i64 2
  %1137 = getelementptr inbounds [3 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_P, i64 0, i64 %1135, i64 0, i64 2
  %1138 = select i1 %1131, ptr %1136, ptr %1137
  tail call void @biari_init_context(ptr noundef nonnull %1132, ptr noundef nonnull %1138) #12
  %1139 = load ptr, ptr @img, align 8, !tbaa !6
  %1140 = getelementptr inbounds i8, ptr %1139, i64 24
  %1141 = load i32, ptr %1140, align 8, !tbaa !22
  %1142 = icmp eq i32 %1141, 2
  %1143 = getelementptr inbounds i8, ptr %7, i64 144
  %1144 = getelementptr inbounds i8, ptr %1139, i64 90344
  %1145 = load i32, ptr %1144, align 8, !tbaa !28
  %1146 = sext i32 %1145 to i64
  %1147 = getelementptr inbounds [1 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_I, i64 0, i64 %1146, i64 0, i64 3
  %1148 = getelementptr inbounds [3 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_P, i64 0, i64 %1146, i64 0, i64 3
  %1149 = select i1 %1142, ptr %1147, ptr %1148
  tail call void @biari_init_context(ptr noundef nonnull %1143, ptr noundef nonnull %1149) #12
  %1150 = load ptr, ptr @img, align 8, !tbaa !6
  %1151 = getelementptr inbounds i8, ptr %1150, i64 24
  %1152 = load i32, ptr %1151, align 8, !tbaa !22
  %1153 = icmp eq i32 %1152, 2
  %1154 = getelementptr inbounds i8, ptr %7, i64 160
  %1155 = getelementptr inbounds i8, ptr %1150, i64 90344
  %1156 = load i32, ptr %1155, align 8, !tbaa !28
  %1157 = sext i32 %1156 to i64
  %1158 = getelementptr inbounds [1 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_I, i64 0, i64 %1157, i64 1, i64 0
  %1159 = getelementptr inbounds [3 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_P, i64 0, i64 %1157, i64 1, i64 0
  %1160 = select i1 %1153, ptr %1158, ptr %1159
  tail call void @biari_init_context(ptr noundef nonnull %1154, ptr noundef nonnull %1160) #12
  %1161 = load ptr, ptr @img, align 8, !tbaa !6
  %1162 = getelementptr inbounds i8, ptr %1161, i64 24
  %1163 = load i32, ptr %1162, align 8, !tbaa !22
  %1164 = icmp eq i32 %1163, 2
  %1165 = getelementptr inbounds i8, ptr %7, i64 176
  %1166 = getelementptr inbounds i8, ptr %1161, i64 90344
  %1167 = load i32, ptr %1166, align 8, !tbaa !28
  %1168 = sext i32 %1167 to i64
  %1169 = getelementptr inbounds [1 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_I, i64 0, i64 %1168, i64 1, i64 1
  %1170 = getelementptr inbounds [3 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_P, i64 0, i64 %1168, i64 1, i64 1
  %1171 = select i1 %1164, ptr %1169, ptr %1170
  tail call void @biari_init_context(ptr noundef nonnull %1165, ptr noundef nonnull %1171) #12
  %1172 = load ptr, ptr @img, align 8, !tbaa !6
  %1173 = getelementptr inbounds i8, ptr %1172, i64 24
  %1174 = load i32, ptr %1173, align 8, !tbaa !22
  %1175 = icmp eq i32 %1174, 2
  %1176 = getelementptr inbounds i8, ptr %7, i64 192
  %1177 = getelementptr inbounds i8, ptr %1172, i64 90344
  %1178 = load i32, ptr %1177, align 8, !tbaa !28
  %1179 = sext i32 %1178 to i64
  %1180 = getelementptr inbounds [1 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_I, i64 0, i64 %1179, i64 1, i64 2
  %1181 = getelementptr inbounds [3 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_P, i64 0, i64 %1179, i64 1, i64 2
  %1182 = select i1 %1175, ptr %1180, ptr %1181
  tail call void @biari_init_context(ptr noundef nonnull %1176, ptr noundef nonnull %1182) #12
  %1183 = load ptr, ptr @img, align 8, !tbaa !6
  %1184 = getelementptr inbounds i8, ptr %1183, i64 24
  %1185 = load i32, ptr %1184, align 8, !tbaa !22
  %1186 = icmp eq i32 %1185, 2
  %1187 = getelementptr inbounds i8, ptr %7, i64 208
  %1188 = getelementptr inbounds i8, ptr %1183, i64 90344
  %1189 = load i32, ptr %1188, align 8, !tbaa !28
  %1190 = sext i32 %1189 to i64
  %1191 = getelementptr inbounds [1 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_I, i64 0, i64 %1190, i64 1, i64 3
  %1192 = getelementptr inbounds [3 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_P, i64 0, i64 %1190, i64 1, i64 3
  %1193 = select i1 %1186, ptr %1191, ptr %1192
  tail call void @biari_init_context(ptr noundef nonnull %1187, ptr noundef nonnull %1193) #12
  %1194 = load ptr, ptr @img, align 8, !tbaa !6
  %1195 = getelementptr inbounds i8, ptr %1194, i64 24
  %1196 = load i32, ptr %1195, align 8, !tbaa !22
  %1197 = icmp eq i32 %1196, 2
  %1198 = getelementptr inbounds i8, ptr %7, i64 224
  %1199 = getelementptr inbounds i8, ptr %1194, i64 90344
  %1200 = load i32, ptr %1199, align 8, !tbaa !28
  %1201 = sext i32 %1200 to i64
  %1202 = getelementptr inbounds [1 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_I, i64 0, i64 %1201, i64 2, i64 0
  %1203 = getelementptr inbounds [3 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_P, i64 0, i64 %1201, i64 2, i64 0
  %1204 = select i1 %1197, ptr %1202, ptr %1203
  tail call void @biari_init_context(ptr noundef nonnull %1198, ptr noundef nonnull %1204) #12
  %1205 = load ptr, ptr @img, align 8, !tbaa !6
  %1206 = getelementptr inbounds i8, ptr %1205, i64 24
  %1207 = load i32, ptr %1206, align 8, !tbaa !22
  %1208 = icmp eq i32 %1207, 2
  %1209 = getelementptr inbounds i8, ptr %7, i64 240
  %1210 = getelementptr inbounds i8, ptr %1205, i64 90344
  %1211 = load i32, ptr %1210, align 8, !tbaa !28
  %1212 = sext i32 %1211 to i64
  %1213 = getelementptr inbounds [1 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_I, i64 0, i64 %1212, i64 2, i64 1
  %1214 = getelementptr inbounds [3 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_P, i64 0, i64 %1212, i64 2, i64 1
  %1215 = select i1 %1208, ptr %1213, ptr %1214
  tail call void @biari_init_context(ptr noundef nonnull %1209, ptr noundef nonnull %1215) #12
  %1216 = load ptr, ptr @img, align 8, !tbaa !6
  %1217 = getelementptr inbounds i8, ptr %1216, i64 24
  %1218 = load i32, ptr %1217, align 8, !tbaa !22
  %1219 = icmp eq i32 %1218, 2
  %1220 = getelementptr inbounds i8, ptr %7, i64 256
  %1221 = getelementptr inbounds i8, ptr %1216, i64 90344
  %1222 = load i32, ptr %1221, align 8, !tbaa !28
  %1223 = sext i32 %1222 to i64
  %1224 = getelementptr inbounds [1 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_I, i64 0, i64 %1223, i64 2, i64 2
  %1225 = getelementptr inbounds [3 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_P, i64 0, i64 %1223, i64 2, i64 2
  %1226 = select i1 %1219, ptr %1224, ptr %1225
  tail call void @biari_init_context(ptr noundef nonnull %1220, ptr noundef nonnull %1226) #12
  %1227 = load ptr, ptr @img, align 8, !tbaa !6
  %1228 = getelementptr inbounds i8, ptr %1227, i64 24
  %1229 = load i32, ptr %1228, align 8, !tbaa !22
  %1230 = icmp eq i32 %1229, 2
  %1231 = getelementptr inbounds i8, ptr %7, i64 272
  %1232 = getelementptr inbounds i8, ptr %1227, i64 90344
  %1233 = load i32, ptr %1232, align 8, !tbaa !28
  %1234 = sext i32 %1233 to i64
  %1235 = getelementptr inbounds [1 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_I, i64 0, i64 %1234, i64 2, i64 3
  %1236 = getelementptr inbounds [3 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_P, i64 0, i64 %1234, i64 2, i64 3
  %1237 = select i1 %1230, ptr %1235, ptr %1236
  tail call void @biari_init_context(ptr noundef nonnull %1231, ptr noundef nonnull %1237) #12
  %1238 = getelementptr inbounds i8, ptr %7, i64 288
  br label %1239

1239:                                             ; preds = %0, %1239
  %1240 = phi i64 [ 0, %0 ], [ %1285, %1239 ]
  %1241 = load ptr, ptr @img, align 8, !tbaa !6
  %1242 = getelementptr inbounds i8, ptr %1241, i64 24
  %1243 = load i32, ptr %1242, align 8, !tbaa !22
  %1244 = icmp eq i32 %1243, 2
  %1245 = getelementptr inbounds [10 x [4 x %struct.BiContextType]], ptr %1238, i64 0, i64 %1240, i64 0
  %1246 = getelementptr inbounds i8, ptr %1241, i64 90344
  %1247 = load i32, ptr %1246, align 8, !tbaa !28
  %1248 = sext i32 %1247 to i64
  %1249 = getelementptr inbounds [1 x [8 x [4 x [2 x i32]]]], ptr @INIT_BCBP_I, i64 0, i64 %1248, i64 %1240, i64 0
  %1250 = getelementptr inbounds [3 x [8 x [4 x [2 x i32]]]], ptr @INIT_BCBP_P, i64 0, i64 %1248, i64 %1240, i64 0
  %1251 = select i1 %1244, ptr %1249, ptr %1250
  tail call void @biari_init_context(ptr noundef nonnull %1245, ptr noundef nonnull %1251) #12
  %1252 = load ptr, ptr @img, align 8, !tbaa !6
  %1253 = getelementptr inbounds i8, ptr %1252, i64 24
  %1254 = load i32, ptr %1253, align 8, !tbaa !22
  %1255 = icmp eq i32 %1254, 2
  %1256 = getelementptr inbounds [10 x [4 x %struct.BiContextType]], ptr %1238, i64 0, i64 %1240, i64 1
  %1257 = getelementptr inbounds i8, ptr %1252, i64 90344
  %1258 = load i32, ptr %1257, align 8, !tbaa !28
  %1259 = sext i32 %1258 to i64
  %1260 = getelementptr inbounds [1 x [8 x [4 x [2 x i32]]]], ptr @INIT_BCBP_I, i64 0, i64 %1259, i64 %1240, i64 1
  %1261 = getelementptr inbounds [3 x [8 x [4 x [2 x i32]]]], ptr @INIT_BCBP_P, i64 0, i64 %1259, i64 %1240, i64 1
  %1262 = select i1 %1255, ptr %1260, ptr %1261
  tail call void @biari_init_context(ptr noundef nonnull %1256, ptr noundef nonnull %1262) #12
  %1263 = load ptr, ptr @img, align 8, !tbaa !6
  %1264 = getelementptr inbounds i8, ptr %1263, i64 24
  %1265 = load i32, ptr %1264, align 8, !tbaa !22
  %1266 = icmp eq i32 %1265, 2
  %1267 = getelementptr inbounds [10 x [4 x %struct.BiContextType]], ptr %1238, i64 0, i64 %1240, i64 2
  %1268 = getelementptr inbounds i8, ptr %1263, i64 90344
  %1269 = load i32, ptr %1268, align 8, !tbaa !28
  %1270 = sext i32 %1269 to i64
  %1271 = getelementptr inbounds [1 x [8 x [4 x [2 x i32]]]], ptr @INIT_BCBP_I, i64 0, i64 %1270, i64 %1240, i64 2
  %1272 = getelementptr inbounds [3 x [8 x [4 x [2 x i32]]]], ptr @INIT_BCBP_P, i64 0, i64 %1270, i64 %1240, i64 2
  %1273 = select i1 %1266, ptr %1271, ptr %1272
  tail call void @biari_init_context(ptr noundef nonnull %1267, ptr noundef nonnull %1273) #12
  %1274 = load ptr, ptr @img, align 8, !tbaa !6
  %1275 = getelementptr inbounds i8, ptr %1274, i64 24
  %1276 = load i32, ptr %1275, align 8, !tbaa !22
  %1277 = icmp eq i32 %1276, 2
  %1278 = getelementptr inbounds [10 x [4 x %struct.BiContextType]], ptr %1238, i64 0, i64 %1240, i64 3
  %1279 = getelementptr inbounds i8, ptr %1274, i64 90344
  %1280 = load i32, ptr %1279, align 8, !tbaa !28
  %1281 = sext i32 %1280 to i64
  %1282 = getelementptr inbounds [1 x [8 x [4 x [2 x i32]]]], ptr @INIT_BCBP_I, i64 0, i64 %1281, i64 %1240, i64 3
  %1283 = getelementptr inbounds [3 x [8 x [4 x [2 x i32]]]], ptr @INIT_BCBP_P, i64 0, i64 %1281, i64 %1240, i64 3
  %1284 = select i1 %1277, ptr %1282, ptr %1283
  tail call void @biari_init_context(ptr noundef nonnull %1278, ptr noundef nonnull %1284) #12
  %1285 = add nuw nsw i64 %1240, 1
  %1286 = icmp eq i64 %1285, 10
  br i1 %1286, label %1287, label %1239

1287:                                             ; preds = %1239
  %1288 = getelementptr inbounds i8, ptr %7, i64 928
  br label %1289

1289:                                             ; preds = %1287, %1308
  %1290 = phi i64 [ 0, %1287 ], [ %1309, %1308 ]
  br label %1293

1291:                                             ; preds = %1308
  %1292 = getelementptr inbounds i8, ptr %7, i64 3328
  br label %1311

1293:                                             ; preds = %1289, %1293
  %1294 = phi i64 [ 0, %1289 ], [ %1306, %1293 ]
  %1295 = load ptr, ptr @img, align 8, !tbaa !6
  %1296 = getelementptr inbounds i8, ptr %1295, i64 24
  %1297 = load i32, ptr %1296, align 8, !tbaa !22
  %1298 = icmp eq i32 %1297, 2
  %1299 = getelementptr inbounds [10 x [15 x %struct.BiContextType]], ptr %1288, i64 0, i64 %1290, i64 %1294
  %1300 = getelementptr inbounds i8, ptr %1295, i64 90344
  %1301 = load i32, ptr %1300, align 8, !tbaa !28
  %1302 = sext i32 %1301 to i64
  %1303 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_MAP_I, i64 0, i64 %1302, i64 %1290, i64 %1294
  %1304 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_MAP_P, i64 0, i64 %1302, i64 %1290, i64 %1294
  %1305 = select i1 %1298, ptr %1303, ptr %1304
  tail call void @biari_init_context(ptr noundef nonnull %1299, ptr noundef nonnull %1305) #12
  %1306 = add nuw nsw i64 %1294, 1
  %1307 = icmp eq i64 %1306, 15
  br i1 %1307, label %1308, label %1293

1308:                                             ; preds = %1293
  %1309 = add nuw nsw i64 %1290, 1
  %1310 = icmp eq i64 %1309, 10
  br i1 %1310, label %1291, label %1289

1311:                                             ; preds = %1291, %1330
  %1312 = phi i64 [ 0, %1291 ], [ %1331, %1330 ]
  br label %1315

1313:                                             ; preds = %1330
  %1314 = getelementptr inbounds i8, ptr %7, i64 5728
  br label %1333

1315:                                             ; preds = %1311, %1315
  %1316 = phi i64 [ 0, %1311 ], [ %1328, %1315 ]
  %1317 = load ptr, ptr @img, align 8, !tbaa !6
  %1318 = getelementptr inbounds i8, ptr %1317, i64 24
  %1319 = load i32, ptr %1318, align 8, !tbaa !22
  %1320 = icmp eq i32 %1319, 2
  %1321 = getelementptr inbounds [10 x [15 x %struct.BiContextType]], ptr %1292, i64 0, i64 %1312, i64 %1316
  %1322 = getelementptr inbounds i8, ptr %1317, i64 90344
  %1323 = load i32, ptr %1322, align 8, !tbaa !28
  %1324 = sext i32 %1323 to i64
  %1325 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_LAST_I, i64 0, i64 %1324, i64 %1312, i64 %1316
  %1326 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_LAST_P, i64 0, i64 %1324, i64 %1312, i64 %1316
  %1327 = select i1 %1320, ptr %1325, ptr %1326
  tail call void @biari_init_context(ptr noundef nonnull %1321, ptr noundef nonnull %1327) #12
  %1328 = add nuw nsw i64 %1316, 1
  %1329 = icmp eq i64 %1328, 15
  br i1 %1329, label %1330, label %1315

1330:                                             ; preds = %1315
  %1331 = add nuw nsw i64 %1312, 1
  %1332 = icmp eq i64 %1331, 10
  br i1 %1332, label %1313, label %1311

1333:                                             ; preds = %1313, %1333
  %1334 = phi i64 [ 0, %1313 ], [ %1390, %1333 ]
  %1335 = load ptr, ptr @img, align 8, !tbaa !6
  %1336 = getelementptr inbounds i8, ptr %1335, i64 24
  %1337 = load i32, ptr %1336, align 8, !tbaa !22
  %1338 = icmp eq i32 %1337, 2
  %1339 = getelementptr inbounds [10 x [5 x %struct.BiContextType]], ptr %1314, i64 0, i64 %1334, i64 0
  %1340 = getelementptr inbounds i8, ptr %1335, i64 90344
  %1341 = load i32, ptr %1340, align 8, !tbaa !28
  %1342 = sext i32 %1341 to i64
  %1343 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ONE_I, i64 0, i64 %1342, i64 %1334, i64 0
  %1344 = getelementptr inbounds [3 x [8 x [5 x [2 x i32]]]], ptr @INIT_ONE_P, i64 0, i64 %1342, i64 %1334, i64 0
  %1345 = select i1 %1338, ptr %1343, ptr %1344
  tail call void @biari_init_context(ptr noundef nonnull %1339, ptr noundef nonnull %1345) #12
  %1346 = load ptr, ptr @img, align 8, !tbaa !6
  %1347 = getelementptr inbounds i8, ptr %1346, i64 24
  %1348 = load i32, ptr %1347, align 8, !tbaa !22
  %1349 = icmp eq i32 %1348, 2
  %1350 = getelementptr inbounds [10 x [5 x %struct.BiContextType]], ptr %1314, i64 0, i64 %1334, i64 1
  %1351 = getelementptr inbounds i8, ptr %1346, i64 90344
  %1352 = load i32, ptr %1351, align 8, !tbaa !28
  %1353 = sext i32 %1352 to i64
  %1354 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ONE_I, i64 0, i64 %1353, i64 %1334, i64 1
  %1355 = getelementptr inbounds [3 x [8 x [5 x [2 x i32]]]], ptr @INIT_ONE_P, i64 0, i64 %1353, i64 %1334, i64 1
  %1356 = select i1 %1349, ptr %1354, ptr %1355
  tail call void @biari_init_context(ptr noundef nonnull %1350, ptr noundef nonnull %1356) #12
  %1357 = load ptr, ptr @img, align 8, !tbaa !6
  %1358 = getelementptr inbounds i8, ptr %1357, i64 24
  %1359 = load i32, ptr %1358, align 8, !tbaa !22
  %1360 = icmp eq i32 %1359, 2
  %1361 = getelementptr inbounds [10 x [5 x %struct.BiContextType]], ptr %1314, i64 0, i64 %1334, i64 2
  %1362 = getelementptr inbounds i8, ptr %1357, i64 90344
  %1363 = load i32, ptr %1362, align 8, !tbaa !28
  %1364 = sext i32 %1363 to i64
  %1365 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ONE_I, i64 0, i64 %1364, i64 %1334, i64 2
  %1366 = getelementptr inbounds [3 x [8 x [5 x [2 x i32]]]], ptr @INIT_ONE_P, i64 0, i64 %1364, i64 %1334, i64 2
  %1367 = select i1 %1360, ptr %1365, ptr %1366
  tail call void @biari_init_context(ptr noundef nonnull %1361, ptr noundef nonnull %1367) #12
  %1368 = load ptr, ptr @img, align 8, !tbaa !6
  %1369 = getelementptr inbounds i8, ptr %1368, i64 24
  %1370 = load i32, ptr %1369, align 8, !tbaa !22
  %1371 = icmp eq i32 %1370, 2
  %1372 = getelementptr inbounds [10 x [5 x %struct.BiContextType]], ptr %1314, i64 0, i64 %1334, i64 3
  %1373 = getelementptr inbounds i8, ptr %1368, i64 90344
  %1374 = load i32, ptr %1373, align 8, !tbaa !28
  %1375 = sext i32 %1374 to i64
  %1376 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ONE_I, i64 0, i64 %1375, i64 %1334, i64 3
  %1377 = getelementptr inbounds [3 x [8 x [5 x [2 x i32]]]], ptr @INIT_ONE_P, i64 0, i64 %1375, i64 %1334, i64 3
  %1378 = select i1 %1371, ptr %1376, ptr %1377
  tail call void @biari_init_context(ptr noundef nonnull %1372, ptr noundef nonnull %1378) #12
  %1379 = load ptr, ptr @img, align 8, !tbaa !6
  %1380 = getelementptr inbounds i8, ptr %1379, i64 24
  %1381 = load i32, ptr %1380, align 8, !tbaa !22
  %1382 = icmp eq i32 %1381, 2
  %1383 = getelementptr inbounds [10 x [5 x %struct.BiContextType]], ptr %1314, i64 0, i64 %1334, i64 4
  %1384 = getelementptr inbounds i8, ptr %1379, i64 90344
  %1385 = load i32, ptr %1384, align 8, !tbaa !28
  %1386 = sext i32 %1385 to i64
  %1387 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ONE_I, i64 0, i64 %1386, i64 %1334, i64 4
  %1388 = getelementptr inbounds [3 x [8 x [5 x [2 x i32]]]], ptr @INIT_ONE_P, i64 0, i64 %1386, i64 %1334, i64 4
  %1389 = select i1 %1382, ptr %1387, ptr %1388
  tail call void @biari_init_context(ptr noundef nonnull %1383, ptr noundef nonnull %1389) #12
  %1390 = add nuw nsw i64 %1334, 1
  %1391 = icmp eq i64 %1390, 10
  br i1 %1391, label %1392, label %1333

1392:                                             ; preds = %1333
  %1393 = getelementptr inbounds i8, ptr %7, i64 6528
  br label %1394

1394:                                             ; preds = %1392, %1394
  %1395 = phi i64 [ 0, %1392 ], [ %1451, %1394 ]
  %1396 = load ptr, ptr @img, align 8, !tbaa !6
  %1397 = getelementptr inbounds i8, ptr %1396, i64 24
  %1398 = load i32, ptr %1397, align 8, !tbaa !22
  %1399 = icmp eq i32 %1398, 2
  %1400 = getelementptr inbounds [10 x [5 x %struct.BiContextType]], ptr %1393, i64 0, i64 %1395, i64 0
  %1401 = getelementptr inbounds i8, ptr %1396, i64 90344
  %1402 = load i32, ptr %1401, align 8, !tbaa !28
  %1403 = sext i32 %1402 to i64
  %1404 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ABS_I, i64 0, i64 %1403, i64 %1395, i64 0
  %1405 = getelementptr inbounds [3 x [8 x [5 x [2 x i32]]]], ptr @INIT_ABS_P, i64 0, i64 %1403, i64 %1395, i64 0
  %1406 = select i1 %1399, ptr %1404, ptr %1405
  tail call void @biari_init_context(ptr noundef nonnull %1400, ptr noundef nonnull %1406) #12
  %1407 = load ptr, ptr @img, align 8, !tbaa !6
  %1408 = getelementptr inbounds i8, ptr %1407, i64 24
  %1409 = load i32, ptr %1408, align 8, !tbaa !22
  %1410 = icmp eq i32 %1409, 2
  %1411 = getelementptr inbounds [10 x [5 x %struct.BiContextType]], ptr %1393, i64 0, i64 %1395, i64 1
  %1412 = getelementptr inbounds i8, ptr %1407, i64 90344
  %1413 = load i32, ptr %1412, align 8, !tbaa !28
  %1414 = sext i32 %1413 to i64
  %1415 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ABS_I, i64 0, i64 %1414, i64 %1395, i64 1
  %1416 = getelementptr inbounds [3 x [8 x [5 x [2 x i32]]]], ptr @INIT_ABS_P, i64 0, i64 %1414, i64 %1395, i64 1
  %1417 = select i1 %1410, ptr %1415, ptr %1416
  tail call void @biari_init_context(ptr noundef nonnull %1411, ptr noundef nonnull %1417) #12
  %1418 = load ptr, ptr @img, align 8, !tbaa !6
  %1419 = getelementptr inbounds i8, ptr %1418, i64 24
  %1420 = load i32, ptr %1419, align 8, !tbaa !22
  %1421 = icmp eq i32 %1420, 2
  %1422 = getelementptr inbounds [10 x [5 x %struct.BiContextType]], ptr %1393, i64 0, i64 %1395, i64 2
  %1423 = getelementptr inbounds i8, ptr %1418, i64 90344
  %1424 = load i32, ptr %1423, align 8, !tbaa !28
  %1425 = sext i32 %1424 to i64
  %1426 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ABS_I, i64 0, i64 %1425, i64 %1395, i64 2
  %1427 = getelementptr inbounds [3 x [8 x [5 x [2 x i32]]]], ptr @INIT_ABS_P, i64 0, i64 %1425, i64 %1395, i64 2
  %1428 = select i1 %1421, ptr %1426, ptr %1427
  tail call void @biari_init_context(ptr noundef nonnull %1422, ptr noundef nonnull %1428) #12
  %1429 = load ptr, ptr @img, align 8, !tbaa !6
  %1430 = getelementptr inbounds i8, ptr %1429, i64 24
  %1431 = load i32, ptr %1430, align 8, !tbaa !22
  %1432 = icmp eq i32 %1431, 2
  %1433 = getelementptr inbounds [10 x [5 x %struct.BiContextType]], ptr %1393, i64 0, i64 %1395, i64 3
  %1434 = getelementptr inbounds i8, ptr %1429, i64 90344
  %1435 = load i32, ptr %1434, align 8, !tbaa !28
  %1436 = sext i32 %1435 to i64
  %1437 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ABS_I, i64 0, i64 %1436, i64 %1395, i64 3
  %1438 = getelementptr inbounds [3 x [8 x [5 x [2 x i32]]]], ptr @INIT_ABS_P, i64 0, i64 %1436, i64 %1395, i64 3
  %1439 = select i1 %1432, ptr %1437, ptr %1438
  tail call void @biari_init_context(ptr noundef nonnull %1433, ptr noundef nonnull %1439) #12
  %1440 = load ptr, ptr @img, align 8, !tbaa !6
  %1441 = getelementptr inbounds i8, ptr %1440, i64 24
  %1442 = load i32, ptr %1441, align 8, !tbaa !22
  %1443 = icmp eq i32 %1442, 2
  %1444 = getelementptr inbounds [10 x [5 x %struct.BiContextType]], ptr %1393, i64 0, i64 %1395, i64 4
  %1445 = getelementptr inbounds i8, ptr %1440, i64 90344
  %1446 = load i32, ptr %1445, align 8, !tbaa !28
  %1447 = sext i32 %1446 to i64
  %1448 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ABS_I, i64 0, i64 %1447, i64 %1395, i64 4
  %1449 = getelementptr inbounds [3 x [8 x [5 x [2 x i32]]]], ptr @INIT_ABS_P, i64 0, i64 %1447, i64 %1395, i64 4
  %1450 = select i1 %1443, ptr %1448, ptr %1449
  tail call void @biari_init_context(ptr noundef nonnull %1444, ptr noundef nonnull %1450) #12
  %1451 = add nuw nsw i64 %1395, 1
  %1452 = icmp eq i64 %1451, 10
  br i1 %1452, label %1453, label %1394

1453:                                             ; preds = %1394
  %1454 = getelementptr inbounds i8, ptr %7, i64 7328
  br label %1455

1455:                                             ; preds = %1453, %1474
  %1456 = phi i64 [ 0, %1453 ], [ %1475, %1474 ]
  br label %1459

1457:                                             ; preds = %1474
  %1458 = getelementptr inbounds i8, ptr %7, i64 9728
  br label %1477

1459:                                             ; preds = %1455, %1459
  %1460 = phi i64 [ 0, %1455 ], [ %1472, %1459 ]
  %1461 = load ptr, ptr @img, align 8, !tbaa !6
  %1462 = getelementptr inbounds i8, ptr %1461, i64 24
  %1463 = load i32, ptr %1462, align 8, !tbaa !22
  %1464 = icmp eq i32 %1463, 2
  %1465 = getelementptr inbounds [10 x [15 x %struct.BiContextType]], ptr %1454, i64 0, i64 %1456, i64 %1460
  %1466 = getelementptr inbounds i8, ptr %1461, i64 90344
  %1467 = load i32, ptr %1466, align 8, !tbaa !28
  %1468 = sext i32 %1467 to i64
  %1469 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_MAP_I, i64 0, i64 %1468, i64 %1456, i64 %1460
  %1470 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_MAP_P, i64 0, i64 %1468, i64 %1456, i64 %1460
  %1471 = select i1 %1464, ptr %1469, ptr %1470
  tail call void @biari_init_context(ptr noundef nonnull %1465, ptr noundef nonnull %1471) #12
  %1472 = add nuw nsw i64 %1460, 1
  %1473 = icmp eq i64 %1472, 15
  br i1 %1473, label %1474, label %1459

1474:                                             ; preds = %1459
  %1475 = add nuw nsw i64 %1456, 1
  %1476 = icmp eq i64 %1475, 10
  br i1 %1476, label %1457, label %1455

1477:                                             ; preds = %1457, %1494
  %1478 = phi i64 [ 0, %1457 ], [ %1495, %1494 ]
  br label %1479

1479:                                             ; preds = %1477, %1479
  %1480 = phi i64 [ 0, %1477 ], [ %1492, %1479 ]
  %1481 = load ptr, ptr @img, align 8, !tbaa !6
  %1482 = getelementptr inbounds i8, ptr %1481, i64 24
  %1483 = load i32, ptr %1482, align 8, !tbaa !22
  %1484 = icmp eq i32 %1483, 2
  %1485 = getelementptr inbounds [10 x [15 x %struct.BiContextType]], ptr %1458, i64 0, i64 %1478, i64 %1480
  %1486 = getelementptr inbounds i8, ptr %1481, i64 90344
  %1487 = load i32, ptr %1486, align 8, !tbaa !28
  %1488 = sext i32 %1487 to i64
  %1489 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_LAST_I, i64 0, i64 %1488, i64 %1478, i64 %1480
  %1490 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_LAST_P, i64 0, i64 %1488, i64 %1478, i64 %1480
  %1491 = select i1 %1484, ptr %1489, ptr %1490
  tail call void @biari_init_context(ptr noundef nonnull %1485, ptr noundef nonnull %1491) #12
  %1492 = add nuw nsw i64 %1480, 1
  %1493 = icmp eq i64 %1492, 15
  br i1 %1493, label %1494, label %1479

1494:                                             ; preds = %1479
  %1495 = add nuw nsw i64 %1478, 1
  %1496 = icmp eq i64 %1495, 10
  br i1 %1496, label %1497, label %1477

1497:                                             ; preds = %1494
  ret void
}

declare dso_local void @biari_init_context(ptr noundef, ptr noundef) local_unnamed_addr #2

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn memory(read, inaccessiblemem: none)
define dso_local double @XRate(ptr nocapture noundef readonly %0, ptr nocapture noundef readonly %1) local_unnamed_addr #6 {
  %3 = load ptr, ptr @img, align 8, !tbaa !6
  %4 = getelementptr inbounds i8, ptr %3, i64 40
  %5 = load i32, ptr %4, align 8, !tbaa !31
  %6 = getelementptr inbounds i8, ptr %0, i64 8
  %7 = load i64, ptr %6, align 8, !tbaa !32
  %8 = load i32, ptr %1, align 4, !tbaa !19
  %9 = getelementptr inbounds i8, ptr %1, i64 4
  %10 = load i32, ptr %9, align 4, !tbaa !19
  %11 = getelementptr inbounds i8, ptr %0, i64 2
  %12 = load i8, ptr %11, align 2, !tbaa !35
  %13 = icmp eq i8 %12, 0
  %14 = load i16, ptr %0, align 8, !tbaa !36
  %15 = zext i16 %14 to i32
  %16 = add nuw nsw i32 %15, 64
  %17 = sub nsw i32 63, %15
  %18 = select i1 %13, i32 %17, i32 %16
  %19 = uitofp i64 %7 to double
  %20 = fmul double %19, 3.125000e-02
  %21 = fcmp ogt double %20, 1.000000e+00
  %22 = tail call i32 @llvm.smax.i32(i32 %5, i32 0)
  %23 = mul nsw i32 %8, %22
  %24 = ashr i32 %23, 4
  %25 = add nsw i32 %24, %10
  %26 = tail call i32 @llvm.smax.i32(i32 %25, i32 0)
  %27 = tail call i32 @llvm.umin.i32(i32 %26, i32 127)
  %28 = sext i32 %18 to i64
  %29 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %28
  %30 = load double, ptr %29, align 8, !tbaa !20
  %31 = zext nneg i32 %27 to i64
  %32 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %31
  %33 = load double, ptr %32, align 8, !tbaa !20
  %34 = fneg double %20
  %35 = select i1 %21, double -1.000000e+00, double %34
  %36 = fmul double %35, %30
  %37 = tail call double @llvm.fmuladd.f64(double %36, double %33, double 0.000000e+00)
  %38 = sub nsw i32 127, %18
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %39
  %41 = load double, ptr %40, align 8, !tbaa !20
  %42 = xor i32 %27, 127
  %43 = zext nneg i32 %42 to i64
  %44 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %43
  %45 = load double, ptr %44, align 8, !tbaa !20
  %46 = fmul double %35, %41
  %47 = tail call double @llvm.fmuladd.f64(double %46, double %45, double %37)
  ret double %47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare double @llvm.fmuladd.f64(double, double, double) #7

; Function Attrs: nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none)
define dso_local void @GetCtxModelNumber(ptr nocapture noundef writeonly %0, ptr nocapture noundef readonly %1, ptr nocapture noundef readonly %2) local_unnamed_addr #8 {
  %4 = load ptr, ptr @img, align 8, !tbaa !6
  %5 = getelementptr inbounds i8, ptr %4, i64 24
  %6 = load i32, ptr %5, align 8, !tbaa !22
  %7 = icmp ne i32 %6, 2
  %8 = getelementptr inbounds i8, ptr %4, i64 40
  %9 = getelementptr inbounds i8, ptr %1, i64 528
  %10 = getelementptr inbounds i8, ptr %1, i64 816
  %11 = getelementptr inbounds i8, ptr %1, i64 1136
  %12 = getelementptr inbounds i8, ptr %1, i64 1328
  %13 = getelementptr inbounds i8, ptr %1, i64 1392
  %14 = getelementptr inbounds i8, ptr %1, i64 1456
  %15 = getelementptr inbounds i8, ptr %2, i64 32
  %16 = getelementptr inbounds i8, ptr %2, i64 96
  %17 = getelementptr inbounds i8, ptr %2, i64 288
  %18 = getelementptr inbounds i8, ptr %2, i64 928
  %19 = getelementptr inbounds i8, ptr %2, i64 3328
  %20 = getelementptr inbounds i8, ptr %2, i64 5728
  %21 = getelementptr inbounds i8, ptr %2, i64 6528
  %22 = getelementptr inbounds i8, ptr %2, i64 7328
  %23 = getelementptr inbounds i8, ptr %2, i64 9728
  %24 = getelementptr inbounds i8, ptr %1, i64 1336
  %25 = load i64, ptr %24, align 8, !tbaa !32
  %26 = uitofp i64 %25 to double
  %27 = fmul double %26, 3.125000e-02
  %28 = fcmp ogt double %27, 1.000000e+00
  %29 = fneg double %27
  %30 = select i1 %28, double -1.000000e+00, double %29
  %31 = getelementptr inbounds i8, ptr %1, i64 1330
  %32 = load i8, ptr %31, align 2, !tbaa !35
  %33 = icmp eq i8 %32, 0
  %34 = load i16, ptr %12, align 8, !tbaa !36
  %35 = zext i16 %34 to i32
  %36 = sub nsw i32 63, %35
  %37 = add nuw nsw i32 %35, 64
  %38 = select i1 %33, i32 %36, i32 %37
  %39 = sub nsw i32 127, %38
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %40
  %42 = load double, ptr %41, align 8, !tbaa !20
  %43 = fmul double %30, %42
  %44 = sext i32 %38 to i64
  %45 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %44
  %46 = load double, ptr %45, align 8, !tbaa !20
  %47 = fmul double %30, %46
  %48 = getelementptr inbounds i8, ptr %1, i64 1352
  %49 = load i64, ptr %48, align 8, !tbaa !32
  %50 = uitofp i64 %49 to double
  %51 = fmul double %50, 3.125000e-02
  %52 = fcmp ogt double %51, 1.000000e+00
  %53 = fneg double %51
  %54 = select i1 %52, double -1.000000e+00, double %53
  %55 = getelementptr inbounds i8, ptr %1, i64 1346
  %56 = load i8, ptr %55, align 2, !tbaa !35
  %57 = icmp eq i8 %56, 0
  %58 = getelementptr inbounds i8, ptr %1, i64 1344
  %59 = load i16, ptr %58, align 8, !tbaa !36
  %60 = zext i16 %59 to i32
  %61 = sub nsw i32 63, %60
  %62 = add nuw nsw i32 %60, 64
  %63 = select i1 %57, i32 %61, i32 %62
  %64 = sub nsw i32 127, %63
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %65
  %67 = load double, ptr %66, align 8, !tbaa !20
  %68 = fmul double %54, %67
  %69 = sext i32 %63 to i64
  %70 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %69
  %71 = load double, ptr %70, align 8, !tbaa !20
  %72 = fmul double %54, %71
  %73 = getelementptr inbounds i8, ptr %1, i64 1368
  %74 = load i64, ptr %73, align 8, !tbaa !32
  %75 = uitofp i64 %74 to double
  %76 = fmul double %75, 3.125000e-02
  %77 = fcmp ogt double %76, 1.000000e+00
  %78 = fneg double %76
  %79 = select i1 %77, double -1.000000e+00, double %78
  %80 = getelementptr inbounds i8, ptr %1, i64 1362
  %81 = load i8, ptr %80, align 2, !tbaa !35
  %82 = icmp eq i8 %81, 0
  %83 = getelementptr inbounds i8, ptr %1, i64 1360
  %84 = load i16, ptr %83, align 8, !tbaa !36
  %85 = zext i16 %84 to i32
  %86 = sub nsw i32 63, %85
  %87 = add nuw nsw i32 %85, 64
  %88 = select i1 %82, i32 %86, i32 %87
  %89 = sub nsw i32 127, %88
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %90
  %92 = load double, ptr %91, align 8, !tbaa !20
  %93 = fmul double %79, %92
  %94 = sext i32 %88 to i64
  %95 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %94
  %96 = load double, ptr %95, align 8, !tbaa !20
  %97 = fmul double %79, %96
  %98 = getelementptr inbounds i8, ptr %1, i64 1384
  %99 = load i64, ptr %98, align 8, !tbaa !32
  %100 = uitofp i64 %99 to double
  %101 = fmul double %100, 3.125000e-02
  %102 = fcmp ogt double %101, 1.000000e+00
  %103 = fneg double %101
  %104 = select i1 %102, double -1.000000e+00, double %103
  %105 = getelementptr inbounds i8, ptr %1, i64 1378
  %106 = load i8, ptr %105, align 2, !tbaa !35
  %107 = icmp eq i8 %106, 0
  %108 = getelementptr inbounds i8, ptr %1, i64 1376
  %109 = load i16, ptr %108, align 8, !tbaa !36
  %110 = zext i16 %109 to i32
  %111 = sub nsw i32 63, %110
  %112 = add nuw nsw i32 %110, 64
  %113 = select i1 %107, i32 %111, i32 %112
  %114 = sub nsw i32 127, %113
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %115
  %117 = load double, ptr %116, align 8, !tbaa !20
  %118 = fmul double %104, %117
  %119 = sext i32 %113 to i64
  %120 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %119
  %121 = load double, ptr %120, align 8, !tbaa !20
  %122 = fmul double %104, %121
  %123 = getelementptr inbounds i8, ptr %1, i64 1400
  %124 = load i64, ptr %123, align 8, !tbaa !32
  %125 = uitofp i64 %124 to double
  %126 = fmul double %125, 3.125000e-02
  %127 = fcmp ogt double %126, 1.000000e+00
  %128 = fneg double %126
  %129 = select i1 %127, double -1.000000e+00, double %128
  %130 = getelementptr inbounds i8, ptr %1, i64 1394
  %131 = load i8, ptr %130, align 2, !tbaa !35
  %132 = icmp eq i8 %131, 0
  %133 = load i16, ptr %13, align 8, !tbaa !36
  %134 = zext i16 %133 to i32
  %135 = sub nsw i32 63, %134
  %136 = add nuw nsw i32 %134, 64
  %137 = select i1 %132, i32 %135, i32 %136
  %138 = sub nsw i32 127, %137
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %139
  %141 = load double, ptr %140, align 8, !tbaa !20
  %142 = fmul double %129, %141
  %143 = sext i32 %137 to i64
  %144 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %143
  %145 = load double, ptr %144, align 8, !tbaa !20
  %146 = fmul double %129, %145
  %147 = getelementptr inbounds i8, ptr %1, i64 1416
  %148 = load i64, ptr %147, align 8, !tbaa !32
  %149 = uitofp i64 %148 to double
  %150 = fmul double %149, 3.125000e-02
  %151 = fcmp ogt double %150, 1.000000e+00
  %152 = fneg double %150
  %153 = select i1 %151, double -1.000000e+00, double %152
  %154 = getelementptr inbounds i8, ptr %1, i64 1410
  %155 = load i8, ptr %154, align 2, !tbaa !35
  %156 = icmp eq i8 %155, 0
  %157 = getelementptr inbounds i8, ptr %1, i64 1408
  %158 = load i16, ptr %157, align 8, !tbaa !36
  %159 = zext i16 %158 to i32
  %160 = sub nsw i32 63, %159
  %161 = add nuw nsw i32 %159, 64
  %162 = select i1 %156, i32 %160, i32 %161
  %163 = sub nsw i32 127, %162
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %164
  %166 = load double, ptr %165, align 8, !tbaa !20
  %167 = fmul double %153, %166
  %168 = sext i32 %162 to i64
  %169 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %168
  %170 = load double, ptr %169, align 8, !tbaa !20
  %171 = fmul double %153, %170
  %172 = getelementptr inbounds i8, ptr %1, i64 1432
  %173 = load i64, ptr %172, align 8, !tbaa !32
  %174 = uitofp i64 %173 to double
  %175 = fmul double %174, 3.125000e-02
  %176 = fcmp ogt double %175, 1.000000e+00
  %177 = fneg double %175
  %178 = select i1 %176, double -1.000000e+00, double %177
  %179 = getelementptr inbounds i8, ptr %1, i64 1426
  %180 = load i8, ptr %179, align 2, !tbaa !35
  %181 = icmp eq i8 %180, 0
  %182 = getelementptr inbounds i8, ptr %1, i64 1424
  %183 = load i16, ptr %182, align 8, !tbaa !36
  %184 = zext i16 %183 to i32
  %185 = sub nsw i32 63, %184
  %186 = add nuw nsw i32 %184, 64
  %187 = select i1 %181, i32 %185, i32 %186
  %188 = sub nsw i32 127, %187
  %189 = sext i32 %188 to i64
  %190 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %189
  %191 = load double, ptr %190, align 8, !tbaa !20
  %192 = fmul double %178, %191
  %193 = sext i32 %187 to i64
  %194 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %193
  %195 = load double, ptr %194, align 8, !tbaa !20
  %196 = fmul double %178, %195
  %197 = getelementptr inbounds i8, ptr %1, i64 1448
  %198 = load i64, ptr %197, align 8, !tbaa !32
  %199 = uitofp i64 %198 to double
  %200 = fmul double %199, 3.125000e-02
  %201 = fcmp ogt double %200, 1.000000e+00
  %202 = fneg double %200
  %203 = select i1 %201, double -1.000000e+00, double %202
  %204 = getelementptr inbounds i8, ptr %1, i64 1442
  %205 = load i8, ptr %204, align 2, !tbaa !35
  %206 = icmp eq i8 %205, 0
  %207 = getelementptr inbounds i8, ptr %1, i64 1440
  %208 = load i16, ptr %207, align 8, !tbaa !36
  %209 = zext i16 %208 to i32
  %210 = sub nsw i32 63, %209
  %211 = add nuw nsw i32 %209, 64
  %212 = select i1 %206, i32 %210, i32 %211
  %213 = sub nsw i32 127, %212
  %214 = sext i32 %213 to i64
  %215 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %214
  %216 = load double, ptr %215, align 8, !tbaa !20
  %217 = fmul double %203, %216
  %218 = sext i32 %212 to i64
  %219 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %218
  %220 = load double, ptr %219, align 8, !tbaa !20
  %221 = fmul double %203, %220
  %222 = getelementptr inbounds i8, ptr %1, i64 1464
  %223 = load i64, ptr %222, align 8, !tbaa !32
  %224 = uitofp i64 %223 to double
  %225 = fmul double %224, 3.125000e-02
  %226 = fcmp ogt double %225, 1.000000e+00
  %227 = fneg double %225
  %228 = select i1 %226, double -1.000000e+00, double %227
  %229 = getelementptr inbounds i8, ptr %1, i64 1458
  %230 = load i8, ptr %229, align 2, !tbaa !35
  %231 = icmp eq i8 %230, 0
  %232 = load i16, ptr %14, align 8, !tbaa !36
  %233 = zext i16 %232 to i32
  %234 = sub nsw i32 63, %233
  %235 = add nuw nsw i32 %233, 64
  %236 = select i1 %231, i32 %234, i32 %235
  %237 = sub nsw i32 127, %236
  %238 = sext i32 %237 to i64
  %239 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %238
  %240 = load double, ptr %239, align 8, !tbaa !20
  %241 = fmul double %228, %240
  %242 = sext i32 %236 to i64
  %243 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %242
  %244 = load double, ptr %243, align 8, !tbaa !20
  %245 = fmul double %228, %244
  %246 = getelementptr inbounds i8, ptr %1, i64 1480
  %247 = load i64, ptr %246, align 8, !tbaa !32
  %248 = uitofp i64 %247 to double
  %249 = fmul double %248, 3.125000e-02
  %250 = fcmp ogt double %249, 1.000000e+00
  %251 = fneg double %249
  %252 = select i1 %250, double -1.000000e+00, double %251
  %253 = getelementptr inbounds i8, ptr %1, i64 1474
  %254 = load i8, ptr %253, align 2, !tbaa !35
  %255 = icmp eq i8 %254, 0
  %256 = getelementptr inbounds i8, ptr %1, i64 1472
  %257 = load i16, ptr %256, align 8, !tbaa !36
  %258 = zext i16 %257 to i32
  %259 = sub nsw i32 63, %258
  %260 = add nuw nsw i32 %258, 64
  %261 = select i1 %255, i32 %259, i32 %260
  %262 = sub nsw i32 127, %261
  %263 = sext i32 %262 to i64
  %264 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %263
  %265 = load double, ptr %264, align 8, !tbaa !20
  %266 = fmul double %252, %265
  %267 = sext i32 %261 to i64
  %268 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %267
  %269 = load double, ptr %268, align 8, !tbaa !20
  %270 = fmul double %252, %269
  %271 = getelementptr inbounds i8, ptr %1, i64 1496
  %272 = load i64, ptr %271, align 8, !tbaa !32
  %273 = uitofp i64 %272 to double
  %274 = fmul double %273, 3.125000e-02
  %275 = fcmp ogt double %274, 1.000000e+00
  %276 = fneg double %274
  %277 = select i1 %275, double -1.000000e+00, double %276
  %278 = getelementptr inbounds i8, ptr %1, i64 1490
  %279 = load i8, ptr %278, align 2, !tbaa !35
  %280 = icmp eq i8 %279, 0
  %281 = getelementptr inbounds i8, ptr %1, i64 1488
  %282 = load i16, ptr %281, align 8, !tbaa !36
  %283 = zext i16 %282 to i32
  %284 = sub nsw i32 63, %283
  %285 = add nuw nsw i32 %283, 64
  %286 = select i1 %280, i32 %284, i32 %285
  %287 = sub nsw i32 127, %286
  %288 = sext i32 %287 to i64
  %289 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %288
  %290 = load double, ptr %289, align 8, !tbaa !20
  %291 = fmul double %277, %290
  %292 = sext i32 %286 to i64
  %293 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %292
  %294 = load double, ptr %293, align 8, !tbaa !20
  %295 = fmul double %277, %294
  %296 = getelementptr inbounds i8, ptr %2, i64 8
  %297 = load i64, ptr %296, align 8, !tbaa !32
  %298 = uitofp i64 %297 to double
  %299 = fmul double %298, 3.125000e-02
  %300 = fcmp ogt double %299, 1.000000e+00
  %301 = fneg double %299
  %302 = select i1 %300, double -1.000000e+00, double %301
  %303 = getelementptr inbounds i8, ptr %2, i64 2
  %304 = load i8, ptr %303, align 2, !tbaa !35
  %305 = icmp eq i8 %304, 0
  %306 = load i16, ptr %2, align 8, !tbaa !36
  %307 = zext i16 %306 to i32
  %308 = sub nsw i32 63, %307
  %309 = add nuw nsw i32 %307, 64
  %310 = select i1 %305, i32 %308, i32 %309
  %311 = sub nsw i32 127, %310
  %312 = sext i32 %311 to i64
  %313 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %312
  %314 = load double, ptr %313, align 8, !tbaa !20
  %315 = fmul double %302, %314
  %316 = sext i32 %310 to i64
  %317 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %316
  %318 = load double, ptr %317, align 8, !tbaa !20
  %319 = fmul double %302, %318
  %320 = getelementptr inbounds i8, ptr %2, i64 24
  %321 = load i64, ptr %320, align 8, !tbaa !32
  %322 = uitofp i64 %321 to double
  %323 = fmul double %322, 3.125000e-02
  %324 = fcmp ogt double %323, 1.000000e+00
  %325 = fneg double %323
  %326 = select i1 %324, double -1.000000e+00, double %325
  %327 = getelementptr inbounds i8, ptr %2, i64 18
  %328 = load i8, ptr %327, align 2, !tbaa !35
  %329 = icmp eq i8 %328, 0
  %330 = getelementptr inbounds i8, ptr %2, i64 16
  %331 = load i16, ptr %330, align 8, !tbaa !36
  %332 = zext i16 %331 to i32
  %333 = sub nsw i32 63, %332
  %334 = add nuw nsw i32 %332, 64
  %335 = select i1 %329, i32 %333, i32 %334
  %336 = sub nsw i32 127, %335
  %337 = sext i32 %336 to i64
  %338 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %337
  %339 = load double, ptr %338, align 8, !tbaa !20
  %340 = fmul double %326, %339
  %341 = sext i32 %335 to i64
  %342 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %341
  %343 = load double, ptr %342, align 8, !tbaa !20
  %344 = fmul double %326, %343
  %345 = getelementptr inbounds i8, ptr %2, i64 40
  %346 = load i64, ptr %345, align 8, !tbaa !32
  %347 = getelementptr inbounds i8, ptr %2, i64 34
  %348 = load i8, ptr %347, align 2, !tbaa !35
  %349 = icmp eq i8 %348, 0
  %350 = load i16, ptr %15, align 8, !tbaa !36
  %351 = zext i16 %350 to i32
  %352 = add nuw nsw i32 %351, 64
  %353 = sub nsw i32 63, %351
  %354 = select i1 %349, i32 %353, i32 %352
  %355 = uitofp i64 %346 to double
  %356 = fmul double %355, 3.125000e-02
  %357 = fcmp ogt double %356, 1.000000e+00
  %358 = sext i32 %354 to i64
  %359 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %358
  %360 = load double, ptr %359, align 8, !tbaa !20
  %361 = fneg double %356
  %362 = select i1 %357, double -1.000000e+00, double %361
  %363 = fmul double %362, %360
  %364 = sub nsw i32 127, %354
  %365 = sext i32 %364 to i64
  %366 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %365
  %367 = load double, ptr %366, align 8, !tbaa !20
  %368 = fmul double %362, %367
  %369 = getelementptr inbounds i8, ptr %2, i64 48
  %370 = getelementptr inbounds i8, ptr %2, i64 56
  %371 = load i64, ptr %370, align 8, !tbaa !32
  %372 = getelementptr inbounds i8, ptr %2, i64 50
  %373 = load i8, ptr %372, align 2, !tbaa !35
  %374 = icmp eq i8 %373, 0
  %375 = load i16, ptr %369, align 8, !tbaa !36
  %376 = zext i16 %375 to i32
  %377 = add nuw nsw i32 %376, 64
  %378 = sub nsw i32 63, %376
  %379 = select i1 %374, i32 %378, i32 %377
  %380 = uitofp i64 %371 to double
  %381 = fmul double %380, 3.125000e-02
  %382 = fcmp ogt double %381, 1.000000e+00
  %383 = sext i32 %379 to i64
  %384 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %383
  %385 = load double, ptr %384, align 8, !tbaa !20
  %386 = fneg double %381
  %387 = select i1 %382, double -1.000000e+00, double %386
  %388 = fmul double %387, %385
  %389 = sub nsw i32 127, %379
  %390 = sext i32 %389 to i64
  %391 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %390
  %392 = load double, ptr %391, align 8, !tbaa !20
  %393 = fmul double %387, %392
  %394 = getelementptr inbounds i8, ptr %2, i64 64
  %395 = getelementptr inbounds i8, ptr %2, i64 72
  %396 = load i64, ptr %395, align 8, !tbaa !32
  %397 = getelementptr inbounds i8, ptr %2, i64 66
  %398 = load i8, ptr %397, align 2, !tbaa !35
  %399 = icmp eq i8 %398, 0
  %400 = load i16, ptr %394, align 8, !tbaa !36
  %401 = zext i16 %400 to i32
  %402 = add nuw nsw i32 %401, 64
  %403 = sub nsw i32 63, %401
  %404 = select i1 %399, i32 %403, i32 %402
  %405 = uitofp i64 %396 to double
  %406 = fmul double %405, 3.125000e-02
  %407 = fcmp ogt double %406, 1.000000e+00
  %408 = sext i32 %404 to i64
  %409 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %408
  %410 = load double, ptr %409, align 8, !tbaa !20
  %411 = fneg double %406
  %412 = select i1 %407, double -1.000000e+00, double %411
  %413 = fmul double %412, %410
  %414 = sub nsw i32 127, %404
  %415 = sext i32 %414 to i64
  %416 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %415
  %417 = load double, ptr %416, align 8, !tbaa !20
  %418 = fmul double %412, %417
  %419 = getelementptr inbounds i8, ptr %2, i64 80
  %420 = getelementptr inbounds i8, ptr %2, i64 88
  %421 = load i64, ptr %420, align 8, !tbaa !32
  %422 = getelementptr inbounds i8, ptr %2, i64 82
  %423 = load i8, ptr %422, align 2, !tbaa !35
  %424 = icmp eq i8 %423, 0
  %425 = load i16, ptr %419, align 8, !tbaa !36
  %426 = zext i16 %425 to i32
  %427 = add nuw nsw i32 %426, 64
  %428 = sub nsw i32 63, %426
  %429 = select i1 %424, i32 %428, i32 %427
  %430 = uitofp i64 %421 to double
  %431 = fmul double %430, 3.125000e-02
  %432 = fcmp ogt double %431, 1.000000e+00
  %433 = sext i32 %429 to i64
  %434 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %433
  %435 = load double, ptr %434, align 8, !tbaa !20
  %436 = fneg double %431
  %437 = select i1 %432, double -1.000000e+00, double %436
  %438 = fmul double %437, %435
  %439 = sub nsw i32 127, %429
  %440 = sext i32 %439 to i64
  %441 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %440
  %442 = load double, ptr %441, align 8, !tbaa !20
  %443 = fmul double %437, %442
  br label %444

444:                                              ; preds = %3, %1870
  %445 = phi i64 [ 0, %3 ], [ %1872, %1870 ]
  %446 = phi double [ 1.000000e+30, %3 ], [ %1871, %1870 ]
  %447 = load i32, ptr %5, align 8, !tbaa !22
  %448 = icmp eq i32 %447, 2
  %449 = load i32, ptr %8, align 8, !tbaa !31
  %450 = tail call i32 @llvm.smax.i32(i32 %449, i32 0)
  br label %455

451:                                              ; preds = %511
  %452 = load double, ptr getelementptr inbounds (i8, ptr @entropy, i64 512), align 8
  %453 = load double, ptr getelementptr inbounds (i8, ptr @entropy, i64 504), align 8
  %454 = tail call i32 @llvm.smax.i32(i32 %449, i32 0)
  br label %514

455:                                              ; preds = %444, %511
  %456 = phi i64 [ 0, %444 ], [ %512, %511 ]
  %457 = phi double [ 0.000000e+00, %444 ], [ %508, %511 ]
  br label %458

458:                                              ; preds = %455, %458
  %459 = phi i64 [ 0, %455 ], [ %509, %458 ]
  %460 = phi double [ %457, %455 ], [ %508, %458 ]
  %461 = getelementptr inbounds [3 x [11 x %struct.BiContextType]], ptr %1, i64 0, i64 %456, i64 %459
  %462 = getelementptr inbounds i8, ptr %461, i64 8
  %463 = load i64, ptr %462, align 8, !tbaa !32
  %464 = getelementptr inbounds i8, ptr %461, i64 2
  %465 = load i8, ptr %464, align 2, !tbaa !35
  %466 = icmp eq i8 %465, 0
  %467 = load i16, ptr %461, align 8, !tbaa !36
  %468 = zext i16 %467 to i32
  %469 = add nuw nsw i32 %468, 64
  %470 = sub nsw i32 63, %468
  %471 = select i1 %466, i32 %470, i32 %469
  %472 = uitofp i64 %463 to double
  %473 = fmul double %472, 3.125000e-02
  %474 = fcmp ogt double %473, 1.000000e+00
  %475 = sext i32 %471 to i64
  %476 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %475
  %477 = load double, ptr %476, align 8, !tbaa !20
  %478 = fneg double %473
  %479 = select i1 %474, double -1.000000e+00, double %478
  %480 = fmul double %479, %477
  %481 = sub nsw i32 127, %471
  %482 = sext i32 %481 to i64
  %483 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %482
  %484 = load double, ptr %483, align 8, !tbaa !20
  %485 = fmul double %479, %484
  %486 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 0, i64 %456, i64 %459
  %487 = getelementptr inbounds [1 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_I, i64 0, i64 0, i64 %456, i64 %459, i64 1
  %488 = getelementptr inbounds [3 x [3 x [11 x [2 x i32]]]], ptr @INIT_MB_TYPE_P, i64 0, i64 %445, i64 %456, i64 %459
  %489 = getelementptr inbounds i8, ptr %488, i64 4
  %490 = select i1 %448, ptr %487, ptr %489
  %491 = select i1 %448, ptr %486, ptr %488
  %492 = load i32, ptr %491, align 4, !tbaa !19
  %493 = load i32, ptr %490, align 4, !tbaa !19
  %494 = mul nsw i32 %492, %450
  %495 = ashr i32 %494, 4
  %496 = add nsw i32 %495, %493
  %497 = tail call i32 @llvm.smax.i32(i32 %496, i32 0)
  %498 = tail call i32 @llvm.umin.i32(i32 %497, i32 127)
  %499 = zext nneg i32 %498 to i64
  %500 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %499
  %501 = load double, ptr %500, align 8, !tbaa !20
  %502 = tail call double @llvm.fmuladd.f64(double %480, double %501, double 0.000000e+00)
  %503 = xor i32 %498, 127
  %504 = zext nneg i32 %503 to i64
  %505 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %504
  %506 = load double, ptr %505, align 8, !tbaa !20
  %507 = tail call double @llvm.fmuladd.f64(double %485, double %506, double %502)
  %508 = fadd double %460, %507
  %509 = add nuw nsw i64 %459, 1
  %510 = icmp eq i64 %509, 11
  br i1 %510, label %511, label %458

511:                                              ; preds = %458
  %512 = add nuw nsw i64 %456, 1
  %513 = icmp eq i64 %512, 3
  br i1 %513, label %451, label %455

514:                                              ; preds = %451, %588
  %515 = phi i64 [ 0, %451 ], [ %591, %588 ]
  %516 = phi double [ %508, %451 ], [ %590, %588 ]
  %517 = getelementptr inbounds [2 x [9 x %struct.BiContextType]], ptr %9, i64 0, i64 0, i64 %515
  br i1 %448, label %518, label %545

518:                                              ; preds = %514
  %519 = getelementptr inbounds i8, ptr %517, i64 8
  %520 = load i64, ptr %519, align 8, !tbaa !32
  %521 = getelementptr inbounds i8, ptr %517, i64 2
  %522 = load i8, ptr %521, align 2, !tbaa !35
  %523 = icmp eq i8 %522, 0
  %524 = load i16, ptr %517, align 8, !tbaa !36
  %525 = zext i16 %524 to i32
  %526 = add nuw nsw i32 %525, 64
  %527 = sub nsw i32 63, %525
  %528 = select i1 %523, i32 %527, i32 %526
  %529 = uitofp i64 %520 to double
  %530 = fmul double %529, 3.125000e-02
  %531 = fcmp ogt double %530, 1.000000e+00
  %532 = sext i32 %528 to i64
  %533 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %532
  %534 = load double, ptr %533, align 8, !tbaa !20
  %535 = fneg double %530
  %536 = select i1 %531, double -1.000000e+00, double %535
  %537 = fmul double %534, %536
  %538 = tail call double @llvm.fmuladd.f64(double %537, double %452, double 0.000000e+00)
  %539 = sub nsw i32 127, %528
  %540 = sext i32 %539 to i64
  %541 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %540
  %542 = load double, ptr %541, align 8, !tbaa !20
  %543 = fmul double %536, %542
  %544 = tail call double @llvm.fmuladd.f64(double %543, double %453, double %538)
  br label %588

545:                                              ; preds = %514
  %546 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %445, i64 0, i64 %515
  %547 = getelementptr inbounds i8, ptr %517, i64 8
  %548 = load i64, ptr %547, align 8, !tbaa !32
  %549 = load i32, ptr %546, align 4, !tbaa !19
  %550 = getelementptr inbounds i8, ptr %546, i64 4
  %551 = load i32, ptr %550, align 4, !tbaa !19
  %552 = getelementptr inbounds i8, ptr %517, i64 2
  %553 = load i8, ptr %552, align 2, !tbaa !35
  %554 = icmp eq i8 %553, 0
  %555 = load i16, ptr %517, align 8, !tbaa !36
  %556 = zext i16 %555 to i32
  %557 = add nuw nsw i32 %556, 64
  %558 = sub nsw i32 63, %556
  %559 = select i1 %554, i32 %558, i32 %557
  %560 = uitofp i64 %548 to double
  %561 = fmul double %560, 3.125000e-02
  %562 = fcmp ogt double %561, 1.000000e+00
  %563 = mul nsw i32 %549, %454
  %564 = ashr i32 %563, 4
  %565 = add nsw i32 %564, %551
  %566 = tail call i32 @llvm.smax.i32(i32 %565, i32 0)
  %567 = tail call i32 @llvm.umin.i32(i32 %566, i32 127)
  %568 = sext i32 %559 to i64
  %569 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %568
  %570 = load double, ptr %569, align 8, !tbaa !20
  %571 = zext nneg i32 %567 to i64
  %572 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %571
  %573 = load double, ptr %572, align 8, !tbaa !20
  %574 = fneg double %561
  %575 = select i1 %562, double -1.000000e+00, double %574
  %576 = fmul double %575, %570
  %577 = tail call double @llvm.fmuladd.f64(double %576, double %573, double 0.000000e+00)
  %578 = sub nsw i32 127, %559
  %579 = sext i32 %578 to i64
  %580 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %579
  %581 = load double, ptr %580, align 8, !tbaa !20
  %582 = xor i32 %567, 127
  %583 = zext nneg i32 %582 to i64
  %584 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %583
  %585 = load double, ptr %584, align 8, !tbaa !20
  %586 = fmul double %575, %581
  %587 = tail call double @llvm.fmuladd.f64(double %586, double %585, double %577)
  br label %588

588:                                              ; preds = %518, %545
  %589 = phi double [ %544, %518 ], [ %587, %545 ]
  %590 = fadd double %516, %589
  %591 = add nuw nsw i64 %515, 1
  %592 = icmp eq i64 %591, 9
  br i1 %592, label %593, label %514

593:                                              ; preds = %588, %667
  %594 = phi i64 [ %670, %667 ], [ 0, %588 ]
  %595 = phi double [ %669, %667 ], [ %590, %588 ]
  %596 = getelementptr inbounds [2 x [9 x %struct.BiContextType]], ptr %9, i64 0, i64 1, i64 %594
  br i1 %448, label %640, label %597

597:                                              ; preds = %593
  %598 = getelementptr inbounds [3 x [2 x [9 x [2 x i32]]]], ptr @INIT_B8_TYPE_P, i64 0, i64 %445, i64 1, i64 %594
  %599 = getelementptr inbounds i8, ptr %596, i64 8
  %600 = load i64, ptr %599, align 8, !tbaa !32
  %601 = load i32, ptr %598, align 4, !tbaa !19
  %602 = getelementptr inbounds i8, ptr %598, i64 4
  %603 = load i32, ptr %602, align 4, !tbaa !19
  %604 = getelementptr inbounds i8, ptr %596, i64 2
  %605 = load i8, ptr %604, align 2, !tbaa !35
  %606 = icmp eq i8 %605, 0
  %607 = load i16, ptr %596, align 8, !tbaa !36
  %608 = zext i16 %607 to i32
  %609 = add nuw nsw i32 %608, 64
  %610 = sub nsw i32 63, %608
  %611 = select i1 %606, i32 %610, i32 %609
  %612 = uitofp i64 %600 to double
  %613 = fmul double %612, 3.125000e-02
  %614 = fcmp ogt double %613, 1.000000e+00
  %615 = mul nsw i32 %601, %454
  %616 = ashr i32 %615, 4
  %617 = add nsw i32 %616, %603
  %618 = tail call i32 @llvm.smax.i32(i32 %617, i32 0)
  %619 = tail call i32 @llvm.umin.i32(i32 %618, i32 127)
  %620 = sext i32 %611 to i64
  %621 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %620
  %622 = load double, ptr %621, align 8, !tbaa !20
  %623 = zext nneg i32 %619 to i64
  %624 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %623
  %625 = load double, ptr %624, align 8, !tbaa !20
  %626 = fneg double %613
  %627 = select i1 %614, double -1.000000e+00, double %626
  %628 = fmul double %627, %622
  %629 = tail call double @llvm.fmuladd.f64(double %628, double %625, double 0.000000e+00)
  %630 = sub nsw i32 127, %611
  %631 = sext i32 %630 to i64
  %632 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %631
  %633 = load double, ptr %632, align 8, !tbaa !20
  %634 = xor i32 %619, 127
  %635 = zext nneg i32 %634 to i64
  %636 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %635
  %637 = load double, ptr %636, align 8, !tbaa !20
  %638 = fmul double %627, %633
  %639 = tail call double @llvm.fmuladd.f64(double %638, double %637, double %629)
  br label %667

640:                                              ; preds = %593
  %641 = getelementptr inbounds i8, ptr %596, i64 8
  %642 = load i64, ptr %641, align 8, !tbaa !32
  %643 = getelementptr inbounds i8, ptr %596, i64 2
  %644 = load i8, ptr %643, align 2, !tbaa !35
  %645 = icmp eq i8 %644, 0
  %646 = load i16, ptr %596, align 8, !tbaa !36
  %647 = zext i16 %646 to i32
  %648 = add nuw nsw i32 %647, 64
  %649 = sub nsw i32 63, %647
  %650 = select i1 %645, i32 %649, i32 %648
  %651 = uitofp i64 %642 to double
  %652 = fmul double %651, 3.125000e-02
  %653 = fcmp ogt double %652, 1.000000e+00
  %654 = sext i32 %650 to i64
  %655 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %654
  %656 = load double, ptr %655, align 8, !tbaa !20
  %657 = fneg double %652
  %658 = select i1 %653, double -1.000000e+00, double %657
  %659 = fmul double %656, %658
  %660 = tail call double @llvm.fmuladd.f64(double %659, double %452, double 0.000000e+00)
  %661 = sub nsw i32 127, %650
  %662 = sext i32 %661 to i64
  %663 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %662
  %664 = load double, ptr %663, align 8, !tbaa !20
  %665 = fmul double %658, %664
  %666 = tail call double @llvm.fmuladd.f64(double %665, double %453, double %660)
  br label %667

667:                                              ; preds = %640, %597
  %668 = phi double [ %666, %640 ], [ %639, %597 ]
  %669 = fadd double %595, %668
  %670 = add nuw nsw i64 %594, 1
  %671 = icmp eq i64 %670, 9
  br i1 %671, label %672, label %593

672:                                              ; preds = %667
  %673 = tail call i32 @llvm.smax.i32(i32 %449, i32 0)
  br label %674

674:                                              ; preds = %672, %748
  %675 = phi i64 [ 0, %672 ], [ %751, %748 ]
  %676 = phi double [ %669, %672 ], [ %750, %748 ]
  %677 = getelementptr inbounds [2 x [10 x %struct.BiContextType]], ptr %10, i64 0, i64 0, i64 %675
  br i1 %448, label %678, label %705

678:                                              ; preds = %674
  %679 = getelementptr inbounds i8, ptr %677, i64 8
  %680 = load i64, ptr %679, align 8, !tbaa !32
  %681 = getelementptr inbounds i8, ptr %677, i64 2
  %682 = load i8, ptr %681, align 2, !tbaa !35
  %683 = icmp eq i8 %682, 0
  %684 = load i16, ptr %677, align 8, !tbaa !36
  %685 = zext i16 %684 to i32
  %686 = add nuw nsw i32 %685, 64
  %687 = sub nsw i32 63, %685
  %688 = select i1 %683, i32 %687, i32 %686
  %689 = uitofp i64 %680 to double
  %690 = fmul double %689, 3.125000e-02
  %691 = fcmp ogt double %690, 1.000000e+00
  %692 = sext i32 %688 to i64
  %693 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %692
  %694 = load double, ptr %693, align 8, !tbaa !20
  %695 = fneg double %690
  %696 = select i1 %691, double -1.000000e+00, double %695
  %697 = fmul double %694, %696
  %698 = tail call double @llvm.fmuladd.f64(double %697, double %452, double 0.000000e+00)
  %699 = sub nsw i32 127, %688
  %700 = sext i32 %699 to i64
  %701 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %700
  %702 = load double, ptr %701, align 8, !tbaa !20
  %703 = fmul double %696, %702
  %704 = tail call double @llvm.fmuladd.f64(double %703, double %453, double %698)
  br label %748

705:                                              ; preds = %674
  %706 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %445, i64 0, i64 %675
  %707 = getelementptr inbounds i8, ptr %677, i64 8
  %708 = load i64, ptr %707, align 8, !tbaa !32
  %709 = load i32, ptr %706, align 4, !tbaa !19
  %710 = getelementptr inbounds i8, ptr %706, i64 4
  %711 = load i32, ptr %710, align 4, !tbaa !19
  %712 = getelementptr inbounds i8, ptr %677, i64 2
  %713 = load i8, ptr %712, align 2, !tbaa !35
  %714 = icmp eq i8 %713, 0
  %715 = load i16, ptr %677, align 8, !tbaa !36
  %716 = zext i16 %715 to i32
  %717 = add nuw nsw i32 %716, 64
  %718 = sub nsw i32 63, %716
  %719 = select i1 %714, i32 %718, i32 %717
  %720 = uitofp i64 %708 to double
  %721 = fmul double %720, 3.125000e-02
  %722 = fcmp ogt double %721, 1.000000e+00
  %723 = mul nsw i32 %709, %673
  %724 = ashr i32 %723, 4
  %725 = add nsw i32 %724, %711
  %726 = tail call i32 @llvm.smax.i32(i32 %725, i32 0)
  %727 = tail call i32 @llvm.umin.i32(i32 %726, i32 127)
  %728 = sext i32 %719 to i64
  %729 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %728
  %730 = load double, ptr %729, align 8, !tbaa !20
  %731 = zext nneg i32 %727 to i64
  %732 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %731
  %733 = load double, ptr %732, align 8, !tbaa !20
  %734 = fneg double %721
  %735 = select i1 %722, double -1.000000e+00, double %734
  %736 = fmul double %735, %730
  %737 = tail call double @llvm.fmuladd.f64(double %736, double %733, double 0.000000e+00)
  %738 = sub nsw i32 127, %719
  %739 = sext i32 %738 to i64
  %740 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %739
  %741 = load double, ptr %740, align 8, !tbaa !20
  %742 = xor i32 %727, 127
  %743 = zext nneg i32 %742 to i64
  %744 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %743
  %745 = load double, ptr %744, align 8, !tbaa !20
  %746 = fmul double %735, %741
  %747 = tail call double @llvm.fmuladd.f64(double %746, double %745, double %737)
  br label %748

748:                                              ; preds = %678, %705
  %749 = phi double [ %704, %678 ], [ %747, %705 ]
  %750 = fadd double %676, %749
  %751 = add nuw nsw i64 %675, 1
  %752 = icmp eq i64 %751, 10
  br i1 %752, label %753, label %674

753:                                              ; preds = %748, %827
  %754 = phi i64 [ %830, %827 ], [ 0, %748 ]
  %755 = phi double [ %829, %827 ], [ %750, %748 ]
  %756 = getelementptr inbounds [2 x [10 x %struct.BiContextType]], ptr %10, i64 0, i64 1, i64 %754
  br i1 %448, label %800, label %757

757:                                              ; preds = %753
  %758 = getelementptr inbounds [3 x [2 x [10 x [2 x i32]]]], ptr @INIT_MV_RES_P, i64 0, i64 %445, i64 1, i64 %754
  %759 = getelementptr inbounds i8, ptr %756, i64 8
  %760 = load i64, ptr %759, align 8, !tbaa !32
  %761 = load i32, ptr %758, align 4, !tbaa !19
  %762 = getelementptr inbounds i8, ptr %758, i64 4
  %763 = load i32, ptr %762, align 4, !tbaa !19
  %764 = getelementptr inbounds i8, ptr %756, i64 2
  %765 = load i8, ptr %764, align 2, !tbaa !35
  %766 = icmp eq i8 %765, 0
  %767 = load i16, ptr %756, align 8, !tbaa !36
  %768 = zext i16 %767 to i32
  %769 = add nuw nsw i32 %768, 64
  %770 = sub nsw i32 63, %768
  %771 = select i1 %766, i32 %770, i32 %769
  %772 = uitofp i64 %760 to double
  %773 = fmul double %772, 3.125000e-02
  %774 = fcmp ogt double %773, 1.000000e+00
  %775 = mul nsw i32 %761, %673
  %776 = ashr i32 %775, 4
  %777 = add nsw i32 %776, %763
  %778 = tail call i32 @llvm.smax.i32(i32 %777, i32 0)
  %779 = tail call i32 @llvm.umin.i32(i32 %778, i32 127)
  %780 = sext i32 %771 to i64
  %781 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %780
  %782 = load double, ptr %781, align 8, !tbaa !20
  %783 = zext nneg i32 %779 to i64
  %784 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %783
  %785 = load double, ptr %784, align 8, !tbaa !20
  %786 = fneg double %773
  %787 = select i1 %774, double -1.000000e+00, double %786
  %788 = fmul double %787, %782
  %789 = tail call double @llvm.fmuladd.f64(double %788, double %785, double 0.000000e+00)
  %790 = sub nsw i32 127, %771
  %791 = sext i32 %790 to i64
  %792 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %791
  %793 = load double, ptr %792, align 8, !tbaa !20
  %794 = xor i32 %779, 127
  %795 = zext nneg i32 %794 to i64
  %796 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %795
  %797 = load double, ptr %796, align 8, !tbaa !20
  %798 = fmul double %787, %793
  %799 = tail call double @llvm.fmuladd.f64(double %798, double %797, double %789)
  br label %827

800:                                              ; preds = %753
  %801 = getelementptr inbounds i8, ptr %756, i64 8
  %802 = load i64, ptr %801, align 8, !tbaa !32
  %803 = getelementptr inbounds i8, ptr %756, i64 2
  %804 = load i8, ptr %803, align 2, !tbaa !35
  %805 = icmp eq i8 %804, 0
  %806 = load i16, ptr %756, align 8, !tbaa !36
  %807 = zext i16 %806 to i32
  %808 = add nuw nsw i32 %807, 64
  %809 = sub nsw i32 63, %807
  %810 = select i1 %805, i32 %809, i32 %808
  %811 = uitofp i64 %802 to double
  %812 = fmul double %811, 3.125000e-02
  %813 = fcmp ogt double %812, 1.000000e+00
  %814 = sext i32 %810 to i64
  %815 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %814
  %816 = load double, ptr %815, align 8, !tbaa !20
  %817 = fneg double %812
  %818 = select i1 %813, double -1.000000e+00, double %817
  %819 = fmul double %816, %818
  %820 = tail call double @llvm.fmuladd.f64(double %819, double %452, double 0.000000e+00)
  %821 = sub nsw i32 127, %810
  %822 = sext i32 %821 to i64
  %823 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %822
  %824 = load double, ptr %823, align 8, !tbaa !20
  %825 = fmul double %818, %824
  %826 = tail call double @llvm.fmuladd.f64(double %825, double %453, double %820)
  br label %827

827:                                              ; preds = %800, %757
  %828 = phi double [ %826, %800 ], [ %799, %757 ]
  %829 = fadd double %755, %828
  %830 = add nuw nsw i64 %754, 1
  %831 = icmp eq i64 %830, 10
  br i1 %831, label %832, label %753

832:                                              ; preds = %827
  %833 = tail call i32 @llvm.smax.i32(i32 %449, i32 0)
  br label %834

834:                                              ; preds = %832, %908
  %835 = phi i64 [ 0, %832 ], [ %911, %908 ]
  %836 = phi double [ %829, %832 ], [ %910, %908 ]
  %837 = getelementptr inbounds [2 x [6 x %struct.BiContextType]], ptr %11, i64 0, i64 0, i64 %835
  br i1 %448, label %838, label %865

838:                                              ; preds = %834
  %839 = getelementptr inbounds i8, ptr %837, i64 8
  %840 = load i64, ptr %839, align 8, !tbaa !32
  %841 = getelementptr inbounds i8, ptr %837, i64 2
  %842 = load i8, ptr %841, align 2, !tbaa !35
  %843 = icmp eq i8 %842, 0
  %844 = load i16, ptr %837, align 8, !tbaa !36
  %845 = zext i16 %844 to i32
  %846 = add nuw nsw i32 %845, 64
  %847 = sub nsw i32 63, %845
  %848 = select i1 %843, i32 %847, i32 %846
  %849 = uitofp i64 %840 to double
  %850 = fmul double %849, 3.125000e-02
  %851 = fcmp ogt double %850, 1.000000e+00
  %852 = sext i32 %848 to i64
  %853 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %852
  %854 = load double, ptr %853, align 8, !tbaa !20
  %855 = fneg double %850
  %856 = select i1 %851, double -1.000000e+00, double %855
  %857 = fmul double %854, %856
  %858 = tail call double @llvm.fmuladd.f64(double %857, double %452, double 0.000000e+00)
  %859 = sub nsw i32 127, %848
  %860 = sext i32 %859 to i64
  %861 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %860
  %862 = load double, ptr %861, align 8, !tbaa !20
  %863 = fmul double %856, %862
  %864 = tail call double @llvm.fmuladd.f64(double %863, double %453, double %858)
  br label %908

865:                                              ; preds = %834
  %866 = getelementptr inbounds [3 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_P, i64 0, i64 %445, i64 0, i64 %835
  %867 = getelementptr inbounds i8, ptr %837, i64 8
  %868 = load i64, ptr %867, align 8, !tbaa !32
  %869 = load i32, ptr %866, align 4, !tbaa !19
  %870 = getelementptr inbounds i8, ptr %866, i64 4
  %871 = load i32, ptr %870, align 4, !tbaa !19
  %872 = getelementptr inbounds i8, ptr %837, i64 2
  %873 = load i8, ptr %872, align 2, !tbaa !35
  %874 = icmp eq i8 %873, 0
  %875 = load i16, ptr %837, align 8, !tbaa !36
  %876 = zext i16 %875 to i32
  %877 = add nuw nsw i32 %876, 64
  %878 = sub nsw i32 63, %876
  %879 = select i1 %874, i32 %878, i32 %877
  %880 = uitofp i64 %868 to double
  %881 = fmul double %880, 3.125000e-02
  %882 = fcmp ogt double %881, 1.000000e+00
  %883 = mul nsw i32 %869, %833
  %884 = ashr i32 %883, 4
  %885 = add nsw i32 %884, %871
  %886 = tail call i32 @llvm.smax.i32(i32 %885, i32 0)
  %887 = tail call i32 @llvm.umin.i32(i32 %886, i32 127)
  %888 = sext i32 %879 to i64
  %889 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %888
  %890 = load double, ptr %889, align 8, !tbaa !20
  %891 = zext nneg i32 %887 to i64
  %892 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %891
  %893 = load double, ptr %892, align 8, !tbaa !20
  %894 = fneg double %881
  %895 = select i1 %882, double -1.000000e+00, double %894
  %896 = fmul double %895, %890
  %897 = tail call double @llvm.fmuladd.f64(double %896, double %893, double 0.000000e+00)
  %898 = sub nsw i32 127, %879
  %899 = sext i32 %898 to i64
  %900 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %899
  %901 = load double, ptr %900, align 8, !tbaa !20
  %902 = xor i32 %887, 127
  %903 = zext nneg i32 %902 to i64
  %904 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %903
  %905 = load double, ptr %904, align 8, !tbaa !20
  %906 = fmul double %895, %901
  %907 = tail call double @llvm.fmuladd.f64(double %906, double %905, double %897)
  br label %908

908:                                              ; preds = %838, %865
  %909 = phi double [ %864, %838 ], [ %907, %865 ]
  %910 = fadd double %836, %909
  %911 = add nuw nsw i64 %835, 1
  %912 = icmp eq i64 %911, 6
  br i1 %912, label %913, label %834

913:                                              ; preds = %908, %987
  %914 = phi i64 [ %990, %987 ], [ 0, %908 ]
  %915 = phi double [ %989, %987 ], [ %910, %908 ]
  %916 = getelementptr inbounds [2 x [6 x %struct.BiContextType]], ptr %11, i64 0, i64 1, i64 %914
  br i1 %448, label %960, label %917

917:                                              ; preds = %913
  %918 = getelementptr inbounds [3 x [2 x [6 x [2 x i32]]]], ptr @INIT_REF_NO_P, i64 0, i64 %445, i64 1, i64 %914
  %919 = getelementptr inbounds i8, ptr %916, i64 8
  %920 = load i64, ptr %919, align 8, !tbaa !32
  %921 = load i32, ptr %918, align 4, !tbaa !19
  %922 = getelementptr inbounds i8, ptr %918, i64 4
  %923 = load i32, ptr %922, align 4, !tbaa !19
  %924 = getelementptr inbounds i8, ptr %916, i64 2
  %925 = load i8, ptr %924, align 2, !tbaa !35
  %926 = icmp eq i8 %925, 0
  %927 = load i16, ptr %916, align 8, !tbaa !36
  %928 = zext i16 %927 to i32
  %929 = add nuw nsw i32 %928, 64
  %930 = sub nsw i32 63, %928
  %931 = select i1 %926, i32 %930, i32 %929
  %932 = uitofp i64 %920 to double
  %933 = fmul double %932, 3.125000e-02
  %934 = fcmp ogt double %933, 1.000000e+00
  %935 = mul nsw i32 %921, %833
  %936 = ashr i32 %935, 4
  %937 = add nsw i32 %936, %923
  %938 = tail call i32 @llvm.smax.i32(i32 %937, i32 0)
  %939 = tail call i32 @llvm.umin.i32(i32 %938, i32 127)
  %940 = sext i32 %931 to i64
  %941 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %940
  %942 = load double, ptr %941, align 8, !tbaa !20
  %943 = zext nneg i32 %939 to i64
  %944 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %943
  %945 = load double, ptr %944, align 8, !tbaa !20
  %946 = fneg double %933
  %947 = select i1 %934, double -1.000000e+00, double %946
  %948 = fmul double %947, %942
  %949 = tail call double @llvm.fmuladd.f64(double %948, double %945, double 0.000000e+00)
  %950 = sub nsw i32 127, %931
  %951 = sext i32 %950 to i64
  %952 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %951
  %953 = load double, ptr %952, align 8, !tbaa !20
  %954 = xor i32 %939, 127
  %955 = zext nneg i32 %954 to i64
  %956 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %955
  %957 = load double, ptr %956, align 8, !tbaa !20
  %958 = fmul double %947, %953
  %959 = tail call double @llvm.fmuladd.f64(double %958, double %957, double %949)
  br label %987

960:                                              ; preds = %913
  %961 = getelementptr inbounds i8, ptr %916, i64 8
  %962 = load i64, ptr %961, align 8, !tbaa !32
  %963 = getelementptr inbounds i8, ptr %916, i64 2
  %964 = load i8, ptr %963, align 2, !tbaa !35
  %965 = icmp eq i8 %964, 0
  %966 = load i16, ptr %916, align 8, !tbaa !36
  %967 = zext i16 %966 to i32
  %968 = add nuw nsw i32 %967, 64
  %969 = sub nsw i32 63, %967
  %970 = select i1 %965, i32 %969, i32 %968
  %971 = uitofp i64 %962 to double
  %972 = fmul double %971, 3.125000e-02
  %973 = fcmp ogt double %972, 1.000000e+00
  %974 = sext i32 %970 to i64
  %975 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %974
  %976 = load double, ptr %975, align 8, !tbaa !20
  %977 = fneg double %972
  %978 = select i1 %973, double -1.000000e+00, double %977
  %979 = fmul double %976, %978
  %980 = tail call double @llvm.fmuladd.f64(double %979, double %452, double 0.000000e+00)
  %981 = sub nsw i32 127, %970
  %982 = sext i32 %981 to i64
  %983 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %982
  %984 = load double, ptr %983, align 8, !tbaa !20
  %985 = fmul double %978, %984
  %986 = tail call double @llvm.fmuladd.f64(double %985, double %453, double %980)
  br label %987

987:                                              ; preds = %960, %917
  %988 = phi double [ %986, %960 ], [ %959, %917 ]
  %989 = fadd double %915, %988
  %990 = add nuw nsw i64 %914, 1
  %991 = icmp eq i64 %990, 6
  br i1 %991, label %992, label %913

992:                                              ; preds = %987
  %993 = getelementptr inbounds [1 x [1 x [4 x [2 x i32]]]], ptr @INIT_CIPR_I, i64 0, i64 %445
  %994 = getelementptr inbounds [3 x [1 x [4 x [2 x i32]]]], ptr @INIT_CIPR_P, i64 0, i64 %445
  %995 = getelementptr inbounds [1 x [1 x [4 x [2 x i32]]]], ptr getelementptr inbounds (i8, ptr @INIT_DELTA_QP_I, i64 4), i64 0, i64 %445
  %996 = getelementptr inbounds [3 x [1 x [4 x [2 x i32]]]], ptr getelementptr inbounds (i8, ptr @INIT_DELTA_QP_P, i64 4), i64 0, i64 %445
  %997 = select i1 %448, ptr %995, ptr %996
  %998 = load i32, ptr %997, align 4, !tbaa !19
  %999 = tail call i32 @llvm.smax.i32(i32 %998, i32 0)
  %1000 = tail call i32 @llvm.umin.i32(i32 %999, i32 127)
  %1001 = xor i32 %1000, 127
  %1002 = zext nneg i32 %1001 to i64
  %1003 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1002
  %1004 = load double, ptr %1003, align 8, !tbaa !20
  %1005 = zext nneg i32 %1000 to i64
  %1006 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1005
  %1007 = load double, ptr %1006, align 8, !tbaa !20
  %1008 = tail call double @llvm.fmuladd.f64(double %47, double %1007, double 0.000000e+00)
  %1009 = tail call double @llvm.fmuladd.f64(double %43, double %1004, double %1008)
  %1010 = fadd double %989, %1009
  %1011 = select i1 %448, ptr %995, ptr %996
  %1012 = getelementptr inbounds i8, ptr %1011, i64 8
  %1013 = load i32, ptr %1012, align 4, !tbaa !19
  %1014 = tail call i32 @llvm.smax.i32(i32 %1013, i32 0)
  %1015 = tail call i32 @llvm.umin.i32(i32 %1014, i32 127)
  %1016 = xor i32 %1015, 127
  %1017 = zext nneg i32 %1016 to i64
  %1018 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1017
  %1019 = load double, ptr %1018, align 8, !tbaa !20
  %1020 = zext nneg i32 %1015 to i64
  %1021 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1020
  %1022 = load double, ptr %1021, align 8, !tbaa !20
  %1023 = tail call double @llvm.fmuladd.f64(double %72, double %1022, double 0.000000e+00)
  %1024 = tail call double @llvm.fmuladd.f64(double %68, double %1019, double %1023)
  %1025 = fadd double %1010, %1024
  %1026 = select i1 %448, ptr %995, ptr %996
  %1027 = getelementptr inbounds i8, ptr %1026, i64 16
  %1028 = load i32, ptr %1027, align 4, !tbaa !19
  %1029 = tail call i32 @llvm.smax.i32(i32 %1028, i32 0)
  %1030 = tail call i32 @llvm.umin.i32(i32 %1029, i32 127)
  %1031 = xor i32 %1030, 127
  %1032 = zext nneg i32 %1031 to i64
  %1033 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1032
  %1034 = load double, ptr %1033, align 8, !tbaa !20
  %1035 = zext nneg i32 %1030 to i64
  %1036 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1035
  %1037 = load double, ptr %1036, align 8, !tbaa !20
  %1038 = tail call double @llvm.fmuladd.f64(double %97, double %1037, double 0.000000e+00)
  %1039 = tail call double @llvm.fmuladd.f64(double %93, double %1034, double %1038)
  %1040 = fadd double %1025, %1039
  %1041 = select i1 %448, ptr %995, ptr %996
  %1042 = getelementptr inbounds i8, ptr %1041, i64 24
  %1043 = load i32, ptr %1042, align 4, !tbaa !19
  %1044 = tail call i32 @llvm.smax.i32(i32 %1043, i32 0)
  %1045 = tail call i32 @llvm.umin.i32(i32 %1044, i32 127)
  %1046 = xor i32 %1045, 127
  %1047 = zext nneg i32 %1046 to i64
  %1048 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1047
  %1049 = load double, ptr %1048, align 8, !tbaa !20
  %1050 = zext nneg i32 %1045 to i64
  %1051 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1050
  %1052 = load double, ptr %1051, align 8, !tbaa !20
  %1053 = tail call double @llvm.fmuladd.f64(double %122, double %1052, double 0.000000e+00)
  %1054 = tail call double @llvm.fmuladd.f64(double %118, double %1049, double %1053)
  %1055 = fadd double %1040, %1054
  %1056 = getelementptr inbounds [1 x [1 x [4 x [2 x i32]]]], ptr @INIT_MB_AFF_I, i64 0, i64 %445
  %1057 = getelementptr inbounds [3 x [1 x [4 x [2 x i32]]]], ptr @INIT_MB_AFF_P, i64 0, i64 %445
  %1058 = select i1 %448, ptr %1056, ptr %1057
  %1059 = load i32, ptr %1058, align 4, !tbaa !19
  %1060 = tail call i32 @llvm.smax.i32(i32 %449, i32 0)
  %1061 = mul nsw i32 %1059, %1060
  %1062 = ashr i32 %1061, 4
  %1063 = getelementptr inbounds i8, ptr %1058, i64 4
  %1064 = load i32, ptr %1063, align 4, !tbaa !19
  %1065 = add nsw i32 %1062, %1064
  %1066 = tail call i32 @llvm.smax.i32(i32 %1065, i32 0)
  %1067 = tail call i32 @llvm.umin.i32(i32 %1066, i32 127)
  %1068 = xor i32 %1067, 127
  %1069 = zext nneg i32 %1068 to i64
  %1070 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1069
  %1071 = load double, ptr %1070, align 8, !tbaa !20
  %1072 = zext nneg i32 %1067 to i64
  %1073 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1072
  %1074 = load double, ptr %1073, align 8, !tbaa !20
  %1075 = tail call double @llvm.fmuladd.f64(double %146, double %1074, double 0.000000e+00)
  %1076 = tail call double @llvm.fmuladd.f64(double %142, double %1071, double %1075)
  %1077 = fadd double %1055, %1076
  %1078 = select i1 %448, ptr %1056, ptr %1057
  %1079 = getelementptr inbounds i8, ptr %1078, i64 8
  %1080 = load i32, ptr %1079, align 4, !tbaa !19
  %1081 = tail call i32 @llvm.smax.i32(i32 %449, i32 0)
  %1082 = mul nsw i32 %1080, %1081
  %1083 = ashr i32 %1082, 4
  %1084 = getelementptr inbounds i8, ptr %1078, i64 12
  %1085 = load i32, ptr %1084, align 4, !tbaa !19
  %1086 = add nsw i32 %1083, %1085
  %1087 = tail call i32 @llvm.smax.i32(i32 %1086, i32 0)
  %1088 = tail call i32 @llvm.umin.i32(i32 %1087, i32 127)
  %1089 = xor i32 %1088, 127
  %1090 = zext nneg i32 %1089 to i64
  %1091 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1090
  %1092 = load double, ptr %1091, align 8, !tbaa !20
  %1093 = zext nneg i32 %1088 to i64
  %1094 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1093
  %1095 = load double, ptr %1094, align 8, !tbaa !20
  %1096 = tail call double @llvm.fmuladd.f64(double %171, double %1095, double 0.000000e+00)
  %1097 = tail call double @llvm.fmuladd.f64(double %167, double %1092, double %1096)
  %1098 = fadd double %1077, %1097
  %1099 = select i1 %448, ptr %1056, ptr %1057
  %1100 = getelementptr inbounds i8, ptr %1099, i64 16
  %1101 = load i32, ptr %1100, align 4, !tbaa !19
  %1102 = tail call i32 @llvm.smax.i32(i32 %449, i32 0)
  %1103 = mul nsw i32 %1101, %1102
  %1104 = ashr i32 %1103, 4
  %1105 = getelementptr inbounds i8, ptr %1099, i64 20
  %1106 = load i32, ptr %1105, align 4, !tbaa !19
  %1107 = add nsw i32 %1104, %1106
  %1108 = tail call i32 @llvm.smax.i32(i32 %1107, i32 0)
  %1109 = tail call i32 @llvm.umin.i32(i32 %1108, i32 127)
  %1110 = xor i32 %1109, 127
  %1111 = zext nneg i32 %1110 to i64
  %1112 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1111
  %1113 = load double, ptr %1112, align 8, !tbaa !20
  %1114 = zext nneg i32 %1109 to i64
  %1115 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1114
  %1116 = load double, ptr %1115, align 8, !tbaa !20
  %1117 = tail call double @llvm.fmuladd.f64(double %196, double %1116, double 0.000000e+00)
  %1118 = tail call double @llvm.fmuladd.f64(double %192, double %1113, double %1117)
  %1119 = fadd double %1098, %1118
  %1120 = select i1 %448, ptr %1056, ptr %1057
  %1121 = getelementptr inbounds i8, ptr %1120, i64 24
  %1122 = load i32, ptr %1121, align 4, !tbaa !19
  %1123 = tail call i32 @llvm.smax.i32(i32 %449, i32 0)
  %1124 = mul nsw i32 %1122, %1123
  %1125 = ashr i32 %1124, 4
  %1126 = getelementptr inbounds i8, ptr %1120, i64 28
  %1127 = load i32, ptr %1126, align 4, !tbaa !19
  %1128 = add nsw i32 %1125, %1127
  %1129 = tail call i32 @llvm.smax.i32(i32 %1128, i32 0)
  %1130 = tail call i32 @llvm.umin.i32(i32 %1129, i32 127)
  %1131 = xor i32 %1130, 127
  %1132 = zext nneg i32 %1131 to i64
  %1133 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1132
  %1134 = load double, ptr %1133, align 8, !tbaa !20
  %1135 = zext nneg i32 %1130 to i64
  %1136 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1135
  %1137 = load double, ptr %1136, align 8, !tbaa !20
  %1138 = tail call double @llvm.fmuladd.f64(double %221, double %1137, double 0.000000e+00)
  %1139 = tail call double @llvm.fmuladd.f64(double %217, double %1134, double %1138)
  %1140 = fadd double %1119, %1139
  %1141 = getelementptr inbounds [1 x [1 x [3 x [2 x i32]]]], ptr @INIT_TRANSFORM_SIZE_I, i64 0, i64 %445
  %1142 = getelementptr inbounds [3 x [1 x [3 x [2 x i32]]]], ptr @INIT_TRANSFORM_SIZE_P, i64 0, i64 %445
  %1143 = select i1 %448, ptr %1141, ptr %1142
  %1144 = load i32, ptr %1143, align 4, !tbaa !19
  %1145 = tail call i32 @llvm.smax.i32(i32 %449, i32 0)
  %1146 = mul nsw i32 %1144, %1145
  %1147 = ashr i32 %1146, 4
  %1148 = getelementptr inbounds i8, ptr %1143, i64 4
  %1149 = load i32, ptr %1148, align 4, !tbaa !19
  %1150 = add nsw i32 %1147, %1149
  %1151 = tail call i32 @llvm.smax.i32(i32 %1150, i32 0)
  %1152 = tail call i32 @llvm.umin.i32(i32 %1151, i32 127)
  %1153 = xor i32 %1152, 127
  %1154 = zext nneg i32 %1153 to i64
  %1155 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1154
  %1156 = load double, ptr %1155, align 8, !tbaa !20
  %1157 = zext nneg i32 %1152 to i64
  %1158 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1157
  %1159 = load double, ptr %1158, align 8, !tbaa !20
  %1160 = tail call double @llvm.fmuladd.f64(double %245, double %1159, double 0.000000e+00)
  %1161 = tail call double @llvm.fmuladd.f64(double %241, double %1156, double %1160)
  %1162 = fadd double %1140, %1161
  %1163 = select i1 %448, ptr %1141, ptr %1142
  %1164 = getelementptr inbounds i8, ptr %1163, i64 8
  %1165 = load i32, ptr %1164, align 4, !tbaa !19
  %1166 = tail call i32 @llvm.smax.i32(i32 %449, i32 0)
  %1167 = mul nsw i32 %1165, %1166
  %1168 = ashr i32 %1167, 4
  %1169 = getelementptr inbounds i8, ptr %1163, i64 12
  %1170 = load i32, ptr %1169, align 4, !tbaa !19
  %1171 = add nsw i32 %1168, %1170
  %1172 = tail call i32 @llvm.smax.i32(i32 %1171, i32 0)
  %1173 = tail call i32 @llvm.umin.i32(i32 %1172, i32 127)
  %1174 = xor i32 %1173, 127
  %1175 = zext nneg i32 %1174 to i64
  %1176 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1175
  %1177 = load double, ptr %1176, align 8, !tbaa !20
  %1178 = zext nneg i32 %1173 to i64
  %1179 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1178
  %1180 = load double, ptr %1179, align 8, !tbaa !20
  %1181 = tail call double @llvm.fmuladd.f64(double %270, double %1180, double 0.000000e+00)
  %1182 = tail call double @llvm.fmuladd.f64(double %266, double %1177, double %1181)
  %1183 = fadd double %1162, %1182
  %1184 = select i1 %448, ptr %1141, ptr %1142
  %1185 = getelementptr inbounds i8, ptr %1184, i64 16
  %1186 = load i32, ptr %1185, align 4, !tbaa !19
  %1187 = tail call i32 @llvm.smax.i32(i32 %449, i32 0)
  %1188 = mul nsw i32 %1186, %1187
  %1189 = ashr i32 %1188, 4
  %1190 = getelementptr inbounds i8, ptr %1184, i64 20
  %1191 = load i32, ptr %1190, align 4, !tbaa !19
  %1192 = add nsw i32 %1189, %1191
  %1193 = tail call i32 @llvm.smax.i32(i32 %1192, i32 0)
  %1194 = tail call i32 @llvm.umin.i32(i32 %1193, i32 127)
  %1195 = xor i32 %1194, 127
  %1196 = zext nneg i32 %1195 to i64
  %1197 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1196
  %1198 = load double, ptr %1197, align 8, !tbaa !20
  %1199 = zext nneg i32 %1194 to i64
  %1200 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1199
  %1201 = load double, ptr %1200, align 8, !tbaa !20
  %1202 = tail call double @llvm.fmuladd.f64(double %295, double %1201, double 0.000000e+00)
  %1203 = tail call double @llvm.fmuladd.f64(double %291, double %1198, double %1202)
  %1204 = fadd double %1183, %1203
  %1205 = getelementptr inbounds [1 x [1 x [2 x [2 x i32]]]], ptr @INIT_IPR_I, i64 0, i64 %445
  %1206 = getelementptr inbounds [3 x [1 x [2 x [2 x i32]]]], ptr @INIT_IPR_P, i64 0, i64 %445
  %1207 = select i1 %448, ptr %1205, ptr %1206
  %1208 = load i32, ptr %1207, align 4, !tbaa !19
  %1209 = tail call i32 @llvm.smax.i32(i32 %449, i32 0)
  %1210 = mul nsw i32 %1208, %1209
  %1211 = ashr i32 %1210, 4
  %1212 = getelementptr inbounds i8, ptr %1207, i64 4
  %1213 = load i32, ptr %1212, align 4, !tbaa !19
  %1214 = add nsw i32 %1211, %1213
  %1215 = tail call i32 @llvm.smax.i32(i32 %1214, i32 0)
  %1216 = tail call i32 @llvm.umin.i32(i32 %1215, i32 127)
  %1217 = xor i32 %1216, 127
  %1218 = zext nneg i32 %1217 to i64
  %1219 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1218
  %1220 = load double, ptr %1219, align 8, !tbaa !20
  %1221 = zext nneg i32 %1216 to i64
  %1222 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1221
  %1223 = load double, ptr %1222, align 8, !tbaa !20
  %1224 = tail call double @llvm.fmuladd.f64(double %319, double %1223, double 0.000000e+00)
  %1225 = tail call double @llvm.fmuladd.f64(double %315, double %1220, double %1224)
  %1226 = fadd double %1204, %1225
  %1227 = select i1 %448, ptr %1205, ptr %1206
  %1228 = getelementptr inbounds i8, ptr %1227, i64 8
  %1229 = load i32, ptr %1228, align 4, !tbaa !19
  %1230 = tail call i32 @llvm.smax.i32(i32 %449, i32 0)
  %1231 = mul nsw i32 %1229, %1230
  %1232 = ashr i32 %1231, 4
  %1233 = getelementptr inbounds i8, ptr %1227, i64 12
  %1234 = load i32, ptr %1233, align 4, !tbaa !19
  %1235 = add nsw i32 %1232, %1234
  %1236 = tail call i32 @llvm.smax.i32(i32 %1235, i32 0)
  %1237 = tail call i32 @llvm.umin.i32(i32 %1236, i32 127)
  %1238 = xor i32 %1237, 127
  %1239 = zext nneg i32 %1238 to i64
  %1240 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1239
  %1241 = load double, ptr %1240, align 8, !tbaa !20
  %1242 = zext nneg i32 %1237 to i64
  %1243 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1242
  %1244 = load double, ptr %1243, align 8, !tbaa !20
  %1245 = tail call double @llvm.fmuladd.f64(double %344, double %1244, double 0.000000e+00)
  %1246 = tail call double @llvm.fmuladd.f64(double %340, double %1241, double %1245)
  %1247 = fadd double %1226, %1246
  %1248 = select i1 %448, ptr %993, ptr %994
  %1249 = tail call i32 @llvm.smax.i32(i32 %449, i32 0)
  %1250 = load i32, ptr %1248, align 4, !tbaa !19
  %1251 = getelementptr inbounds i8, ptr %1248, i64 4
  %1252 = load i32, ptr %1251, align 4, !tbaa !19
  %1253 = mul nsw i32 %1250, %1249
  %1254 = ashr i32 %1253, 4
  %1255 = add nsw i32 %1254, %1252
  %1256 = tail call i32 @llvm.smax.i32(i32 %1255, i32 0)
  %1257 = tail call i32 @llvm.umin.i32(i32 %1256, i32 127)
  %1258 = zext nneg i32 %1257 to i64
  %1259 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1258
  %1260 = load double, ptr %1259, align 8, !tbaa !20
  %1261 = tail call double @llvm.fmuladd.f64(double %363, double %1260, double 0.000000e+00)
  %1262 = xor i32 %1257, 127
  %1263 = zext nneg i32 %1262 to i64
  %1264 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1263
  %1265 = load double, ptr %1264, align 8, !tbaa !20
  %1266 = tail call double @llvm.fmuladd.f64(double %368, double %1265, double %1261)
  %1267 = fadd double %1247, %1266
  %1268 = select i1 %448, ptr %993, ptr %994
  %1269 = tail call i32 @llvm.smax.i32(i32 %449, i32 0)
  %1270 = getelementptr inbounds i8, ptr %1268, i64 8
  %1271 = load i32, ptr %1270, align 4, !tbaa !19
  %1272 = getelementptr inbounds i8, ptr %1268, i64 12
  %1273 = load i32, ptr %1272, align 4, !tbaa !19
  %1274 = mul nsw i32 %1271, %1269
  %1275 = ashr i32 %1274, 4
  %1276 = add nsw i32 %1275, %1273
  %1277 = tail call i32 @llvm.smax.i32(i32 %1276, i32 0)
  %1278 = tail call i32 @llvm.umin.i32(i32 %1277, i32 127)
  %1279 = zext nneg i32 %1278 to i64
  %1280 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1279
  %1281 = load double, ptr %1280, align 8, !tbaa !20
  %1282 = tail call double @llvm.fmuladd.f64(double %388, double %1281, double 0.000000e+00)
  %1283 = xor i32 %1278, 127
  %1284 = zext nneg i32 %1283 to i64
  %1285 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1284
  %1286 = load double, ptr %1285, align 8, !tbaa !20
  %1287 = tail call double @llvm.fmuladd.f64(double %393, double %1286, double %1282)
  %1288 = fadd double %1267, %1287
  %1289 = select i1 %448, ptr %993, ptr %994
  %1290 = tail call i32 @llvm.smax.i32(i32 %449, i32 0)
  %1291 = getelementptr inbounds i8, ptr %1289, i64 16
  %1292 = load i32, ptr %1291, align 4, !tbaa !19
  %1293 = getelementptr inbounds i8, ptr %1289, i64 20
  %1294 = load i32, ptr %1293, align 4, !tbaa !19
  %1295 = mul nsw i32 %1292, %1290
  %1296 = ashr i32 %1295, 4
  %1297 = add nsw i32 %1296, %1294
  %1298 = tail call i32 @llvm.smax.i32(i32 %1297, i32 0)
  %1299 = tail call i32 @llvm.umin.i32(i32 %1298, i32 127)
  %1300 = zext nneg i32 %1299 to i64
  %1301 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1300
  %1302 = load double, ptr %1301, align 8, !tbaa !20
  %1303 = tail call double @llvm.fmuladd.f64(double %413, double %1302, double 0.000000e+00)
  %1304 = xor i32 %1299, 127
  %1305 = zext nneg i32 %1304 to i64
  %1306 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1305
  %1307 = load double, ptr %1306, align 8, !tbaa !20
  %1308 = tail call double @llvm.fmuladd.f64(double %418, double %1307, double %1303)
  %1309 = fadd double %1288, %1308
  %1310 = select i1 %448, ptr %993, ptr %994
  %1311 = tail call i32 @llvm.smax.i32(i32 %449, i32 0)
  %1312 = getelementptr inbounds i8, ptr %1310, i64 24
  %1313 = load i32, ptr %1312, align 4, !tbaa !19
  %1314 = getelementptr inbounds i8, ptr %1310, i64 28
  %1315 = load i32, ptr %1314, align 4, !tbaa !19
  %1316 = mul nsw i32 %1313, %1311
  %1317 = ashr i32 %1316, 4
  %1318 = add nsw i32 %1317, %1315
  %1319 = tail call i32 @llvm.smax.i32(i32 %1318, i32 0)
  %1320 = tail call i32 @llvm.umin.i32(i32 %1319, i32 127)
  %1321 = zext nneg i32 %1320 to i64
  %1322 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1321
  %1323 = load double, ptr %1322, align 8, !tbaa !20
  %1324 = tail call double @llvm.fmuladd.f64(double %438, double %1323, double 0.000000e+00)
  %1325 = xor i32 %1320, 127
  %1326 = zext nneg i32 %1325 to i64
  %1327 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1326
  %1328 = load double, ptr %1327, align 8, !tbaa !20
  %1329 = tail call double @llvm.fmuladd.f64(double %443, double %1328, double %1324)
  %1330 = fadd double %1309, %1329
  %1331 = tail call i32 @llvm.smax.i32(i32 %449, i32 0)
  %1332 = tail call i32 @llvm.smax.i32(i32 %449, i32 0)
  br label %1336

1333:                                             ; preds = %1397
  %1334 = tail call i32 @llvm.smax.i32(i32 %449, i32 0)
  %1335 = tail call i32 @llvm.smax.i32(i32 %449, i32 0)
  br label %1403

1336:                                             ; preds = %992, %1397
  %1337 = phi i64 [ 0, %992 ], [ %1398, %1397 ]
  %1338 = phi double [ %1330, %992 ], [ %1394, %1397 ]
  br label %1339

1339:                                             ; preds = %1336, %1377
  %1340 = phi i64 [ 0, %1336 ], [ %1395, %1377 ]
  %1341 = phi double [ %1338, %1336 ], [ %1394, %1377 ]
  %1342 = getelementptr inbounds [3 x [4 x %struct.BiContextType]], ptr %16, i64 0, i64 %1337, i64 %1340
  %1343 = getelementptr inbounds i8, ptr %1342, i64 8
  %1344 = load i64, ptr %1343, align 8, !tbaa !32
  %1345 = getelementptr inbounds i8, ptr %1342, i64 2
  %1346 = load i8, ptr %1345, align 2, !tbaa !35
  %1347 = icmp eq i8 %1346, 0
  %1348 = load i16, ptr %1342, align 8, !tbaa !36
  %1349 = zext i16 %1348 to i32
  %1350 = add nuw nsw i32 %1349, 64
  %1351 = sub nsw i32 63, %1349
  %1352 = select i1 %1347, i32 %1351, i32 %1350
  %1353 = uitofp i64 %1344 to double
  %1354 = fmul double %1353, 3.125000e-02
  %1355 = fcmp ogt double %1354, 1.000000e+00
  %1356 = sext i32 %1352 to i64
  %1357 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1356
  %1358 = load double, ptr %1357, align 8, !tbaa !20
  %1359 = fneg double %1354
  %1360 = select i1 %1355, double -1.000000e+00, double %1359
  %1361 = fmul double %1360, %1358
  %1362 = sub nsw i32 127, %1352
  %1363 = sext i32 %1362 to i64
  %1364 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1363
  %1365 = load double, ptr %1364, align 8, !tbaa !20
  %1366 = fmul double %1360, %1365
  br i1 %448, label %1367, label %1372

1367:                                             ; preds = %1339
  %1368 = getelementptr inbounds [1 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_I, i64 0, i64 0, i64 %1337, i64 %1340
  %1369 = load i32, ptr %1368, align 4, !tbaa !19
  %1370 = getelementptr inbounds [1 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_I, i64 0, i64 0, i64 %1337, i64 %1340, i64 1
  %1371 = mul nsw i32 %1369, %1332
  br label %1377

1372:                                             ; preds = %1339
  %1373 = getelementptr inbounds [3 x [3 x [4 x [2 x i32]]]], ptr @INIT_CBP_P, i64 0, i64 %445, i64 %1337, i64 %1340
  %1374 = load i32, ptr %1373, align 4, !tbaa !19
  %1375 = getelementptr inbounds i8, ptr %1373, i64 4
  %1376 = mul nsw i32 %1374, %1331
  br label %1377

1377:                                             ; preds = %1367, %1372
  %1378 = phi i32 [ %1371, %1367 ], [ %1376, %1372 ]
  %1379 = phi ptr [ %1370, %1367 ], [ %1375, %1372 ]
  %1380 = load i32, ptr %1379, align 4, !tbaa !19
  %1381 = ashr i32 %1378, 4
  %1382 = add nsw i32 %1381, %1380
  %1383 = tail call i32 @llvm.smax.i32(i32 %1382, i32 0)
  %1384 = tail call i32 @llvm.umin.i32(i32 %1383, i32 127)
  %1385 = zext nneg i32 %1384 to i64
  %1386 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1385
  %1387 = load double, ptr %1386, align 8, !tbaa !20
  %1388 = tail call double @llvm.fmuladd.f64(double %1361, double %1387, double 0.000000e+00)
  %1389 = xor i32 %1384, 127
  %1390 = zext nneg i32 %1389 to i64
  %1391 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1390
  %1392 = load double, ptr %1391, align 8, !tbaa !20
  %1393 = tail call double @llvm.fmuladd.f64(double %1366, double %1392, double %1388)
  %1394 = fadd double %1341, %1393
  %1395 = add nuw nsw i64 %1340, 1
  %1396 = icmp eq i64 %1395, 4
  br i1 %1396, label %1397, label %1339

1397:                                             ; preds = %1377
  %1398 = add nuw nsw i64 %1337, 1
  %1399 = icmp eq i64 %1398, 3
  br i1 %1399, label %1333, label %1336

1400:                                             ; preds = %1464
  %1401 = tail call i32 @llvm.smax.i32(i32 %449, i32 0)
  %1402 = tail call i32 @llvm.smax.i32(i32 %449, i32 0)
  br label %1470

1403:                                             ; preds = %1333, %1464
  %1404 = phi i64 [ 0, %1333 ], [ %1465, %1464 ]
  %1405 = phi double [ %1394, %1333 ], [ %1461, %1464 ]
  br label %1406

1406:                                             ; preds = %1403, %1444
  %1407 = phi i64 [ 0, %1403 ], [ %1462, %1444 ]
  %1408 = phi double [ %1405, %1403 ], [ %1461, %1444 ]
  %1409 = getelementptr inbounds [10 x [4 x %struct.BiContextType]], ptr %17, i64 0, i64 %1404, i64 %1407
  %1410 = getelementptr inbounds i8, ptr %1409, i64 8
  %1411 = load i64, ptr %1410, align 8, !tbaa !32
  %1412 = getelementptr inbounds i8, ptr %1409, i64 2
  %1413 = load i8, ptr %1412, align 2, !tbaa !35
  %1414 = icmp eq i8 %1413, 0
  %1415 = load i16, ptr %1409, align 8, !tbaa !36
  %1416 = zext i16 %1415 to i32
  %1417 = add nuw nsw i32 %1416, 64
  %1418 = sub nsw i32 63, %1416
  %1419 = select i1 %1414, i32 %1418, i32 %1417
  %1420 = uitofp i64 %1411 to double
  %1421 = fmul double %1420, 3.125000e-02
  %1422 = fcmp ogt double %1421, 1.000000e+00
  %1423 = sext i32 %1419 to i64
  %1424 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1423
  %1425 = load double, ptr %1424, align 8, !tbaa !20
  %1426 = fneg double %1421
  %1427 = select i1 %1422, double -1.000000e+00, double %1426
  %1428 = fmul double %1427, %1425
  %1429 = sub nsw i32 127, %1419
  %1430 = sext i32 %1429 to i64
  %1431 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1430
  %1432 = load double, ptr %1431, align 8, !tbaa !20
  %1433 = fmul double %1427, %1432
  br i1 %448, label %1434, label %1439

1434:                                             ; preds = %1406
  %1435 = getelementptr inbounds [1 x [8 x [4 x [2 x i32]]]], ptr @INIT_BCBP_I, i64 0, i64 0, i64 %1404, i64 %1407
  %1436 = load i32, ptr %1435, align 4, !tbaa !19
  %1437 = getelementptr inbounds [1 x [8 x [4 x [2 x i32]]]], ptr @INIT_BCBP_I, i64 0, i64 0, i64 %1404, i64 %1407, i64 1
  %1438 = mul nsw i32 %1436, %1335
  br label %1444

1439:                                             ; preds = %1406
  %1440 = getelementptr inbounds [3 x [8 x [4 x [2 x i32]]]], ptr @INIT_BCBP_P, i64 0, i64 %445, i64 %1404, i64 %1407
  %1441 = load i32, ptr %1440, align 4, !tbaa !19
  %1442 = getelementptr inbounds i8, ptr %1440, i64 4
  %1443 = mul nsw i32 %1441, %1334
  br label %1444

1444:                                             ; preds = %1434, %1439
  %1445 = phi i32 [ %1438, %1434 ], [ %1443, %1439 ]
  %1446 = phi ptr [ %1437, %1434 ], [ %1442, %1439 ]
  %1447 = load i32, ptr %1446, align 4, !tbaa !19
  %1448 = ashr i32 %1445, 4
  %1449 = add nsw i32 %1448, %1447
  %1450 = tail call i32 @llvm.smax.i32(i32 %1449, i32 0)
  %1451 = tail call i32 @llvm.umin.i32(i32 %1450, i32 127)
  %1452 = zext nneg i32 %1451 to i64
  %1453 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1452
  %1454 = load double, ptr %1453, align 8, !tbaa !20
  %1455 = tail call double @llvm.fmuladd.f64(double %1428, double %1454, double 0.000000e+00)
  %1456 = xor i32 %1451, 127
  %1457 = zext nneg i32 %1456 to i64
  %1458 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1457
  %1459 = load double, ptr %1458, align 8, !tbaa !20
  %1460 = tail call double @llvm.fmuladd.f64(double %1433, double %1459, double %1455)
  %1461 = fadd double %1408, %1460
  %1462 = add nuw nsw i64 %1407, 1
  %1463 = icmp eq i64 %1462, 4
  br i1 %1463, label %1464, label %1406

1464:                                             ; preds = %1444
  %1465 = add nuw nsw i64 %1404, 1
  %1466 = icmp eq i64 %1465, 10
  br i1 %1466, label %1400, label %1403

1467:                                             ; preds = %1531
  %1468 = tail call i32 @llvm.smax.i32(i32 %449, i32 0)
  %1469 = tail call i32 @llvm.smax.i32(i32 %449, i32 0)
  br label %1537

1470:                                             ; preds = %1400, %1531
  %1471 = phi i64 [ 0, %1400 ], [ %1532, %1531 ]
  %1472 = phi double [ %1461, %1400 ], [ %1528, %1531 ]
  br label %1473

1473:                                             ; preds = %1470, %1511
  %1474 = phi i64 [ 0, %1470 ], [ %1529, %1511 ]
  %1475 = phi double [ %1472, %1470 ], [ %1528, %1511 ]
  %1476 = getelementptr inbounds [10 x [15 x %struct.BiContextType]], ptr %18, i64 0, i64 %1471, i64 %1474
  %1477 = getelementptr inbounds i8, ptr %1476, i64 8
  %1478 = load i64, ptr %1477, align 8, !tbaa !32
  %1479 = getelementptr inbounds i8, ptr %1476, i64 2
  %1480 = load i8, ptr %1479, align 2, !tbaa !35
  %1481 = icmp eq i8 %1480, 0
  %1482 = load i16, ptr %1476, align 8, !tbaa !36
  %1483 = zext i16 %1482 to i32
  %1484 = add nuw nsw i32 %1483, 64
  %1485 = sub nsw i32 63, %1483
  %1486 = select i1 %1481, i32 %1485, i32 %1484
  %1487 = uitofp i64 %1478 to double
  %1488 = fmul double %1487, 3.125000e-02
  %1489 = fcmp ogt double %1488, 1.000000e+00
  %1490 = sext i32 %1486 to i64
  %1491 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1490
  %1492 = load double, ptr %1491, align 8, !tbaa !20
  %1493 = fneg double %1488
  %1494 = select i1 %1489, double -1.000000e+00, double %1493
  %1495 = fmul double %1494, %1492
  %1496 = sub nsw i32 127, %1486
  %1497 = sext i32 %1496 to i64
  %1498 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1497
  %1499 = load double, ptr %1498, align 8, !tbaa !20
  %1500 = fmul double %1494, %1499
  br i1 %448, label %1501, label %1506

1501:                                             ; preds = %1473
  %1502 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_MAP_I, i64 0, i64 0, i64 %1471, i64 %1474
  %1503 = load i32, ptr %1502, align 4, !tbaa !19
  %1504 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_MAP_I, i64 0, i64 0, i64 %1471, i64 %1474, i64 1
  %1505 = mul nsw i32 %1503, %1402
  br label %1511

1506:                                             ; preds = %1473
  %1507 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_MAP_P, i64 0, i64 %445, i64 %1471, i64 %1474
  %1508 = load i32, ptr %1507, align 4, !tbaa !19
  %1509 = getelementptr inbounds i8, ptr %1507, i64 4
  %1510 = mul nsw i32 %1508, %1401
  br label %1511

1511:                                             ; preds = %1501, %1506
  %1512 = phi i32 [ %1505, %1501 ], [ %1510, %1506 ]
  %1513 = phi ptr [ %1504, %1501 ], [ %1509, %1506 ]
  %1514 = load i32, ptr %1513, align 4, !tbaa !19
  %1515 = ashr i32 %1512, 4
  %1516 = add nsw i32 %1515, %1514
  %1517 = tail call i32 @llvm.smax.i32(i32 %1516, i32 0)
  %1518 = tail call i32 @llvm.umin.i32(i32 %1517, i32 127)
  %1519 = zext nneg i32 %1518 to i64
  %1520 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1519
  %1521 = load double, ptr %1520, align 8, !tbaa !20
  %1522 = tail call double @llvm.fmuladd.f64(double %1495, double %1521, double 0.000000e+00)
  %1523 = xor i32 %1518, 127
  %1524 = zext nneg i32 %1523 to i64
  %1525 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1524
  %1526 = load double, ptr %1525, align 8, !tbaa !20
  %1527 = tail call double @llvm.fmuladd.f64(double %1500, double %1526, double %1522)
  %1528 = fadd double %1475, %1527
  %1529 = add nuw nsw i64 %1474, 1
  %1530 = icmp eq i64 %1529, 15
  br i1 %1530, label %1531, label %1473

1531:                                             ; preds = %1511
  %1532 = add nuw nsw i64 %1471, 1
  %1533 = icmp eq i64 %1532, 10
  br i1 %1533, label %1467, label %1470

1534:                                             ; preds = %1598
  %1535 = tail call i32 @llvm.smax.i32(i32 %449, i32 0)
  %1536 = tail call i32 @llvm.smax.i32(i32 %449, i32 0)
  br label %1604

1537:                                             ; preds = %1467, %1598
  %1538 = phi i64 [ 0, %1467 ], [ %1599, %1598 ]
  %1539 = phi double [ %1528, %1467 ], [ %1595, %1598 ]
  br label %1540

1540:                                             ; preds = %1537, %1578
  %1541 = phi i64 [ 0, %1537 ], [ %1596, %1578 ]
  %1542 = phi double [ %1539, %1537 ], [ %1595, %1578 ]
  %1543 = getelementptr inbounds [10 x [15 x %struct.BiContextType]], ptr %19, i64 0, i64 %1538, i64 %1541
  %1544 = getelementptr inbounds i8, ptr %1543, i64 8
  %1545 = load i64, ptr %1544, align 8, !tbaa !32
  %1546 = getelementptr inbounds i8, ptr %1543, i64 2
  %1547 = load i8, ptr %1546, align 2, !tbaa !35
  %1548 = icmp eq i8 %1547, 0
  %1549 = load i16, ptr %1543, align 8, !tbaa !36
  %1550 = zext i16 %1549 to i32
  %1551 = add nuw nsw i32 %1550, 64
  %1552 = sub nsw i32 63, %1550
  %1553 = select i1 %1548, i32 %1552, i32 %1551
  %1554 = uitofp i64 %1545 to double
  %1555 = fmul double %1554, 3.125000e-02
  %1556 = fcmp ogt double %1555, 1.000000e+00
  %1557 = sext i32 %1553 to i64
  %1558 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1557
  %1559 = load double, ptr %1558, align 8, !tbaa !20
  %1560 = fneg double %1555
  %1561 = select i1 %1556, double -1.000000e+00, double %1560
  %1562 = fmul double %1561, %1559
  %1563 = sub nsw i32 127, %1553
  %1564 = sext i32 %1563 to i64
  %1565 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1564
  %1566 = load double, ptr %1565, align 8, !tbaa !20
  %1567 = fmul double %1561, %1566
  br i1 %448, label %1568, label %1573

1568:                                             ; preds = %1540
  %1569 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_LAST_I, i64 0, i64 0, i64 %1538, i64 %1541
  %1570 = load i32, ptr %1569, align 4, !tbaa !19
  %1571 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_LAST_I, i64 0, i64 0, i64 %1538, i64 %1541, i64 1
  %1572 = mul nsw i32 %1570, %1469
  br label %1578

1573:                                             ; preds = %1540
  %1574 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_LAST_P, i64 0, i64 %445, i64 %1538, i64 %1541
  %1575 = load i32, ptr %1574, align 4, !tbaa !19
  %1576 = getelementptr inbounds i8, ptr %1574, i64 4
  %1577 = mul nsw i32 %1575, %1468
  br label %1578

1578:                                             ; preds = %1568, %1573
  %1579 = phi i32 [ %1572, %1568 ], [ %1577, %1573 ]
  %1580 = phi ptr [ %1571, %1568 ], [ %1576, %1573 ]
  %1581 = load i32, ptr %1580, align 4, !tbaa !19
  %1582 = ashr i32 %1579, 4
  %1583 = add nsw i32 %1582, %1581
  %1584 = tail call i32 @llvm.smax.i32(i32 %1583, i32 0)
  %1585 = tail call i32 @llvm.umin.i32(i32 %1584, i32 127)
  %1586 = zext nneg i32 %1585 to i64
  %1587 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1586
  %1588 = load double, ptr %1587, align 8, !tbaa !20
  %1589 = tail call double @llvm.fmuladd.f64(double %1562, double %1588, double 0.000000e+00)
  %1590 = xor i32 %1585, 127
  %1591 = zext nneg i32 %1590 to i64
  %1592 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1591
  %1593 = load double, ptr %1592, align 8, !tbaa !20
  %1594 = tail call double @llvm.fmuladd.f64(double %1567, double %1593, double %1589)
  %1595 = fadd double %1542, %1594
  %1596 = add nuw nsw i64 %1541, 1
  %1597 = icmp eq i64 %1596, 15
  br i1 %1597, label %1598, label %1540

1598:                                             ; preds = %1578
  %1599 = add nuw nsw i64 %1538, 1
  %1600 = icmp eq i64 %1599, 10
  br i1 %1600, label %1534, label %1537

1601:                                             ; preds = %1665
  %1602 = tail call i32 @llvm.smax.i32(i32 %449, i32 0)
  %1603 = tail call i32 @llvm.smax.i32(i32 %449, i32 0)
  br label %1671

1604:                                             ; preds = %1534, %1665
  %1605 = phi i64 [ 0, %1534 ], [ %1666, %1665 ]
  %1606 = phi double [ %1595, %1534 ], [ %1662, %1665 ]
  br label %1607

1607:                                             ; preds = %1604, %1645
  %1608 = phi i64 [ 0, %1604 ], [ %1663, %1645 ]
  %1609 = phi double [ %1606, %1604 ], [ %1662, %1645 ]
  %1610 = getelementptr inbounds [10 x [5 x %struct.BiContextType]], ptr %20, i64 0, i64 %1605, i64 %1608
  %1611 = getelementptr inbounds i8, ptr %1610, i64 8
  %1612 = load i64, ptr %1611, align 8, !tbaa !32
  %1613 = getelementptr inbounds i8, ptr %1610, i64 2
  %1614 = load i8, ptr %1613, align 2, !tbaa !35
  %1615 = icmp eq i8 %1614, 0
  %1616 = load i16, ptr %1610, align 8, !tbaa !36
  %1617 = zext i16 %1616 to i32
  %1618 = add nuw nsw i32 %1617, 64
  %1619 = sub nsw i32 63, %1617
  %1620 = select i1 %1615, i32 %1619, i32 %1618
  %1621 = uitofp i64 %1612 to double
  %1622 = fmul double %1621, 3.125000e-02
  %1623 = fcmp ogt double %1622, 1.000000e+00
  %1624 = sext i32 %1620 to i64
  %1625 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1624
  %1626 = load double, ptr %1625, align 8, !tbaa !20
  %1627 = fneg double %1622
  %1628 = select i1 %1623, double -1.000000e+00, double %1627
  %1629 = fmul double %1628, %1626
  %1630 = sub nsw i32 127, %1620
  %1631 = sext i32 %1630 to i64
  %1632 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1631
  %1633 = load double, ptr %1632, align 8, !tbaa !20
  %1634 = fmul double %1628, %1633
  br i1 %448, label %1635, label %1640

1635:                                             ; preds = %1607
  %1636 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ONE_I, i64 0, i64 0, i64 %1605, i64 %1608
  %1637 = load i32, ptr %1636, align 4, !tbaa !19
  %1638 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ONE_I, i64 0, i64 0, i64 %1605, i64 %1608, i64 1
  %1639 = mul nsw i32 %1637, %1536
  br label %1645

1640:                                             ; preds = %1607
  %1641 = getelementptr inbounds [3 x [8 x [5 x [2 x i32]]]], ptr @INIT_ONE_P, i64 0, i64 %445, i64 %1605, i64 %1608
  %1642 = load i32, ptr %1641, align 4, !tbaa !19
  %1643 = getelementptr inbounds i8, ptr %1641, i64 4
  %1644 = mul nsw i32 %1642, %1535
  br label %1645

1645:                                             ; preds = %1635, %1640
  %1646 = phi i32 [ %1639, %1635 ], [ %1644, %1640 ]
  %1647 = phi ptr [ %1638, %1635 ], [ %1643, %1640 ]
  %1648 = load i32, ptr %1647, align 4, !tbaa !19
  %1649 = ashr i32 %1646, 4
  %1650 = add nsw i32 %1649, %1648
  %1651 = tail call i32 @llvm.smax.i32(i32 %1650, i32 0)
  %1652 = tail call i32 @llvm.umin.i32(i32 %1651, i32 127)
  %1653 = zext nneg i32 %1652 to i64
  %1654 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1653
  %1655 = load double, ptr %1654, align 8, !tbaa !20
  %1656 = tail call double @llvm.fmuladd.f64(double %1629, double %1655, double 0.000000e+00)
  %1657 = xor i32 %1652, 127
  %1658 = zext nneg i32 %1657 to i64
  %1659 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1658
  %1660 = load double, ptr %1659, align 8, !tbaa !20
  %1661 = tail call double @llvm.fmuladd.f64(double %1634, double %1660, double %1656)
  %1662 = fadd double %1609, %1661
  %1663 = add nuw nsw i64 %1608, 1
  %1664 = icmp eq i64 %1663, 5
  br i1 %1664, label %1665, label %1607

1665:                                             ; preds = %1645
  %1666 = add nuw nsw i64 %1605, 1
  %1667 = icmp eq i64 %1666, 10
  br i1 %1667, label %1601, label %1604

1668:                                             ; preds = %1732
  %1669 = tail call i32 @llvm.smax.i32(i32 %449, i32 0)
  %1670 = tail call i32 @llvm.smax.i32(i32 %449, i32 0)
  br label %1738

1671:                                             ; preds = %1601, %1732
  %1672 = phi i64 [ 0, %1601 ], [ %1733, %1732 ]
  %1673 = phi double [ %1662, %1601 ], [ %1729, %1732 ]
  br label %1674

1674:                                             ; preds = %1671, %1712
  %1675 = phi i64 [ 0, %1671 ], [ %1730, %1712 ]
  %1676 = phi double [ %1673, %1671 ], [ %1729, %1712 ]
  %1677 = getelementptr inbounds [10 x [5 x %struct.BiContextType]], ptr %21, i64 0, i64 %1672, i64 %1675
  %1678 = getelementptr inbounds i8, ptr %1677, i64 8
  %1679 = load i64, ptr %1678, align 8, !tbaa !32
  %1680 = getelementptr inbounds i8, ptr %1677, i64 2
  %1681 = load i8, ptr %1680, align 2, !tbaa !35
  %1682 = icmp eq i8 %1681, 0
  %1683 = load i16, ptr %1677, align 8, !tbaa !36
  %1684 = zext i16 %1683 to i32
  %1685 = add nuw nsw i32 %1684, 64
  %1686 = sub nsw i32 63, %1684
  %1687 = select i1 %1682, i32 %1686, i32 %1685
  %1688 = uitofp i64 %1679 to double
  %1689 = fmul double %1688, 3.125000e-02
  %1690 = fcmp ogt double %1689, 1.000000e+00
  %1691 = sext i32 %1687 to i64
  %1692 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1691
  %1693 = load double, ptr %1692, align 8, !tbaa !20
  %1694 = fneg double %1689
  %1695 = select i1 %1690, double -1.000000e+00, double %1694
  %1696 = fmul double %1695, %1693
  %1697 = sub nsw i32 127, %1687
  %1698 = sext i32 %1697 to i64
  %1699 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1698
  %1700 = load double, ptr %1699, align 8, !tbaa !20
  %1701 = fmul double %1695, %1700
  br i1 %448, label %1702, label %1707

1702:                                             ; preds = %1674
  %1703 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ABS_I, i64 0, i64 0, i64 %1672, i64 %1675
  %1704 = load i32, ptr %1703, align 4, !tbaa !19
  %1705 = getelementptr inbounds [1 x [8 x [5 x [2 x i32]]]], ptr @INIT_ABS_I, i64 0, i64 0, i64 %1672, i64 %1675, i64 1
  %1706 = mul nsw i32 %1704, %1603
  br label %1712

1707:                                             ; preds = %1674
  %1708 = getelementptr inbounds [3 x [8 x [5 x [2 x i32]]]], ptr @INIT_ABS_P, i64 0, i64 %445, i64 %1672, i64 %1675
  %1709 = load i32, ptr %1708, align 4, !tbaa !19
  %1710 = getelementptr inbounds i8, ptr %1708, i64 4
  %1711 = mul nsw i32 %1709, %1602
  br label %1712

1712:                                             ; preds = %1702, %1707
  %1713 = phi i32 [ %1706, %1702 ], [ %1711, %1707 ]
  %1714 = phi ptr [ %1705, %1702 ], [ %1710, %1707 ]
  %1715 = load i32, ptr %1714, align 4, !tbaa !19
  %1716 = ashr i32 %1713, 4
  %1717 = add nsw i32 %1716, %1715
  %1718 = tail call i32 @llvm.smax.i32(i32 %1717, i32 0)
  %1719 = tail call i32 @llvm.umin.i32(i32 %1718, i32 127)
  %1720 = zext nneg i32 %1719 to i64
  %1721 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1720
  %1722 = load double, ptr %1721, align 8, !tbaa !20
  %1723 = tail call double @llvm.fmuladd.f64(double %1696, double %1722, double 0.000000e+00)
  %1724 = xor i32 %1719, 127
  %1725 = zext nneg i32 %1724 to i64
  %1726 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1725
  %1727 = load double, ptr %1726, align 8, !tbaa !20
  %1728 = tail call double @llvm.fmuladd.f64(double %1701, double %1727, double %1723)
  %1729 = fadd double %1676, %1728
  %1730 = add nuw nsw i64 %1675, 1
  %1731 = icmp eq i64 %1730, 5
  br i1 %1731, label %1732, label %1674

1732:                                             ; preds = %1712
  %1733 = add nuw nsw i64 %1672, 1
  %1734 = icmp eq i64 %1733, 10
  br i1 %1734, label %1668, label %1671

1735:                                             ; preds = %1799
  %1736 = tail call i32 @llvm.smax.i32(i32 %449, i32 0)
  %1737 = tail call i32 @llvm.smax.i32(i32 %449, i32 0)
  br label %1802

1738:                                             ; preds = %1668, %1799
  %1739 = phi i64 [ 0, %1668 ], [ %1800, %1799 ]
  %1740 = phi double [ %1729, %1668 ], [ %1796, %1799 ]
  br label %1741

1741:                                             ; preds = %1738, %1779
  %1742 = phi i64 [ 0, %1738 ], [ %1797, %1779 ]
  %1743 = phi double [ %1740, %1738 ], [ %1796, %1779 ]
  %1744 = getelementptr inbounds [10 x [15 x %struct.BiContextType]], ptr %22, i64 0, i64 %1739, i64 %1742
  %1745 = getelementptr inbounds i8, ptr %1744, i64 8
  %1746 = load i64, ptr %1745, align 8, !tbaa !32
  %1747 = getelementptr inbounds i8, ptr %1744, i64 2
  %1748 = load i8, ptr %1747, align 2, !tbaa !35
  %1749 = icmp eq i8 %1748, 0
  %1750 = load i16, ptr %1744, align 8, !tbaa !36
  %1751 = zext i16 %1750 to i32
  %1752 = add nuw nsw i32 %1751, 64
  %1753 = sub nsw i32 63, %1751
  %1754 = select i1 %1749, i32 %1753, i32 %1752
  %1755 = uitofp i64 %1746 to double
  %1756 = fmul double %1755, 3.125000e-02
  %1757 = fcmp ogt double %1756, 1.000000e+00
  %1758 = sext i32 %1754 to i64
  %1759 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1758
  %1760 = load double, ptr %1759, align 8, !tbaa !20
  %1761 = fneg double %1756
  %1762 = select i1 %1757, double -1.000000e+00, double %1761
  %1763 = fmul double %1762, %1760
  %1764 = sub nsw i32 127, %1754
  %1765 = sext i32 %1764 to i64
  %1766 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1765
  %1767 = load double, ptr %1766, align 8, !tbaa !20
  %1768 = fmul double %1762, %1767
  br i1 %448, label %1769, label %1774

1769:                                             ; preds = %1741
  %1770 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_MAP_I, i64 0, i64 0, i64 %1739, i64 %1742
  %1771 = load i32, ptr %1770, align 4, !tbaa !19
  %1772 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_MAP_I, i64 0, i64 0, i64 %1739, i64 %1742, i64 1
  %1773 = mul nsw i32 %1771, %1670
  br label %1779

1774:                                             ; preds = %1741
  %1775 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_MAP_P, i64 0, i64 %445, i64 %1739, i64 %1742
  %1776 = load i32, ptr %1775, align 4, !tbaa !19
  %1777 = getelementptr inbounds i8, ptr %1775, i64 4
  %1778 = mul nsw i32 %1776, %1669
  br label %1779

1779:                                             ; preds = %1769, %1774
  %1780 = phi i32 [ %1773, %1769 ], [ %1778, %1774 ]
  %1781 = phi ptr [ %1772, %1769 ], [ %1777, %1774 ]
  %1782 = load i32, ptr %1781, align 4, !tbaa !19
  %1783 = ashr i32 %1780, 4
  %1784 = add nsw i32 %1783, %1782
  %1785 = tail call i32 @llvm.smax.i32(i32 %1784, i32 0)
  %1786 = tail call i32 @llvm.umin.i32(i32 %1785, i32 127)
  %1787 = zext nneg i32 %1786 to i64
  %1788 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1787
  %1789 = load double, ptr %1788, align 8, !tbaa !20
  %1790 = tail call double @llvm.fmuladd.f64(double %1763, double %1789, double 0.000000e+00)
  %1791 = xor i32 %1786, 127
  %1792 = zext nneg i32 %1791 to i64
  %1793 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1792
  %1794 = load double, ptr %1793, align 8, !tbaa !20
  %1795 = tail call double @llvm.fmuladd.f64(double %1768, double %1794, double %1790)
  %1796 = fadd double %1743, %1795
  %1797 = add nuw nsw i64 %1742, 1
  %1798 = icmp eq i64 %1797, 15
  br i1 %1798, label %1799, label %1741

1799:                                             ; preds = %1779
  %1800 = add nuw nsw i64 %1739, 1
  %1801 = icmp eq i64 %1800, 10
  br i1 %1801, label %1735, label %1738

1802:                                             ; preds = %1735, %1863
  %1803 = phi i64 [ 0, %1735 ], [ %1864, %1863 ]
  %1804 = phi double [ %1796, %1735 ], [ %1860, %1863 ]
  br label %1805

1805:                                             ; preds = %1802, %1843
  %1806 = phi i64 [ 0, %1802 ], [ %1861, %1843 ]
  %1807 = phi double [ %1804, %1802 ], [ %1860, %1843 ]
  %1808 = getelementptr inbounds [10 x [15 x %struct.BiContextType]], ptr %23, i64 0, i64 %1803, i64 %1806
  %1809 = getelementptr inbounds i8, ptr %1808, i64 8
  %1810 = load i64, ptr %1809, align 8, !tbaa !32
  %1811 = getelementptr inbounds i8, ptr %1808, i64 2
  %1812 = load i8, ptr %1811, align 2, !tbaa !35
  %1813 = icmp eq i8 %1812, 0
  %1814 = load i16, ptr %1808, align 8, !tbaa !36
  %1815 = zext i16 %1814 to i32
  %1816 = add nuw nsw i32 %1815, 64
  %1817 = sub nsw i32 63, %1815
  %1818 = select i1 %1813, i32 %1817, i32 %1816
  %1819 = uitofp i64 %1810 to double
  %1820 = fmul double %1819, 3.125000e-02
  %1821 = fcmp ogt double %1820, 1.000000e+00
  %1822 = sext i32 %1818 to i64
  %1823 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1822
  %1824 = load double, ptr %1823, align 8, !tbaa !20
  %1825 = fneg double %1820
  %1826 = select i1 %1821, double -1.000000e+00, double %1825
  %1827 = fmul double %1826, %1824
  %1828 = sub nsw i32 127, %1818
  %1829 = sext i32 %1828 to i64
  %1830 = getelementptr inbounds [128 x double], ptr @probability, i64 0, i64 %1829
  %1831 = load double, ptr %1830, align 8, !tbaa !20
  %1832 = fmul double %1826, %1831
  br i1 %448, label %1833, label %1838

1833:                                             ; preds = %1805
  %1834 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_LAST_I, i64 0, i64 0, i64 %1803, i64 %1806
  %1835 = load i32, ptr %1834, align 4, !tbaa !19
  %1836 = getelementptr inbounds [1 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_LAST_I, i64 0, i64 0, i64 %1803, i64 %1806, i64 1
  %1837 = mul nsw i32 %1835, %1737
  br label %1843

1838:                                             ; preds = %1805
  %1839 = getelementptr inbounds [3 x [8 x [15 x [2 x i32]]]], ptr @INIT_FLD_LAST_P, i64 0, i64 %445, i64 %1803, i64 %1806
  %1840 = load i32, ptr %1839, align 4, !tbaa !19
  %1841 = getelementptr inbounds i8, ptr %1839, i64 4
  %1842 = mul nsw i32 %1840, %1736
  br label %1843

1843:                                             ; preds = %1833, %1838
  %1844 = phi i32 [ %1837, %1833 ], [ %1842, %1838 ]
  %1845 = phi ptr [ %1836, %1833 ], [ %1841, %1838 ]
  %1846 = load i32, ptr %1845, align 4, !tbaa !19
  %1847 = ashr i32 %1844, 4
  %1848 = add nsw i32 %1847, %1846
  %1849 = tail call i32 @llvm.smax.i32(i32 %1848, i32 0)
  %1850 = tail call i32 @llvm.umin.i32(i32 %1849, i32 127)
  %1851 = zext nneg i32 %1850 to i64
  %1852 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1851
  %1853 = load double, ptr %1852, align 8, !tbaa !20
  %1854 = tail call double @llvm.fmuladd.f64(double %1827, double %1853, double 0.000000e+00)
  %1855 = xor i32 %1850, 127
  %1856 = zext nneg i32 %1855 to i64
  %1857 = getelementptr inbounds [128 x double], ptr @entropy, i64 0, i64 %1856
  %1858 = load double, ptr %1857, align 8, !tbaa !20
  %1859 = tail call double @llvm.fmuladd.f64(double %1832, double %1858, double %1854)
  %1860 = fadd double %1807, %1859
  %1861 = add nuw nsw i64 %1806, 1
  %1862 = icmp eq i64 %1861, 15
  br i1 %1862, label %1863, label %1805

1863:                                             ; preds = %1843
  %1864 = add nuw nsw i64 %1803, 1
  %1865 = icmp eq i64 %1864, 10
  br i1 %1865, label %1866, label %1802

1866:                                             ; preds = %1863
  %1867 = fcmp olt double %1860, %446
  br i1 %1867, label %1868, label %1870

1868:                                             ; preds = %1866
  %1869 = trunc nuw nsw i64 %445 to i32
  store i32 %1869, ptr %0, align 4, !tbaa !19
  br label %1870

1870:                                             ; preds = %1866, %1868
  %1871 = phi double [ %1860, %1868 ], [ %446, %1866 ]
  %1872 = add nuw nsw i64 %445, 1
  %1873 = icmp ult i64 %445, 2
  %1874 = select i1 %7, i1 %1873, i1 false
  br i1 %1874, label %444, label %1875

1875:                                             ; preds = %1870
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind memory(readwrite, inaccessiblemem: none)
define dso_local void @store_contexts() local_unnamed_addr #9 {
  %1 = load ptr, ptr @input, align 8, !tbaa !6
  %2 = getelementptr inbounds i8, ptr %1, i64 3884
  %3 = load i32, ptr %2, align 4, !tbaa !26
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %36, label %5

5:                                                ; preds = %0
  %6 = load ptr, ptr @img, align 8, !tbaa !6
  %7 = getelementptr inbounds i8, ptr %6, i64 31568
  %8 = load ptr, ptr %7, align 8, !tbaa !23
  %9 = getelementptr inbounds i8, ptr %8, i64 12
  %10 = load i32, ptr %9, align 4, !tbaa !24
  %11 = load i32, ptr @num_mb_per_slice, align 4, !tbaa !19
  %12 = sdiv i32 %10, %11
  %13 = getelementptr inbounds i8, ptr %6, i64 24
  %14 = load i32, ptr %13, align 8, !tbaa !22
  %15 = getelementptr inbounds i8, ptr %6, i64 90264
  %16 = load i32, ptr %15, align 8, !tbaa !21
  %17 = load ptr, ptr @initialized, align 8, !tbaa !6
  %18 = sext i32 %16 to i64
  %19 = getelementptr inbounds ptr, ptr %17, i64 %18
  %20 = load ptr, ptr %19, align 8, !tbaa !6
  %21 = sext i32 %14 to i64
  %22 = getelementptr inbounds ptr, ptr %20, i64 %21
  %23 = load ptr, ptr %22, align 8, !tbaa !6
  %24 = sext i32 %12 to i64
  %25 = getelementptr inbounds i32, ptr %23, i64 %24
  store i32 1, ptr %25, align 4, !tbaa !19
  %26 = load ptr, ptr @model_number, align 8, !tbaa !6
  %27 = getelementptr inbounds ptr, ptr %26, i64 %18
  %28 = load ptr, ptr %27, align 8, !tbaa !6
  %29 = getelementptr inbounds ptr, ptr %28, i64 %21
  %30 = load ptr, ptr %29, align 8, !tbaa !6
  %31 = getelementptr inbounds i32, ptr %30, i64 %24
  %32 = getelementptr inbounds i8, ptr %8, i64 32
  %33 = load ptr, ptr %32, align 8, !tbaa !29
  %34 = getelementptr inbounds i8, ptr %8, i64 40
  %35 = load ptr, ptr %34, align 8, !tbaa !30
  tail call void @GetCtxModelNumber(ptr noundef %31, ptr noundef %33, ptr noundef %35)
  br label %36

36:                                               ; preds = %0, %5
  ret void
}

; Function Attrs: nofree norecurse nosync nounwind memory(readwrite, inaccessiblemem: none)
define dso_local void @update_field_frame_contexts(i32 noundef signext %0) local_unnamed_addr #9 {
  %2 = icmp eq i32 %0, 0
  %3 = load ptr, ptr @initialized, align 8
  %4 = getelementptr inbounds i8, ptr %3, i64 8
  %5 = load ptr, ptr @model_number, align 8
  %6 = getelementptr inbounds i8, ptr %5, i64 8
  %7 = load i32, ptr @number_of_slices, align 4, !tbaa !19
  %8 = icmp sgt i32 %7, 0
  br i1 %2, label %10, label %9

9:                                                ; preds = %1
  br i1 %8, label %11, label %235

10:                                               ; preds = %1
  br i1 %8, label %121, label %235

11:                                               ; preds = %9
  %12 = load ptr, ptr %4, align 8, !tbaa !6
  %13 = load ptr, ptr %12, align 8, !tbaa !6
  %14 = load ptr, ptr %3, align 8, !tbaa !6
  %15 = load ptr, ptr %14, align 8, !tbaa !6
  %16 = load ptr, ptr %6, align 8, !tbaa !6
  %17 = load ptr, ptr %16, align 8, !tbaa !6
  %18 = load ptr, ptr %5, align 8, !tbaa !6
  %19 = load ptr, ptr %18, align 8, !tbaa !6
  br label %20

20:                                               ; preds = %11, %20
  %21 = phi i64 [ 0, %11 ], [ %30, %20 ]
  %22 = lshr i64 %21, 1
  %23 = and i64 %22, 2147483647
  %24 = getelementptr inbounds i32, ptr %13, i64 %23
  %25 = load i32, ptr %24, align 4, !tbaa !19
  %26 = getelementptr inbounds i32, ptr %15, i64 %21
  store i32 %25, ptr %26, align 4, !tbaa !19
  %27 = getelementptr inbounds i32, ptr %17, i64 %23
  %28 = load i32, ptr %27, align 4, !tbaa !19
  %29 = getelementptr inbounds i32, ptr %19, i64 %21
  store i32 %28, ptr %29, align 4, !tbaa !19
  %30 = add nuw nsw i64 %21, 1
  %31 = load i32, ptr @number_of_slices, align 4, !tbaa !19
  %32 = sext i32 %31 to i64
  %33 = icmp slt i64 %30, %32
  br i1 %33, label %20, label %34

34:                                               ; preds = %20
  %35 = icmp sgt i32 %31, 0
  br i1 %35, label %36, label %235

36:                                               ; preds = %34
  %37 = load ptr, ptr %4, align 8, !tbaa !6
  %38 = getelementptr inbounds i8, ptr %37, i64 8
  %39 = load ptr, ptr %38, align 8, !tbaa !6
  %40 = load ptr, ptr %3, align 8, !tbaa !6
  %41 = getelementptr inbounds i8, ptr %40, i64 8
  %42 = load ptr, ptr %41, align 8, !tbaa !6
  %43 = load ptr, ptr %6, align 8, !tbaa !6
  %44 = getelementptr inbounds i8, ptr %43, i64 8
  %45 = load ptr, ptr %44, align 8, !tbaa !6
  %46 = load ptr, ptr %5, align 8, !tbaa !6
  %47 = getelementptr inbounds i8, ptr %46, i64 8
  %48 = load ptr, ptr %47, align 8, !tbaa !6
  br label %49

49:                                               ; preds = %49, %36
  %50 = phi i64 [ 0, %36 ], [ %59, %49 ]
  %51 = lshr i64 %50, 1
  %52 = and i64 %51, 2147483647
  %53 = getelementptr inbounds i32, ptr %39, i64 %52
  %54 = load i32, ptr %53, align 4, !tbaa !19
  %55 = getelementptr inbounds i32, ptr %42, i64 %50
  store i32 %54, ptr %55, align 4, !tbaa !19
  %56 = getelementptr inbounds i32, ptr %45, i64 %52
  %57 = load i32, ptr %56, align 4, !tbaa !19
  %58 = getelementptr inbounds i32, ptr %48, i64 %50
  store i32 %57, ptr %58, align 4, !tbaa !19
  %59 = add nuw nsw i64 %50, 1
  %60 = load i32, ptr @number_of_slices, align 4, !tbaa !19
  %61 = sext i32 %60 to i64
  %62 = icmp slt i64 %59, %61
  br i1 %62, label %49, label %63

63:                                               ; preds = %49
  %64 = icmp sgt i32 %60, 0
  br i1 %64, label %65, label %235

65:                                               ; preds = %63
  %66 = load ptr, ptr %4, align 8, !tbaa !6
  %67 = getelementptr inbounds i8, ptr %66, i64 16
  %68 = load ptr, ptr %67, align 8, !tbaa !6
  %69 = load ptr, ptr %3, align 8, !tbaa !6
  %70 = getelementptr inbounds i8, ptr %69, i64 16
  %71 = load ptr, ptr %70, align 8, !tbaa !6
  %72 = load ptr, ptr %6, align 8, !tbaa !6
  %73 = getelementptr inbounds i8, ptr %72, i64 16
  %74 = load ptr, ptr %73, align 8, !tbaa !6
  %75 = load ptr, ptr %5, align 8, !tbaa !6
  %76 = getelementptr inbounds i8, ptr %75, i64 16
  %77 = load ptr, ptr %76, align 8, !tbaa !6
  br label %78

78:                                               ; preds = %78, %65
  %79 = phi i64 [ 0, %65 ], [ %88, %78 ]
  %80 = lshr i64 %79, 1
  %81 = and i64 %80, 2147483647
  %82 = getelementptr inbounds i32, ptr %68, i64 %81
  %83 = load i32, ptr %82, align 4, !tbaa !19
  %84 = getelementptr inbounds i32, ptr %71, i64 %79
  store i32 %83, ptr %84, align 4, !tbaa !19
  %85 = getelementptr inbounds i32, ptr %74, i64 %81
  %86 = load i32, ptr %85, align 4, !tbaa !19
  %87 = getelementptr inbounds i32, ptr %77, i64 %79
  store i32 %86, ptr %87, align 4, !tbaa !19
  %88 = add nuw nsw i64 %79, 1
  %89 = load i32, ptr @number_of_slices, align 4, !tbaa !19
  %90 = sext i32 %89 to i64
  %91 = icmp slt i64 %88, %90
  br i1 %91, label %78, label %92

92:                                               ; preds = %78
  %93 = icmp sgt i32 %89, 0
  br i1 %93, label %94, label %235

94:                                               ; preds = %92
  %95 = load ptr, ptr %4, align 8, !tbaa !6
  %96 = getelementptr inbounds i8, ptr %95, i64 24
  %97 = load ptr, ptr %96, align 8, !tbaa !6
  %98 = load ptr, ptr %3, align 8, !tbaa !6
  %99 = getelementptr inbounds i8, ptr %98, i64 24
  %100 = load ptr, ptr %99, align 8, !tbaa !6
  %101 = load ptr, ptr %6, align 8, !tbaa !6
  %102 = getelementptr inbounds i8, ptr %101, i64 24
  %103 = load ptr, ptr %102, align 8, !tbaa !6
  %104 = load ptr, ptr %5, align 8, !tbaa !6
  %105 = getelementptr inbounds i8, ptr %104, i64 24
  %106 = load ptr, ptr %105, align 8, !tbaa !6
  br label %107

107:                                              ; preds = %107, %94
  %108 = phi i64 [ 0, %94 ], [ %117, %107 ]
  %109 = lshr i64 %108, 1
  %110 = and i64 %109, 2147483647
  %111 = getelementptr inbounds i32, ptr %97, i64 %110
  %112 = load i32, ptr %111, align 4, !tbaa !19
  %113 = getelementptr inbounds i32, ptr %100, i64 %108
  store i32 %112, ptr %113, align 4, !tbaa !19
  %114 = getelementptr inbounds i32, ptr %103, i64 %110
  %115 = load i32, ptr %114, align 4, !tbaa !19
  %116 = getelementptr inbounds i32, ptr %106, i64 %108
  store i32 %115, ptr %116, align 4, !tbaa !19
  %117 = add nuw nsw i64 %108, 1
  %118 = load i32, ptr @number_of_slices, align 4, !tbaa !19
  %119 = sext i32 %118 to i64
  %120 = icmp slt i64 %117, %119
  br i1 %120, label %107, label %235

121:                                              ; preds = %10
  %122 = load ptr, ptr %3, align 8, !tbaa !6
  %123 = load ptr, ptr %122, align 8, !tbaa !6
  %124 = load ptr, ptr %4, align 8, !tbaa !6
  %125 = load ptr, ptr %124, align 8, !tbaa !6
  %126 = load ptr, ptr %5, align 8, !tbaa !6
  %127 = load ptr, ptr %126, align 8, !tbaa !6
  %128 = load ptr, ptr %6, align 8, !tbaa !6
  %129 = load ptr, ptr %128, align 8, !tbaa !6
  br label %130

130:                                              ; preds = %121, %130
  %131 = phi i64 [ 0, %121 ], [ %139, %130 ]
  %132 = shl nuw i64 %131, 1
  %133 = getelementptr inbounds i32, ptr %123, i64 %132
  %134 = load i32, ptr %133, align 4, !tbaa !19
  %135 = getelementptr inbounds i32, ptr %125, i64 %131
  store i32 %134, ptr %135, align 4, !tbaa !19
  %136 = getelementptr inbounds i32, ptr %127, i64 %132
  %137 = load i32, ptr %136, align 4, !tbaa !19
  %138 = getelementptr inbounds i32, ptr %129, i64 %131
  store i32 %137, ptr %138, align 4, !tbaa !19
  %139 = add nuw nsw i64 %131, 1
  %140 = load i32, ptr @number_of_slices, align 4, !tbaa !19
  %141 = add nsw i32 %140, 1
  %142 = ashr i32 %141, 1
  %143 = sext i32 %142 to i64
  %144 = icmp slt i64 %139, %143
  br i1 %144, label %130, label %145

145:                                              ; preds = %130
  %146 = icmp sgt i32 %140, 0
  br i1 %146, label %147, label %235

147:                                              ; preds = %145
  %148 = load ptr, ptr %3, align 8, !tbaa !6
  %149 = getelementptr inbounds i8, ptr %148, i64 8
  %150 = load ptr, ptr %149, align 8, !tbaa !6
  %151 = load ptr, ptr %4, align 8, !tbaa !6
  %152 = getelementptr inbounds i8, ptr %151, i64 8
  %153 = load ptr, ptr %152, align 8, !tbaa !6
  %154 = load ptr, ptr %5, align 8, !tbaa !6
  %155 = getelementptr inbounds i8, ptr %154, i64 8
  %156 = load ptr, ptr %155, align 8, !tbaa !6
  %157 = load ptr, ptr %6, align 8, !tbaa !6
  %158 = getelementptr inbounds i8, ptr %157, i64 8
  %159 = load ptr, ptr %158, align 8, !tbaa !6
  br label %160

160:                                              ; preds = %160, %147
  %161 = phi i64 [ 0, %147 ], [ %169, %160 ]
  %162 = shl nuw i64 %161, 1
  %163 = getelementptr inbounds i32, ptr %150, i64 %162
  %164 = load i32, ptr %163, align 4, !tbaa !19
  %165 = getelementptr inbounds i32, ptr %153, i64 %161
  store i32 %164, ptr %165, align 4, !tbaa !19
  %166 = getelementptr inbounds i32, ptr %156, i64 %162
  %167 = load i32, ptr %166, align 4, !tbaa !19
  %168 = getelementptr inbounds i32, ptr %159, i64 %161
  store i32 %167, ptr %168, align 4, !tbaa !19
  %169 = add nuw nsw i64 %161, 1
  %170 = load i32, ptr @number_of_slices, align 4, !tbaa !19
  %171 = add nsw i32 %170, 1
  %172 = ashr i32 %171, 1
  %173 = sext i32 %172 to i64
  %174 = icmp slt i64 %169, %173
  br i1 %174, label %160, label %175

175:                                              ; preds = %160
  %176 = icmp sgt i32 %170, 0
  br i1 %176, label %177, label %235

177:                                              ; preds = %175
  %178 = load ptr, ptr %3, align 8, !tbaa !6
  %179 = getelementptr inbounds i8, ptr %178, i64 16
  %180 = load ptr, ptr %179, align 8, !tbaa !6
  %181 = load ptr, ptr %4, align 8, !tbaa !6
  %182 = getelementptr inbounds i8, ptr %181, i64 16
  %183 = load ptr, ptr %182, align 8, !tbaa !6
  %184 = load ptr, ptr %5, align 8, !tbaa !6
  %185 = getelementptr inbounds i8, ptr %184, i64 16
  %186 = load ptr, ptr %185, align 8, !tbaa !6
  %187 = load ptr, ptr %6, align 8, !tbaa !6
  %188 = getelementptr inbounds i8, ptr %187, i64 16
  %189 = load ptr, ptr %188, align 8, !tbaa !6
  br label %190

190:                                              ; preds = %190, %177
  %191 = phi i64 [ 0, %177 ], [ %199, %190 ]
  %192 = shl nuw i64 %191, 1
  %193 = getelementptr inbounds i32, ptr %180, i64 %192
  %194 = load i32, ptr %193, align 4, !tbaa !19
  %195 = getelementptr inbounds i32, ptr %183, i64 %191
  store i32 %194, ptr %195, align 4, !tbaa !19
  %196 = getelementptr inbounds i32, ptr %186, i64 %192
  %197 = load i32, ptr %196, align 4, !tbaa !19
  %198 = getelementptr inbounds i32, ptr %189, i64 %191
  store i32 %197, ptr %198, align 4, !tbaa !19
  %199 = add nuw nsw i64 %191, 1
  %200 = load i32, ptr @number_of_slices, align 4, !tbaa !19
  %201 = add nsw i32 %200, 1
  %202 = ashr i32 %201, 1
  %203 = sext i32 %202 to i64
  %204 = icmp slt i64 %199, %203
  br i1 %204, label %190, label %205

205:                                              ; preds = %190
  %206 = icmp sgt i32 %200, 0
  br i1 %206, label %207, label %235

207:                                              ; preds = %205
  %208 = load ptr, ptr %3, align 8, !tbaa !6
  %209 = getelementptr inbounds i8, ptr %208, i64 24
  %210 = load ptr, ptr %209, align 8, !tbaa !6
  %211 = load ptr, ptr %4, align 8, !tbaa !6
  %212 = getelementptr inbounds i8, ptr %211, i64 24
  %213 = load ptr, ptr %212, align 8, !tbaa !6
  %214 = load ptr, ptr %5, align 8, !tbaa !6
  %215 = getelementptr inbounds i8, ptr %214, i64 24
  %216 = load ptr, ptr %215, align 8, !tbaa !6
  %217 = load ptr, ptr %6, align 8, !tbaa !6
  %218 = getelementptr inbounds i8, ptr %217, i64 24
  %219 = load ptr, ptr %218, align 8, !tbaa !6
  br label %220

220:                                              ; preds = %220, %207
  %221 = phi i64 [ 0, %207 ], [ %229, %220 ]
  %222 = shl nuw i64 %221, 1
  %223 = getelementptr inbounds i32, ptr %210, i64 %222
  %224 = load i32, ptr %223, align 4, !tbaa !19
  %225 = getelementptr inbounds i32, ptr %213, i64 %221
  store i32 %224, ptr %225, align 4, !tbaa !19
  %226 = getelementptr inbounds i32, ptr %216, i64 %222
  %227 = load i32, ptr %226, align 4, !tbaa !19
  %228 = getelementptr inbounds i32, ptr %219, i64 %221
  store i32 %227, ptr %228, align 4, !tbaa !19
  %229 = add nuw nsw i64 %221, 1
  %230 = load i32, ptr @number_of_slices, align 4, !tbaa !19
  %231 = add nsw i32 %230, 1
  %232 = ashr i32 %231, 1
  %233 = sext i32 %232 to i64
  %234 = icmp slt i64 %229, %233
  br i1 %234, label %220, label %235

235:                                              ; preds = %107, %220, %10, %145, %175, %9, %34, %63, %205, %92
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #10

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.umin.i32(i32, i32) #10

attributes #0 = { nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv64" "target-features"="+64bit,+a,+d,+f,+m,+relax,+zicsr,+zifencei,-c,-e,-experimental-smmpm,-experimental-smnpm,-experimental-ssnpm,-experimental-sspm,-experimental-ssqosid,-experimental-supm,-experimental-zalasr,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-shcounterenw,-shgatpa,-shtvala,-shvsatpa,-shvstvala,-shvstvecd,-smaia,-smepmp,-smstateen,-ssaia,-ssccptr,-sscofpmf,-sscounterenw,-ssstateen,-ssstrict,-sstc,-sstvala,-sstvecd,-ssu64xl,-svade,-svadu,-svbare,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfcease,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xsifivecdiscarddlone,-xsifivecflushdlone,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zaamo,-zabha,-zacas,-zalrsc,-zama16b,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zca,-zcb,-zcd,-zce,-zcf,-zcmop,-zcmp,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zimop,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }
attributes #1 = { mustprogress nofree nounwind willreturn allockind("alloc,uninitialized") allocsize(0) memory(inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv64" "target-features"="+64bit,+a,+d,+f,+m,+relax,+zicsr,+zifencei,-c,-e,-experimental-smmpm,-experimental-smnpm,-experimental-ssnpm,-experimental-sspm,-experimental-ssqosid,-experimental-supm,-experimental-zalasr,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-shcounterenw,-shgatpa,-shtvala,-shvsatpa,-shvstvala,-shvstvecd,-smaia,-smepmp,-smstateen,-ssaia,-ssccptr,-sscofpmf,-sscounterenw,-ssstateen,-ssstrict,-sstc,-sstvala,-sstvecd,-ssu64xl,-svade,-svadu,-svbare,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfcease,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xsifivecdiscarddlone,-xsifivecflushdlone,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zaamo,-zabha,-zacas,-zalrsc,-zama16b,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zca,-zcb,-zcd,-zce,-zcf,-zcmop,-zcmp,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zimop,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }
attributes #2 = { "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv64" "target-features"="+64bit,+a,+d,+f,+m,+relax,+zicsr,+zifencei,-c,-e,-experimental-smmpm,-experimental-smnpm,-experimental-ssnpm,-experimental-sspm,-experimental-ssqosid,-experimental-supm,-experimental-zalasr,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-shcounterenw,-shgatpa,-shtvala,-shvsatpa,-shvstvala,-shvstvecd,-smaia,-smepmp,-smstateen,-ssaia,-ssccptr,-sscofpmf,-sscounterenw,-ssstateen,-ssstrict,-sstc,-sstvala,-sstvecd,-ssu64xl,-svade,-svadu,-svbare,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfcease,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xsifivecdiscarddlone,-xsifivecflushdlone,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zaamo,-zabha,-zacas,-zalrsc,-zama16b,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zca,-zcb,-zcd,-zce,-zcf,-zcmop,-zcmp,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zimop,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }
attributes #3 = { mustprogress nofree nounwind willreturn memory(write) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv64" "target-features"="+64bit,+a,+d,+f,+m,+relax,+zicsr,+zifencei,-c,-e,-experimental-smmpm,-experimental-smnpm,-experimental-ssnpm,-experimental-sspm,-experimental-ssqosid,-experimental-supm,-experimental-zalasr,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-shcounterenw,-shgatpa,-shtvala,-shvsatpa,-shvstvala,-shvstvecd,-smaia,-smepmp,-smstateen,-ssaia,-ssccptr,-sscofpmf,-sscounterenw,-ssstateen,-ssstrict,-sstc,-sstvala,-sstvecd,-ssu64xl,-svade,-svadu,-svbare,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfcease,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xsifivecdiscarddlone,-xsifivecflushdlone,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zaamo,-zabha,-zacas,-zalrsc,-zama16b,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zca,-zcb,-zcd,-zce,-zcf,-zcmop,-zcmp,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zimop,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }
attributes #4 = { mustprogress nounwind willreturn allockind("free") memory(argmem: readwrite, inaccessiblemem: readwrite) "alloc-family"="malloc" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv64" "target-features"="+64bit,+a,+d,+f,+m,+relax,+zicsr,+zifencei,-c,-e,-experimental-smmpm,-experimental-smnpm,-experimental-ssnpm,-experimental-sspm,-experimental-ssqosid,-experimental-supm,-experimental-zalasr,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-shcounterenw,-shgatpa,-shtvala,-shvsatpa,-shvstvala,-shvstvecd,-smaia,-smepmp,-smstateen,-ssaia,-ssccptr,-sscofpmf,-sscounterenw,-ssstateen,-ssstrict,-sstc,-sstvala,-sstvecd,-ssu64xl,-svade,-svadu,-svbare,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfcease,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xsifivecdiscarddlone,-xsifivecflushdlone,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zaamo,-zabha,-zacas,-zalrsc,-zama16b,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zca,-zcb,-zcd,-zce,-zcf,-zcmop,-zcmp,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zimop,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }
attributes #5 = { mustprogress nofree norecurse nosync nounwind willreturn memory(readwrite, inaccessiblemem: none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv64" "target-features"="+64bit,+a,+d,+f,+m,+relax,+zicsr,+zifencei,-c,-e,-experimental-smmpm,-experimental-smnpm,-experimental-ssnpm,-experimental-sspm,-experimental-ssqosid,-experimental-supm,-experimental-zalasr,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-shcounterenw,-shgatpa,-shtvala,-shvsatpa,-shvstvala,-shvstvecd,-smaia,-smepmp,-smstateen,-ssaia,-ssccptr,-sscofpmf,-sscounterenw,-ssstateen,-ssstrict,-sstc,-sstvala,-sstvecd,-ssu64xl,-svade,-svadu,-svbare,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfcease,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xsifivecdiscarddlone,-xsifivecflushdlone,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zaamo,-zabha,-zacas,-zalrsc,-zama16b,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zca,-zcb,-zcd,-zce,-zcf,-zcmop,-zcmp,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zimop,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }
attributes #6 = { mustprogress nofree norecurse nosync nounwind willreturn memory(read, inaccessiblemem: none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv64" "target-features"="+64bit,+a,+d,+f,+m,+relax,+zicsr,+zifencei,-c,-e,-experimental-smmpm,-experimental-smnpm,-experimental-ssnpm,-experimental-sspm,-experimental-ssqosid,-experimental-supm,-experimental-zalasr,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-shcounterenw,-shgatpa,-shtvala,-shvsatpa,-shvstvala,-shvstvecd,-smaia,-smepmp,-smstateen,-ssaia,-ssccptr,-sscofpmf,-sscounterenw,-ssstateen,-ssstrict,-sstc,-sstvala,-sstvecd,-ssu64xl,-svade,-svadu,-svbare,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfcease,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xsifivecdiscarddlone,-xsifivecflushdlone,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zaamo,-zabha,-zacas,-zalrsc,-zama16b,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zca,-zcb,-zcd,-zce,-zcf,-zcmop,-zcmp,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zimop,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }
attributes #7 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #8 = { nofree norecurse nosync nounwind memory(read, argmem: readwrite, inaccessiblemem: none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv64" "target-features"="+64bit,+a,+d,+f,+m,+relax,+zicsr,+zifencei,-c,-e,-experimental-smmpm,-experimental-smnpm,-experimental-ssnpm,-experimental-sspm,-experimental-ssqosid,-experimental-supm,-experimental-zalasr,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-shcounterenw,-shgatpa,-shtvala,-shvsatpa,-shvstvala,-shvstvecd,-smaia,-smepmp,-smstateen,-ssaia,-ssccptr,-sscofpmf,-sscounterenw,-ssstateen,-ssstrict,-sstc,-sstvala,-sstvecd,-ssu64xl,-svade,-svadu,-svbare,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfcease,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xsifivecdiscarddlone,-xsifivecflushdlone,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zaamo,-zabha,-zacas,-zalrsc,-zama16b,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zca,-zcb,-zcd,-zce,-zcf,-zcmop,-zcmp,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zimop,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }
attributes #9 = { nofree norecurse nosync nounwind memory(readwrite, inaccessiblemem: none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv64" "target-features"="+64bit,+a,+d,+f,+m,+relax,+zicsr,+zifencei,-c,-e,-experimental-smmpm,-experimental-smnpm,-experimental-ssnpm,-experimental-sspm,-experimental-ssqosid,-experimental-supm,-experimental-zalasr,-experimental-zfbfmin,-experimental-zicfilp,-experimental-zicfiss,-experimental-ztso,-experimental-zvfbfmin,-experimental-zvfbfwma,-h,-shcounterenw,-shgatpa,-shtvala,-shvsatpa,-shvstvala,-shvstvecd,-smaia,-smepmp,-smstateen,-ssaia,-ssccptr,-sscofpmf,-sscounterenw,-ssstateen,-ssstrict,-sstc,-sstvala,-sstvecd,-ssu64xl,-svade,-svadu,-svbare,-svinval,-svnapot,-svpbmt,-v,-xcvalu,-xcvbi,-xcvbitmanip,-xcvelw,-xcvmac,-xcvmem,-xcvsimd,-xsfcease,-xsfvcp,-xsfvfnrclipxfqf,-xsfvfwmaccqqq,-xsfvqmaccdod,-xsfvqmaccqoq,-xsifivecdiscarddlone,-xsifivecflushdlone,-xtheadba,-xtheadbb,-xtheadbs,-xtheadcmo,-xtheadcondmov,-xtheadfmemidx,-xtheadmac,-xtheadmemidx,-xtheadmempair,-xtheadsync,-xtheadvdot,-xventanacondops,-za128rs,-za64rs,-zaamo,-zabha,-zacas,-zalrsc,-zama16b,-zawrs,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zca,-zcb,-zcd,-zce,-zcf,-zcmop,-zcmp,-zcmt,-zdinx,-zfa,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zic64b,-zicbom,-zicbop,-zicboz,-ziccamoa,-ziccif,-zicclsm,-ziccrse,-zicntr,-zicond,-zihintntl,-zihintpause,-zihpm,-zimop,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvbb,-zvbc,-zve32f,-zve32x,-zve64d,-zve64f,-zve64x,-zvfh,-zvfhmin,-zvkb,-zvkg,-zvkn,-zvknc,-zvkned,-zvkng,-zvknha,-zvknhb,-zvks,-zvksc,-zvksed,-zvksg,-zvksh,-zvkt,-zvl1024b,-zvl128b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl32b,-zvl4096b,-zvl512b,-zvl64b,-zvl65536b,-zvl8192b" }
attributes #10 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #11 = { nounwind allocsize(0) }
attributes #12 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"lp64d"}
!2 = !{i32 6, !"riscv-isa", !3}
!3 = !{!"rv64i2p1_m2p0_a2p1_f2p2_d2p2_zicsr2p0_zifencei2p0"}
!4 = !{i32 8, !"SmallDataLimit", i32 8}
!5 = !{!"clang version 19.0.0git (https://github.com/llvm/llvm-project.git 4b702946006cfa9be9ab646ce5fc5b25248edd81)"}
!6 = !{!7, !7, i64 0}
!7 = !{!"any pointer", !8, i64 0}
!8 = !{!"omnipotent char", !9, i64 0}
!9 = !{!"Simple C/C++ TBAA"}
!10 = !{!11, !12, i64 90308}
!11 = !{!"", !12, i64 0, !12, i64 4, !12, i64 8, !12, i64 12, !12, i64 16, !12, i64 20, !12, i64 24, !12, i64 28, !12, i64 32, !12, i64 36, !12, i64 40, !12, i64 44, !13, i64 48, !12, i64 52, !12, i64 56, !12, i64 60, !12, i64 64, !12, i64 68, !12, i64 72, !12, i64 76, !12, i64 80, !12, i64 84, !12, i64 88, !12, i64 92, !12, i64 96, !7, i64 104, !7, i64 112, !12, i64 120, !7, i64 128, !12, i64 136, !12, i64 140, !12, i64 144, !12, i64 148, !12, i64 152, !12, i64 156, !12, i64 160, !12, i64 164, !12, i64 168, !12, i64 172, !12, i64 176, !12, i64 180, !8, i64 184, !8, i64 4792, !8, i64 7352, !8, i64 8504, !8, i64 12600, !8, i64 13112, !7, i64 14136, !7, i64 14144, !8, i64 14152, !8, i64 18248, !8, i64 21320, !8, i64 29512, !7, i64 31560, !7, i64 31568, !7, i64 31576, !8, i64 31584, !7, i64 89184, !7, i64 89192, !12, i64 89200, !12, i64 89204, !12, i64 89208, !12, i64 89212, !8, i64 89216, !12, i64 89280, !12, i64 89284, !12, i64 89288, !12, i64 89292, !12, i64 89296, !14, i64 89304, !12, i64 89312, !12, i64 89316, !12, i64 89320, !12, i64 89324, !7, i64 89328, !7, i64 89336, !7, i64 89344, !7, i64 89352, !8, i64 89360, !12, i64 89392, !12, i64 89396, !12, i64 89400, !12, i64 89404, !12, i64 89408, !12, i64 89412, !12, i64 89416, !12, i64 89420, !8, i64 89424, !12, i64 90192, !12, i64 90196, !12, i64 90200, !12, i64 90204, !12, i64 90208, !12, i64 90212, !12, i64 90216, !12, i64 90220, !12, i64 90224, !12, i64 90228, !12, i64 90232, !12, i64 90236, !12, i64 90240, !8, i64 90244, !12, i64 90248, !12, i64 90252, !8, i64 90256, !12, i64 90264, !12, i64 90268, !12, i64 90272, !12, i64 90276, !12, i64 90280, !12, i64 90284, !12, i64 90288, !12, i64 90292, !12, i64 90296, !12, i64 90300, !12, i64 90304, !12, i64 90308, !12, i64 90312, !12, i64 90316, !12, i64 90320, !12, i64 90324, !12, i64 90328, !7, i64 90336, !12, i64 90344, !12, i64 90348, !12, i64 90352, !12, i64 90356, !12, i64 90360, !14, i64 90368, !12, i64 90376, !12, i64 90380, !12, i64 90384, !12, i64 90388, !12, i64 90392, !12, i64 90396, !12, i64 90400, !7, i64 90408, !12, i64 90416, !12, i64 90420, !12, i64 90424, !12, i64 90428, !12, i64 90432, !12, i64 90436, !12, i64 90440, !12, i64 90444, !12, i64 90448, !12, i64 90452, !12, i64 90456, !12, i64 90460, !12, i64 90464, !12, i64 90468, !12, i64 90472, !12, i64 90476, !12, i64 90480, !12, i64 90484, !12, i64 90488, !12, i64 90492, !12, i64 90496, !12, i64 90500, !7, i64 90504, !7, i64 90512, !7, i64 90520, !12, i64 90528, !12, i64 90532, !12, i64 90536, !12, i64 90540, !12, i64 90544, !12, i64 90548, !12, i64 90552, !12, i64 90556, !12, i64 90560, !8, i64 90564, !12, i64 90572, !12, i64 90576, !12, i64 90580, !15, i64 90584, !12, i64 90588, !12, i64 90592}
!12 = !{!"int", !8, i64 0}
!13 = !{!"float", !8, i64 0}
!14 = !{!"double", !8, i64 0}
!15 = !{!"short", !8, i64 0}
!16 = !{!17, !12, i64 212}
!17 = !{!"", !12, i64 0, !12, i64 4, !12, i64 8, !12, i64 12, !12, i64 16, !12, i64 20, !12, i64 24, !12, i64 28, !12, i64 32, !12, i64 36, !12, i64 40, !12, i64 44, !12, i64 48, !12, i64 52, !12, i64 56, !12, i64 60, !12, i64 64, !12, i64 68, !12, i64 72, !12, i64 76, !12, i64 80, !8, i64 84, !8, i64 148, !12, i64 212, !12, i64 216, !12, i64 220, !12, i64 224, !8, i64 228, !8, i64 428, !8, i64 628, !8, i64 828, !8, i64 1028, !12, i64 1228, !12, i64 1232, !12, i64 1236, !12, i64 1240, !12, i64 1244, !12, i64 1248, !12, i64 1252, !12, i64 1256, !12, i64 1260, !12, i64 1264, !12, i64 1268, !12, i64 1272, !12, i64 1276, !12, i64 1280, !12, i64 1284, !12, i64 1288, !12, i64 1292, !12, i64 1296, !12, i64 1300, !8, i64 1304, !8, i64 1504, !8, i64 1704, !12, i64 1904, !12, i64 1908, !12, i64 1912, !12, i64 1916, !12, i64 1920, !12, i64 1924, !12, i64 1928, !12, i64 1932, !12, i64 1936, !12, i64 1940, !12, i64 1944, !12, i64 1948, !8, i64 1952, !12, i64 2976, !12, i64 2980, !12, i64 2984, !12, i64 2988, !12, i64 2992, !12, i64 2996, !12, i64 3000, !12, i64 3004, !12, i64 3008, !12, i64 3012, !12, i64 3016, !12, i64 3020, !12, i64 3024, !12, i64 3028, !12, i64 3032, !12, i64 3036, !12, i64 3040, !12, i64 3044, !12, i64 3048, !12, i64 3052, !14, i64 3056, !12, i64 3064, !12, i64 3068, !12, i64 3072, !12, i64 3076, !12, i64 3080, !12, i64 3084, !12, i64 3088, !12, i64 3092, !12, i64 3096, !12, i64 3100, !12, i64 3104, !12, i64 3108, !12, i64 3112, !12, i64 3116, !12, i64 3120, !12, i64 3124, !12, i64 3128, !12, i64 3132, !12, i64 3136, !12, i64 3140, !12, i64 3144, !12, i64 3148, !8, i64 3152, !8, i64 3352, !12, i64 3552, !12, i64 3556, !12, i64 3560, !12, i64 3564, !12, i64 3568, !12, i64 3572, !12, i64 3576, !12, i64 3580, !12, i64 3584, !12, i64 3588, !12, i64 3592, !12, i64 3596, !12, i64 3600, !12, i64 3604, !12, i64 3608, !12, i64 3612, !12, i64 3616, !12, i64 3620, !8, i64 3624, !12, i64 3824, !12, i64 3828, !7, i64 3832, !7, i64 3840, !7, i64 3848, !7, i64 3856, !12, i64 3864, !12, i64 3868, !12, i64 3872, !12, i64 3876, !12, i64 3880, !12, i64 3884, !12, i64 3888, !12, i64 3892, !12, i64 3896, !12, i64 3900, !12, i64 3904, !12, i64 3908, !12, i64 3912, !12, i64 3916, !12, i64 3920, !12, i64 3924, !12, i64 3928, !8, i64 3932, !12, i64 3964, !12, i64 3968, !12, i64 3972, !12, i64 3976, !12, i64 3980, !12, i64 3984, !12, i64 3988, !12, i64 3992, !12, i64 3996, !12, i64 4000, !12, i64 4004, !8, i64 4008, !8, i64 4056, !12, i64 4256, !12, i64 4260, !12, i64 4264, !12, i64 4268, !8, i64 4272, !12, i64 4312, !12, i64 4316, !12, i64 4320, !12, i64 4324}
!18 = !{!17, !12, i64 216}
!19 = !{!12, !12, i64 0}
!20 = !{!14, !14, i64 0}
!21 = !{!11, !12, i64 90264}
!22 = !{!11, !12, i64 24}
!23 = !{!11, !7, i64 31568}
!24 = !{!25, !12, i64 12}
!25 = !{!"", !12, i64 0, !12, i64 4, !12, i64 8, !12, i64 12, !12, i64 16, !12, i64 20, !7, i64 24, !7, i64 32, !7, i64 40, !7, i64 48, !12, i64 56, !7, i64 64, !7, i64 72, !7, i64 80, !12, i64 88, !7, i64 96, !7, i64 104, !7, i64 112, !7, i64 120, !8, i64 128}
!26 = !{!17, !12, i64 3884}
!27 = !{!17, !12, i64 3888}
!28 = !{!11, !12, i64 90344}
!29 = !{!25, !7, i64 32}
!30 = !{!25, !7, i64 40}
!31 = !{!11, !12, i64 40}
!32 = !{!33, !34, i64 8}
!33 = !{!"", !15, i64 0, !8, i64 2, !34, i64 8}
!34 = !{!"long", !8, i64 0}
!35 = !{!33, !8, i64 2}
!36 = !{!33, !15, i64 0}
